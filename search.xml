<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Code Complete</title>
    <url>/2019/09/19/Code-Complete/</url>
    <content><![CDATA[<div class="note default">
            <p>manager推荐（给另一个实习生）的书，翻了一下感觉还挺好的，这本书的目的就是让你写出<em>后面的代码维护者看了以后不会想打你的代码</em>。</p><p>特别是里面每章结尾的checklist挺不错的，手打了一些感觉有点笨B，更新与否看缘分了。</p>
          </div>

<a id="more"></a>

<h2 id="Chapter-10"><a href="#Chapter-10" class="headerlink" title="Chapter 10"></a>Chapter 10</h2><h3 id="CHECKLIST-General-Considerations-In-Using-Data"><a href="#CHECKLIST-General-Considerations-In-Using-Data" class="headerlink" title="CHECKLIST: General Considerations In Using Data"></a>CHECKLIST: General Considerations In Using Data</h3><h4 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h4><ul>
<li><input disabled="" type="checkbox"> 每一个子程序都检查其输入参数的正确性吗？</li>
<li><input disabled="" type="checkbox"> 变量声明位置靠近变量第一次使用的位置吗？</li>
<li><input disabled="" type="checkbox"> 尽可能在声明变量的同时初始化变量吗？</li>
<li><input disabled="" type="checkbox"> 如果无法同时声明和初始化变量，是否在靠近第一次使用变量的位置声明变量？</li>
<li><input disabled="" type="checkbox"> 计数器和累加其是否经过适当的初始化？如果需要再一次使用，是否重新初始化？</li>
<li><input disabled="" type="checkbox"> 代码在通过编译器编译的时候是不是没有警告信息？</li>
<li><input disabled="" type="checkbox"> 如果你使用的语言允许隐式声明，你为由此可能引发的问题做好补偿措施了吗？</li>
</ul>
<h4 id="使用数据的其他事项"><a href="#使用数据的其他事项" class="headerlink" title="使用数据的其他事项"></a>使用数据的其他事项</h4><ul>
<li><input disabled="" type="checkbox"> 如果可能，所有变量都被定义为具有最小的作用域吗？</li>
<li><input disabled="" type="checkbox"> 各变量的引用点都尽可能集中在一起吗？对同一变量的两次相邻引用，或者变量的整个生命期都这样做了吗？</li>
<li><input disabled="" type="checkbox"> 控制结构符合数据类型吗？</li>
<li><input disabled="" type="checkbox"> 所有声明的变量都用到了吗？</li>
<li><input disabled="" type="checkbox"> 变量都在合适的事件绑定了吗？——也就是说，你有意识地在晚期绑定所带来的灵活性和增加的复杂度之间作出平衡了没？</li>
<li><input disabled="" type="checkbox"> 每个变量都有且仅有一种用途吗？</li>
<li><input disabled="" type="checkbox"> 每个变量的含义都很明确并且没有隐含含义吗？</li>
</ul>
<h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><ul>
<li>最小化每个变量的作用域，把同一变量的引用点集中在一起。把变量限制在子程序或类的范围内。避免使用全局数据。</li>
<li>把使用相同变量的语句尽可能集中在一起。</li>
<li>早期绑定会减低灵活性，但有助于减小复杂度。晚期绑定可以增加灵活性，同时增加复杂度。</li>
<li>把每个变量用于唯一的用途。</li>
</ul>
<h2 id="Chapter-11"><a href="#Chapter-11" class="headerlink" title="Chapter 11"></a>Chapter 11</h2><h3 id="CHECKLIST-Naming-Variables"><a href="#CHECKLIST-Naming-Variables" class="headerlink" title="CHECKLIST: Naming Variables"></a>CHECKLIST: Naming Variables</h3><h4 id="命名的一般注意事项"><a href="#命名的一般注意事项" class="headerlink" title="命名的一般注意事项"></a>命名的一般注意事项</h4><ul>
<li><input disabled="" type="checkbox"> 名字完整并准且表达了变量所代表的含义吗？</li>
<li><input disabled="" type="checkbox"> 名字反映了现实世界的问题而不是编程语言方案吗？</li>
<li><input disabled="" type="checkbox"> 名字足够长，可以让你无需苦苦思索吗？</li>
<li><input disabled="" type="checkbox"> 如果又计算值限定符，它被放在名字最后吗？</li>
<li><input disabled="" type="checkbox"> 名字中使用Count或者Index来替代Num了吗？</li>
</ul>
<h4 id="为特定类型的数据命名"><a href="#为特定类型的数据命名" class="headerlink" title="为特定类型的数据命名"></a>为特定类型的数据命名</h4><ul>
<li><input disabled="" type="checkbox"> 循环下表的名字有意义吗？（如果循环长度超过一两行代码或者出现了嵌套循环，那么就应该是ijk以外的名字</li>
<li><input disabled="" type="checkbox"> 所有的临时变量都重新命名为更有意义的名字了吗？</li>
<li><input disabled="" type="checkbox"> 当布尔变量的值为真，变量名能准确表达含义吗？</li>
<li><input disabled="" type="checkbox"> 枚举类型的名字中含有能表示其类别的前缀或者后缀了吗？</li>
<li><input disabled="" type="checkbox"> 具名常量命名是否根据它们所代表的抽象实体而不是它们引用的数字？</li>
</ul>
<h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul>
<li><input disabled="" type="checkbox"> 规则能够区分局部数据、类数据和全局数据吗？</li>
<li><input disabled="" type="checkbox"> 规则能够区分类型名、具名常量、枚举类型和变量名吗？</li>
<li><input disabled="" type="checkbox"> 规则能够在编译器不强制检测只读参数的语言里标识出子程序中的输入参数吗？</li>
<li><input disabled="" type="checkbox"> 规则尽可能与语言的标准规则兼容吗？</li>
<li><input disabled="" type="checkbox"> 名字为了可读性加以格式化吗？</li>
</ul>
<h4 id="短名字"><a href="#短名字" class="headerlink" title="短名字"></a>短名字</h4><ul>
<li><input disabled="" type="checkbox"> 代码使用了长名字吗？（除非有必要使用短名字）</li>
<li><input disabled="" type="checkbox"> 是否避免只为了省一个字符而缩写名字的情况？</li>
<li><input disabled="" type="checkbox"> 所有单词的缩写方式都一致吗？</li>
<li><input disabled="" type="checkbox"> 名字能够读出来吗？</li>
<li><input disabled="" type="checkbox"> 避免使用容易被看错或者读错的名字吗？</li>
<li><input disabled="" type="checkbox"> 在缩写对照表中对短名字作出说明吗？</li>
</ul>
<h4 id="常见命名问题：你避免使用……"><a href="#常见命名问题：你避免使用……" class="headerlink" title="常见命名问题：你避免使用……"></a>常见命名问题：你避免使用……</h4><ul>
<li><input disabled="" type="checkbox"> ……容易让人误解的名字吗？</li>
<li><input disabled="" type="checkbox"> ……有相近含义的名字吗？</li>
<li><input disabled="" type="checkbox"> ……只有一两个字符不同的名字吗？</li>
<li><input disabled="" type="checkbox"> ……发音相近的名字吗？</li>
<li><input disabled="" type="checkbox"> ……包含数字的名字吗？</li>
<li><input disabled="" type="checkbox"> ……为了缩短而故意拼错的名字吗？</li>
<li><input disabled="" type="checkbox"> ……英语中经常拼错的名字吗？</li>
<li><input disabled="" type="checkbox"> ……与标准库子程序名或者预定义变量名冲突的名字吗？</li>
<li><input disabled="" type="checkbox"> ……过于随意的名字吗？</li>
<li><input disabled="" type="checkbox"> ……含有难读字符的名字吗？</li>
</ul>
<h3 id="Key-Points-1"><a href="#Key-Points-1" class="headerlink" title="Key Points"></a>Key Points</h3><ul>
<li>好的变量名是提高程序可读性的一项关键要素。对特殊种类的变量，比如循环下标和状态变量，需要加以特殊的考虑。</li>
<li>名字要尽可能的具体。太模糊、太通用的名字通常是不好的。</li>
<li>命名应该能够区分局部数据、类数据和全局数据。它们还应该可以区分类型名、具名常量、枚举类型和变量名。</li>
<li>无论做哪种类型项目，都应该采用某种命名规则。所采用的规则的种类取决于程序规模，以及项目人数。</li>
<li>现代编程语言很少需要用到缩写。如果真的要使用缩写，请使用项目缩写词典或者标准前缀来帮助理解缩写。</li>
<li>代码阅读的次数远远多余编写次数。确保取的名字侧重于阅读方便而不是编写方便。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next配置与美化</title>
    <url>/2019/04/29/Hexo-Next%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<div class="note default">
            <p>参考各路教程对hexo的配置以及使用next的过程中的一些美化，包括添加评论(Valine)、文章浏览(LeanCloud)，以及一些杂七杂八的细节修改。</p>
          </div>

<a id="more"></a>

<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><ul>
<li><p>文章浏览数：<a href="https://bjtu-hxs.github.io/2018/06/12/leancloud-config/" target="_blank" rel="noopener">Hexo博客Next主题添加统计文章阅读量功能</a></p>
</li>
<li><p>评论系统<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>：<a href="https://www.bluelzy.com/articles/use_valine_for_your_blog.html" target="_blank" rel="noopener">为你的Hexo加上评论系统-Valine</a></p>
</li>
<li><p>文章插入本地图片</p>
<ul>
<li><a href="https://blog.csdn.net/hqweay/article/details/80847495" target="_blank" rel="noopener">hexo 生成博文插入本地图片</a></li>
<li><a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a></li>
</ul>
</li>
</ul>
<h2 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a>界面美化</h2><h3 id="字体设置！！！"><a href="#字体设置！！！" class="headerlink" title="字体设置！！！"></a>字体设置！！！</h3><p>参考<a href="https://reuixiy.github.io/beautiful/share/2018/12/11/noto-serif-sc-added-on-google-fonts.html" target="_blank" rel="noopener">Google Fonts 已支持思源宋体！</a>修改的<strong>思源宋体</strong>，博主的英文字体似乎没有设置成功，估计是和哪边的设置冲突被覆盖了。</p>
<p>参考自<a href="https://www.bluelzy.com/articles/change_to_next_theme.html" target="_blank" rel="noopener">弃暗投明-Hexo更换next主题</a>，以下主要是修改记录</p>
<ul>
<li>修改文章底部“#” 标签</li>
<li>在文末添加”本文结束”</li>
<li>在博客底部加入本站运行时间</li>
</ul>
<p>参考自<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p>
<ul>
<li>修改超链接的颜色</li>
</ul>
<p>这篇文章里面介绍的markdown技巧与内置格式很不错：<a href="https://walesexcitedmei.github.io/2018/08/30/HEXO-NexT-%E4%B8%BB%E9%A2%98%E6%8F%90%E9%AB%98%E5%8D%9A%E5%AE%A2%E9%A2%9C%E5%80%BC/" target="_blank" rel="noopener">[HEXO] NexT 主题提高博客颜值</a></p>
<h3 id="存在但我没打算做的美化"><a href="#存在但我没打算做的美化" class="headerlink" title="存在但我没打算做的美化"></a>存在但我没打算做的美化</h3><ul>
<li>动态背景canvas</li>
<li>鼠标点击出现桃心</li>
<li>RSS 有点犹豫，感觉现在rss有点鸡肋</li>
</ul>
<h2 id="一些很棒的格式"><a href="#一些很棒的格式" class="headerlink" title="一些很棒的格式"></a>一些很棒的格式</h2><p>一个俄罗斯老哥的博文讲的特别好：<a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Hexo Theme Next Test</a></p>
<h3 id="Note标签"><a href="#Note标签" class="headerlink" title="Note标签"></a>Note标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">          May be not defined.</span><br></pre></td></tr></table></figure>

<div class="note default">
            <p>default</p>
          </div>

<div class="note primary">
            <p>primary</p>
          </div>

<div class="note success">
            <p>success</p>
          </div>

<div class="note info">
            <p>info</p>
          </div>

<div class="note warning">
            <p>warning</p>
          </div>

<div class="note dangner">
            <p>danginer</p>
          </div>

<div class="note danger no-icon">
            <p>note without icon</p>
          </div>

<h3 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h3><p>这个我感觉我会懒得用诶。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@content %&#125;</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">          May be not defined.</span><br></pre></td></tr></table></figure>

<span class="label default">default</span>，<span class="label primary">primary</span>，<span class="label success">success</span>，<span class="label info">info</span>，<span class="label warning">warning</span>，<span class="label danger">danger</span>就是这个样子

<h3 id="tab-选项卡"><a href="#tab-选项卡" class="headerlink" title="tab 选项卡"></a>tab 选项卡</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 2** 被设置成默认了</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 3** 哇，你找到我了！</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p></div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong> 被设置成默认了</p></div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p></div></div></div>

<h2 id="博客参考"><a href="#博客参考" class="headerlink" title="博客参考"></a>博客参考</h2><ul>
<li><p><a href="https://blog.dlzhang.com/" target="_blank" rel="noopener">banban ramble</a></p>
</li>
<li><p><a href="http://dannii.cc/2018/07/23/28blog/" target="_blank" rel="noopener">Divergent</a></p>
</li>
<li><p><a href="https://www.vincentqin.tech/" target="_blank" rel="noopener">RealCat</a></p>
</li>
<li><p><a href="https://www.bluelzy.com/" target="_blank" rel="noopener">BlueLzy’s Blog</a></p>
</li>
<li><p><a href="http://gisersqdai.top/" target="_blank" rel="noopener">GISerDaiShaoqing’s Blog</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Haskell</title>
    <url>/2019/09/19/Haskell/</url>
    <content><![CDATA[<div class="note default">
            <p>一直挺想看看Haskell的函数式编程是怎么样的，所以开始学，但是最近实习+毕设可能稍微忙一些，而且发现自己之前的记录方式太繁复了，可能会把那个网页的大半都拷下来，思考要不要做这么笨B的事了。</p>
          </div>

<a id="more"></a>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="What’s-Haskell"><a href="#What’s-Haskell" class="headerlink" title="What’s Haskell"></a>What’s Haskell</h3><ul>
<li>Haskell is a purely functional programming language.</li>
<li>In purely functional languages, a function has no side-effects.</li>
<li>The only thing a function can do is calculate something and return it as a result.</li>
<li><strong>referential transparency</strong>: If a function is called twice with the same parameters, it’s guaranteed to return the same result.</li>
<li><strong>lazy language</strong>: Haskell won’t execute functions and calculate things until it’s really forced to show you a result.</li>
<li><strong>statically typed</strong> and has <strong>type inference</strong> </li>
</ul>
<h3 id="Install-Haskell-compiler"><a href="#Install-Haskell-compiler" class="headerlink" title="Install Haskell compiler"></a>Install Haskell compiler</h3><ul>
<li>download at <a href="https://www.haskell.org/platform" target="_blank" rel="noopener">Haskell Platform</a></li>
<li>for ubuntu: (don’t know why it is 630MB large …)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install haskell-platform</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Starting-Out"><a href="#Starting-Out" class="headerlink" title="Starting Out"></a>Starting Out</h2><h3 id="Ready-set-go"><a href="#Ready-set-go" class="headerlink" title="Ready, set, go!"></a>Ready, set, go!</h3><ul>
<li>run <code>ghci</code></li>
<li>use <code>:set prompt &quot;ghci&gt; &quot;</code> to change prompt<ul>
<li>but what does this prompt use for?</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta:~$ ghci</span><br><span class="line">GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? <span class="keyword">for</span> <span class="built_in">help</span></span><br><span class="line">Prelude&gt;</span><br><span class="line">Prelude&gt; :<span class="built_in">set</span> prompt <span class="string">"ghci&gt; "</span></span><br><span class="line">ghci&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>+</code> works only on things that are considered numbers.</li>
<li><code>==</code> works on any two things that can be compared.</li>
<li>prefix | infix     <figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">div</span> <span class="number">92</span> <span class="number">10</span> is equal to  <span class="number">92</span> `div` <span class="number">10</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Baby’s-first-functions"><a href="#Baby’s-first-functions" class="headerlink" title="Baby’s first functions"></a>Baby’s first functions</h3><ul>
<li><p>it doesn’t matter if a function is define later then be used. (compile successfully)</p>
</li>
<li><p>if statements:  <strong>else part is mandatory</strong> in Haskell</p>
</li>
<li><p>An <strong>expression</strong> is basically a piece of code that returns a value.</p>
</li>
<li><p>symbol <strong>‘</strong> can be use in function name, for example <code>foo&#39;</code> is a different function with <code>foo</code></p>
</li>
<li><p>usually use <strong>‘</strong> to either denote a strict version of a function (one that isn’t lazy) or a slightly modified version of a function or a variable.</p>
</li>
<li><p>comment: <code>--</code></p>
</li>
<li><p>functions can’t begin with uppercase letters</p>
</li>
<li><p><strong>definition</strong>(or <strong>name</strong>): a function which doesn’t take any parameters</p>
</li>
</ul>
<h3 id="An-intro-to-lists"><a href="#An-intro-to-lists" class="headerlink" title="An intro to lists"></a>An intro to lists</h3><ul>
<li>lists are a <strong>homogenous</strong> data structure – can’t mix type</li>
<li><code>let</code> keyword can define a name – otherwise a parse error will be triggered</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> lostNumbers = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">42</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; lostNumbers  </span><br><span class="line">[<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">42</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>strings are lists, for example <code>&quot;hello&quot;</code> is just syntactic sugar for <code>[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</code></p>
</li>
<li><p><code>++</code>operator can put two lists together (two lists)</p>
<ul>
<li>Haskell has to walk through the whole list on the left side of <code>++</code>, terrible when list is too long </li>
</ul>
</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ++ [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"hello"</span> ++ <span class="string">" "</span> ++ <span class="string">"world"</span>  </span><br><span class="line"><span class="string">"hello world"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; ['w','o'] ++ ['o','t']  </span><br><span class="line"><span class="string">"woot"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>:</code>operator can put element at the beginning of a list (a elem and a list)</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; '<span class="type">A'</span>:<span class="string">" SMALL CAT"</span>  </span><br><span class="line"><span class="string">"A SMALL CAT"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">5</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>[1,2,3]</code> is actually just syntactic sugar for <code>1:2:3:[]</code></p>
</li>
<li><p><code>!!</code>operator: get an elementout of a list by index. The indices start at 0.</p>
</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"Steve Buscemi"</span> !! <span class="number">6</span>  </span><br><span class="line">'<span class="type">B'</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">9.4</span>,<span class="number">33.2</span>,<span class="number">96.2</span>,<span class="number">11.2</span>,<span class="number">23.25</span>] !! <span class="number">1</span>  </span><br><span class="line"><span class="number">33.2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Lists can also contain lists. </li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> b = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; b ++ [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]:b  </span><br><span class="line">[[<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; b !! <span class="number">2</span>  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line"><span class="title">ghci</span>&gt; b !! <span class="number">2</span> !! <span class="number">0</span>  </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>list comparasion: in Lexicographical order. First the heads are compared. If they are equal then the second elements are compared, etc.</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] &gt; [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>] &gt;= [<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>] &gt; [<span class="number">5</span>]  </span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>] == [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]  </span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>head</code> takes a list and returns its head. The head of a list is basically its first element.</li>
<li><code>tail</code> takes a list and returns its tail. In other words, it chops off a list’s head.</li>
<li><code>last</code> takes a list and returns its last element.</li>
<li><code>init</code> takes a list and returns everything except its last element.</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>haskell</category>
      </categories>
      <tags>
        <tag>haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>Codec Test</title>
    <url>/2019/12/01/Codec-Test/</url>
    <content><![CDATA[<div class="note default">
            <p>前几周帮着做了一下x265对比SVT-AV1的测试，以及实验室让测的HM, x265, SVT-HEVC的测试，以下是关于测试方法以及注意点的一些记录。</p>
          </div>

<a id="more"></a>
<h2 id="Quality"><a href="#Quality" class="headerlink" title="Quality"></a>Quality</h2><ul>
<li><p>测试质量的时候因为对速度没有要求，所以可以写完脚本随便跑。</p>
</li>
<li><p>质量测试与机器无关，找个跑的快的机器跑就行</p>
</li>
<li><p>aom cpu-used 0 特别慢</p>
</li>
</ul>
<h2 id="Speed"><a href="#Speed" class="headerlink" title="Speed"></a>Speed</h2><ul>
<li><p>速度测试在不同机器上跑，尽量控制其他条件一致</p>
</li>
<li><p>关于速度测试的方法：</p>
<ul>
<li>同一测试命令，跑多路测试，其中同时跑的路数提前测定，取把cpu跑满（使用率&gt;95%）的最小值。</li>
<li>同一命令跑至少三分钟。</li>
<li>测试结果为多路测试的fps求和。</li>
</ul>
</li>
<li><p>一些备注：</p>
<ul>
<li>速度测试这么做的理由：<ul>
<li>对于VOD场景，一台Server的能力体现在全负荷工作时，可以达到的编码fps。</li>
<li>测试的目的是表现codec在Intel的CPU上的表现（毕竟目的是卖硬件）。</li>
<li>我测过，对于恰好把CPU跑满和跑满以后在加一路，二者的结果差不多，感觉多跑一路不会有很严重的调度问题。</li>
<li>跑三分钟是为了减小调度以及编码器初始化时间等的影响。</li>
</ul>
</li>
</ul>
</li>
<li><p>速度测试中的一些问题：</p>
<ul>
<li>编码器对CPU的使用不是恒定的，多线程的波动比较厉害（因为编码的不同阶段对CPU的使用程度不同吧）</li>
<li>SVT-AV1在启动初期是单线程的，可能会对速度标定的测试造成影响。</li>
<li>对于编码器比较快的预设模式，原本的测试序列长度不够，不能达到跑三分钟的需求，所以要对序列做concat，对不同的preset编码不同长度的序列（快预设跑短序列是跑太快了，结果不准；但是慢预设跑长序列就会浪费很多时间）</li>
<li>x265和svthevc的比较快的选项编码速度特别快，要concat到很长很长。</li>
</ul>
</li>
</ul>
<h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><ul>
<li>序列concat的方法：yuv序列直接用<code>cat</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..9&#125;; <span class="keyword">do</span></span><br><span class="line">	cat test.yuv &gt;&gt; concated.yuv</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>python测试要跑的路数的时候，用<code>psutil</code>库的<code>psutil.cpu_percent(time)</code>来读取cpu使用率</p>
</li>
<li><p>多进程使用<code>subprocess</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printAndLog</span><span class="params">(info, log)</span>:</span></span><br><span class="line">    print(info)</span><br><span class="line">    log.write(info+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(cmd, log)</span>:</span></span><br><span class="line">    printAndLog(cmd, log)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        o = subprocess.check_output(cmd, stderr=subprocess.STDOUT,</span><br><span class="line">                                    	shell=<span class="literal">True</span>).decode(<span class="string">"UTF-8"</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"failed to execute command "</span>, e.output)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    delta = time.time() - start</span><br><span class="line">    printAndLog(o, log)</span><br><span class="line">    readable = str(datetime.timedelta(seconds=delta))</span><br><span class="line">    printAndLog(<span class="string">"use %f secondes(%s)"</span> %(delta, readable), log)</span><br></pre></td></tr></table></figure>

<ul>
<li>跑完测试之后的分析，主要是提取PSNR、Bitrate和计算BDRATE<ul>
<li>PSNR有两种方式：<ul>
<li>直接从编码器给出的报告提取</li>
<li>用ffmpeg计算</li>
<li>这里的问题在于编码器给的可能不全（其实Average PSNR也可以通过YUV三个通道的自己算）</li>
</ul>
</li>
<li>Bitrate也有两种方法：<ul>
<li>直接从编码器给出的报告提取</li>
<li>用ffprobe提取，但是码流文件是无法使用ffprobe的，还得先用ffmpeg转成 mp4 才可以提取，很麻烦！</li>
</ul>
</li>
<li>从log中提取PSNR和FPS有两种方法：<ul>
<li>bash脚本，<code>grep</code> + <code>awk</code></li>
<li>python脚本， <code>re</code>库正则匹配</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># calculate PSNR by ffmpeg</span></span><br><span class="line">ffmpeg -s 1920x1080 -i Ref.yuv -i test.bin -lavfi  psnr -f null -</span><br><span class="line"><span class="comment"># transcode .bin to .mp4</span></span><br><span class="line">ffmpeg -i test.bin -c:v copy test.mp4</span><br><span class="line"><span class="comment"># ffprobe get bitrate</span></span><br><span class="line">ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1 test.mp4</span><br></pre></td></tr></table></figure>

<ul>
<li>使用python库<a href="https://github.com/Anserw/Bjontegaard_metric" target="_blank" rel="noopener">bjontegaard_metric</a>计算bdrate</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bjontegaard_metric <span class="keyword">import</span> *</span><br><span class="line">R1 = np.array([<span class="number">686.76</span>, <span class="number">309.58</span>, <span class="number">157.11</span>, <span class="number">85.95</span>])</span><br><span class="line">PSNR1 = np.array([<span class="number">40.28</span>, <span class="number">37.18</span>, <span class="number">34.24</span>, <span class="number">31.42</span>])</span><br><span class="line">R2 = np.array([<span class="number">893.34</span>, <span class="number">407.8</span>, <span class="number">204.93</span>, <span class="number">112.75</span>])</span><br><span class="line">PSNR2 = np.array([<span class="number">40.39</span>, <span class="number">37.21</span>, <span class="number">34.17</span>, <span class="number">31.24</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'BD-PSNR: '</span>, BD_PSNR(R1, PSNR1, R2, PSNR2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'BD-RATE: '</span>, BD_RATE(R1, PSNR1, R2, PSNR2)</span><br></pre></td></tr></table></figure>

<ul>
<li>同事的脚本写的比较乱，但已经都测完了，我没事也不是很想去清理<del>~</del></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>codec</category>
      </categories>
      <tags>
        <tag>media</tag>
        <tag>codec</tag>
      </tags>
  </entry>
  <entry>
    <title>Install cgdb from source and configurate it for c++</title>
    <url>/2019/10/21/Install-cgdb-from-source-and-configurate-it-for-c/</url>
    <content><![CDATA[<div class="note default">
            <p><a href="https://cgdb.github.io/" target="_blank" rel="noopener">cgdb</a> is a lightweight curses (terminal-based) interface to the GNU Debugger (GDB). In addition to the standard gdb console, cgdb provides a split screen view that displays the source code as it executes. The keyboard interface is modeled after vim, so vim users should feel at home using cgdb.</p><p>To use <em>vertical</em> window split orientation mode in cgdb, I need cgdb version higher than 0.7, so I decided to install cgdb from source.</p>
          </div>

<a id="more"></a>

<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><h3 id="pre-requirements"><a href="#pre-requirements" class="headerlink" title="pre-requirements"></a>pre-requirements</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install automake libncurses5-dev flex texinfo libreadline-dev</span><br></pre></td></tr></table></figure>

<h3 id="build-from-source"><a href="#build-from-source" class="headerlink" title="build from source"></a>build from source</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># latest sources should be newer than version 0.7.1</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/cgdb/cgdb.git </span><br><span class="line"><span class="built_in">cd</span> cgdb</span><br><span class="line">mkdir build</span><br><span class="line">./autogen.sh</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">../configure</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><ul>
<li><a href="https://cgdb.github.io/docs/Configuring-CGDB.html" target="_blank" rel="noopener">Configuring-CGDB</a></li>
<li><a href="https://www.bookstack.cn/read/cgdb-manual-in-chinese/4.0.md" target="_blank" rel="noopener">CGDB配置命令</a></li>
</ul>
<h3 id="Tell-gdb-to-skip-standard-files"><a href="#Tell-gdb-to-skip-standard-files" class="headerlink" title="Tell gdb to skip standard files"></a>Tell gdb to skip standard files</h3><ul>
<li><p><a href="https://stackoverflow.com/questions/5676241/tell-gdb-to-skip-standard-files" target="_blank" rel="noopener">Tell gdb to skip standard files</a></p>
</li>
<li><p><a href="https://xaizek.github.io/2016-05-26/skipping-standard-library-in-gdb/" target="_blank" rel="noopener">Skipping standard C++ library during debug session in gdb</a></p>
</li>
<li><p>According to these articles, if you have gdb version higher than 7.11 then just add this line to your <code>~/.gdbinit</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To skip all .h files in /usr/include/c++/5/bits</span></span><br><span class="line">skip -gfi /usr/include/c++/5/bits/*.h</span><br></pre></td></tr></table></figure>

<ul>
<li>Sadly, my gdb version is exactly 7.11 (installed via apt). Following  solution is provided by blog above, and it works for me.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">define skipstdcxxheaders</span><br><span class="line">python</span><br><span class="line">def skipAllIn(root):</span><br><span class="line">    import os</span><br><span class="line">    <span class="keyword">for</span> root, <span class="built_in">dirs</span>, files <span class="keyword">in</span> os.walk(root, topdown=False):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            path = os.path.join(root, name)</span><br><span class="line">            gdb.execute(<span class="string">'skip file %s'</span> % path, to_string=True)</span><br><span class="line"><span class="comment"># do this for C++ only</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'c++'</span> <span class="keyword">in</span> gdb.execute(<span class="string">'show language'</span>, to_string=True):</span><br><span class="line">    skipAllIn(<span class="string">'/usr/include/c++'</span>)</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define hookpost-run</span><br><span class="line">    skipstdcxxheaders</span><br><span class="line">end</span><br><span class="line">define hookpost-start</span><br><span class="line">    skipstdcxxheaders</span><br><span class="line">end</span><br><span class="line">define hookpost-attach</span><br><span class="line">    skipstdcxxheaders</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<ul>
<li>To verify whether the configuration works, check with <code>info skip</code> in cgdb.</li>
</ul>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><ul>
<li>These errors are all dependences issues.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># problem</span></span><br><span class="line">$ ./autogen.sh</span><br><span class="line">...</span><br><span class="line">E: Unable to locate package aclocal</span><br><span class="line"><span class="comment"># solution</span></span><br><span class="line">$ sudo apt-get install automake</span><br><span class="line"></span><br><span class="line"><span class="comment"># problem</span></span><br><span class="line">$ ./autogen.sh</span><br><span class="line">...</span><br><span class="line">configure: error: CGDB requires curses.h or ncurses/curses.h to build.</span><br><span class="line"><span class="comment"># solution</span></span><br><span class="line">$ sudo apt-get install libncurses5-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># problem</span></span><br><span class="line">$ ./autogen.sh</span><br><span class="line">...</span><br><span class="line">configure: error: Please install flex before installing</span><br><span class="line"><span class="comment"># solution</span></span><br><span class="line">$ sudo apt-get install flex</span><br><span class="line"></span><br><span class="line"><span class="comment"># problem</span></span><br><span class="line">$ ./autogen.sh</span><br><span class="line">...</span><br><span class="line">configure: error: Please install makeinfo before installing</span><br><span class="line"><span class="comment"># solution</span></span><br><span class="line">$ sudo apt-get install texinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># problem</span></span><br><span class="line">$ ./autogen.sh</span><br><span class="line">...</span><br><span class="line">checking version of installed readline library... configure: WARNING: Could not <span class="built_in">test</span> version of installed readline library.</span><br><span class="line">configure: error: CGDB requires GNU readline 5.1 or greater to link.</span><br><span class="line">  If you used --with-readline instead of using the system readline library,</span><br><span class="line">  make sure to <span class="built_in">set</span> the correct readline library on the linker search path</span><br><span class="line">  via LD_LIBRARY_PATH or some other facility.</span><br><span class="line"><span class="comment"># solution</span></span><br><span class="line">$ sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题字体配置</title>
    <url>/2020/06/03/Next%E4%B8%BB%E9%A2%98%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<div class="note default">
            <p>我对博客字体的要求是希望能使用思源宋体，实际配置中发现还需要让正文行内的代码部分字体减小的效果。这篇博客记录了我在配置字体的时候学到的一些机制以及踩到的坑。</p>
          </div>

<a id="more"></a>

<h3 id="字体配置是如何生效的"><a href="#字体配置是如何生效的" class="headerlink" title="字体配置是如何生效的"></a>字体配置是如何生效的</h3><p>就我的理解，Hexo可以帮助把我的博客静态化，产生一系列html，我的字体配置会体现在html中，具体是：</p>
<ol>
<li>在html的<code>&lt;head&gt;</code>中，通过超链接方式对于字体的引用。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个链接和在google fonts里选中字体，Embed模式里给的链接一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.loli.net/css?family=Noto Serif SC:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|EB Garamond:300,300italic,400,400italic,700,700italic|Source Code Pro:300,300italic,400,400italic,700,700italic&amp;display=swap&amp;subset=latin,latin-ext"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>有了上面的<code>stylesheet</code>，在CSS里就可以使用<code>font-family: Noto Serif SC;</code>去使用字体了。具体的，从Chrome Developer Tools可以看到：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 这里的字体顺序可以对后续字体变量的描述加以验证</span><br><span class="line"><span class="selector-class">.post-body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Noto Serif SC'</span>, <span class="string">"PingFang SC"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">overflow-wrap</span>: break-word;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Source Code Pro'</span>, consolas, Menlo, monospace, <span class="string">"PingFang SC"</span>, <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字体变量是如何定义的"><a href="#字体变量是如何定义的" class="headerlink" title="字体变量是如何定义的"></a>字体变量是如何定义的</h3><p>这里分为两个层面，一个是底层的字体变量定义，另一个是Next模板配置文件<code>_config.yml</code>中提供的对字体变量覆盖的选项。</p>
<h4 id="字体变量的定义-base-styl"><a href="#字体变量的定义-base-styl" class="headerlink" title="字体变量的定义_base.styl"></a>字体变量的定义<code>_base.styl</code></h4><p>在<code>source/css/_variables/base.styl</code>里有关于字体变量的定义，主要关注一下字体：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// Font families.</span><br><span class="line">$font-family-chinese      = "PingFang SC", "Microsoft YaHei";</span><br><span class="line"></span><br><span class="line">$font-family-base         = $font-family-chinese, sans-serif;</span><br><span class="line">$font-family-base         = get_font_family('global'), $font-family-chinese, sans-serif if get_font_family('global');</span><br><span class="line"></span><br><span class="line">$font-family-logo         = $font-family-base;</span><br><span class="line">$font-family-logo         = get_font_family('title'), $font-family-base if get_font_family('title');</span><br><span class="line"></span><br><span class="line">$font-family-headings     = $font-family-base;</span><br><span class="line">$font-family-headings     = get_font_family('headings'), $font-family-base if get_font_family('headings');</span><br><span class="line"></span><br><span class="line">$font-family-posts        = $font-family-base;</span><br><span class="line">$font-family-posts        = get_font_family('posts'), $font-family-base if get_font_family('posts');</span><br><span class="line"></span><br><span class="line">$font-family-monospace    = consolas, Menlo, monospace, $font-family-chinese;</span><br><span class="line">$font-family-monospace    = get_font_family('codes'), consolas, Menlo, monospace, $font-family-chinese if get_font_family('codes');</span><br></pre></td></tr></table></figure>

<p>因为字体有Fallback机制，会按照定义的顺序尝试使用字体，如果不可用会换到下一个，从这段关于字体变量的定义不难发现，<code>$font-family-base</code>的第一个选项是<code>get_font_family(&#39;global&#39;)</code>，也就是在主题配置文件里设置的global字体，然后才是第一行定义的<code>$font-family-chinese</code>，而下面的logo、headings、posts则都是以base为基础，如果在主题配置文件里定义了相关的则覆盖。<code>$font-family-monospace</code>又加了几项备用的等线字体。</p>
<h4 id="Next主题配置文件-config-yml"><a href="#Next主题配置文件-config-yml" class="headerlink" title="Next主题配置文件_config.yml"></a>Next主题配置文件<code>_config.yml</code></h4><p>Next主题的配置文件<code>_config.yml</code>里有一段关于字体配置的选项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">https://fonts.loli.net</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#family: EB Garamond</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lobster</span> <span class="string">Two</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#family: Roboto Slab</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">EB</span> <span class="string">Garamond</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#family: Roboto Slab</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Source</span> <span class="string">Code</span> <span class="string">Pro</span></span><br></pre></td></tr></table></figure>

<p>就像上一节讲的，这里填写相应的字体会作为最优先使用的字体，这边的缺点是这个配置文件里不能在一项里面配置多个字体。</p>
<h3 id="字体获取"><a href="#字体获取" class="headerlink" title="字体获取"></a>字体获取</h3><p>字体可以在<a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts</a> 挑选，填入<code>_config.yml</code>里面相应类型的<code>family</code>字段即可。</p>
<p>看别的文章讲<code>fonts.googleapis.com</code>的稳定性问题，这些文章一般会建议使用<code>fonts.loli.net</code>，这次看到这篇帖子<a href="https://sb.sb/blog/css-cdn/" target="_blank" rel="noopener">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a>，才知道原来是后者反代了前者。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">https://fonts.loli.net</span></span><br></pre></td></tr></table></figure>

<h3 id="正确地修改字体样式"><a href="#正确地修改字体样式" class="headerlink" title="正确地修改字体样式"></a>正确地修改字体样式</h3><p>以上的配置只能配置字体、设置字体大小，如果要进一步修改字体样式：如定制code类型的字体大小，就需要自定义样式。新版本的Next自定义样式不再使用<code>next/source/css/_custom/custom.styl</code>，而是用了更通用的，放在hexo的<code>source</code>目录下的方式。</p>
<p>首先在<code>_config.yml</code>里面启用相应想要自定义的部分：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>但是这个自定义样式的方式不能覆盖变量默认定义的值，只能先注释掉变量默认的定义，然后在自定义变量里面定义。</p>
<p>在<code>styles.styl</code>里可以对一些样式进行更改（更通用地），比如我迫切需要的正文中的<code>&lt;code&gt;</code>部分字体减小。</p>
<h4 id="减小正文中-lt-code-gt-的字体大小"><a href="#减小正文中-lt-code-gt-的字体大小" class="headerlink" title="减小正文中&lt;code&gt;的字体大小"></a>减小正文中<code>&lt;code&gt;</code>的字体大小</h4><p>默认配置下，正文中的<code>&lt;code&gt;</code>部分和正文字体大小是一样的（之前用的老版本不是这样），视觉效果很差，我想把这部分的字体减小为正文字体的一定百分比。</p>
<p>一番寻找之后，找到的是定义代码框中字体大小的<code>$table-font-size = $font-size-small;</code>，但这条设置只能控制代码框里面的字体，不能控制正文中的<code>&lt;code&gt;</code>部分，找了挺久没有找到相关的设置，因此只能自定义。在<code>source/_data/styles.styl</code>写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">4px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">80%</span>;                                                        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以达到想要的效果了。</p>
<h3 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h3><p>一些教程太老了，可能一方面是当时的Next版本对各种配置的支持性没有现在好，然后另一方面也是因为一开始自己对这些配置并不了解，逐渐踩坑逐渐理解了这些。</p>
<p>因为我一开始只是想使用思源宋体，看的教程<a href="https://io-oi.me/tech/noto-serif-sc-added-on-google-fonts/" target="_blank" rel="noopener">Google Fonts 已支持思源宋体！</a>，他的做法是自己从google fonts上获取了Embed的链接，然后放到<code>next/layout/_partials/head/external-fonts.swig</code>里面（也没写怎么去加载这个.swig），相当于是自己强行在html的head里又贴了一段<code>&lt;link rel=&quot;stylesheet&quot;</code>。</p>
<p>并且，当时的Next版本自定义格式使用的是<code>next/source/css/_custom/custom.styl</code>，我在v7.8.0用这种方式发现不生效，查了一下改了自定义的机制，新机制确实更合理了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://theme-next.org/docs/theme-settings/#Fonts-Customization" target="_blank" rel="noopener">Next官方文档</a></p>
</li>
<li><p><a href="https://leay.net/2020/02/14/hexo-next-font/" target="_blank" rel="noopener">Hexo Next 主题字体相关配置</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title>Multimedia lab2 freeswitch</title>
    <url>/2019/05/20/Multimedia%20lab2%20freeswitch/</url>
    <content><![CDATA[<div class="note default">
            <p>Multimedia的lab2报告，主要是FreeSWITCH的使用。（再次为删掉了自己lab1的报告而暴哭！）</p>
          </div>

<a id="more"></a>

<div class="note warning">
            <p>我在本地用的是typora编辑器写markdown，转移到hexo的时候在图片上的显示有点问题，尤其是双栏显示问题很大，有点懒的搞这个。</p>
          </div>

<h2 id="Ubuntu16-04-源码编译安装FreeSWITCH"><a href="#Ubuntu16-04-源码编译安装FreeSWITCH" class="headerlink" title="Ubuntu16.04 源码编译安装FreeSWITCH"></a>Ubuntu16.04 源码编译安装FreeSWITCH</h2><div class="note warning">
            <p>这部分因为在之前的文章<a href="/2019/05/09/Ubuntu16-04-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85freeswitch/" title="Ubuntu16-04-源码编译安装freeswitch">Ubuntu16-04-源码编译安装freeswitch</a>已经写了，就略去不表。</p>
          </div>

<h2 id="视频通话实现"><a href="#视频通话实现" class="headerlink" title="视频通话实现"></a>视频通话实现</h2><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>实现FreeSWITCH支持WebRTC视频通话。</p>
<h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><p>配置FreeSWITCH，需要启用一些视频会议需要的mod</p>
<h4 id="FreeSWITCH"><a href="#FreeSWITCH" class="headerlink" title="FreeSWITCH"></a>FreeSWITCH</h4><p><strong>FreeSWITCH</strong>是一个免费的开源应用服务器，用于实时通信，WebRTC，电信，视频和互联网协议语音（VoIP）。多平台，它运行在Linux，Windows，macOS和FreeBSD上。它用于构建PBX系统，IVR服务，具有聊天和屏幕共享的视频会议，批发最低成本路由，会话边界控制器（SBC）和嵌入式通讯设备。它完全支持加密，ZRTP，DTLS，SIPS。它可以充当PSTN，SIP，WebRTC和许多其他通信协议之间的网关。它的核心库libFreeSWITCH可以嵌入到其他项目中。它是根据免费软件许可证Mozilla Public License（MPL）许可的。</p>
<p>FreeSWITCH可以处理来自IP网络（VoIP）和PSTN（公共交换电话网络 - 常规固定电话）的语音，视频和文本通信。 FreeSWITCH支持所有流行的VoIP协议以及与PRI的接口。 有关支持的协议的完整列表，请参阅“端点”页面。 FreeSWITCH使用的一些常见功能包括:</p>
<ul>
<li>PBX（办公电话系统）</li>
<li>5类软交换（电话运营商）</li>
<li>应用程序服务器，如语音邮件，会议，IVR</li>
<li>软件电话</li>
</ul>
<h4 id="webRTC"><a href="#webRTC" class="headerlink" title="webRTC"></a>webRTC</h4><p><strong>WebRTC</strong>（Web实时通信）是一个免费的开源项目，通过简单的应用程序编程接口（API）为Web浏览器和移动应用程序提供实时通信（RTC ）。它允许音频和视频通信在网页内部工作，允许直接的点对点通信，无需安装插件或下载本机应用程序。[3]支持苹果，谷歌，微软，Mozilla的，和歌剧，WebRTC正在通过万维网联盟（W3C）和互联网工程任务组（IETF）进行标准化。</p>
<p>其使命是“ 为浏览器，移动平台和物联网设备开发丰富，高质量的RTP应用程序，并允许它们通过一组通用协议进行通信 ”。的参考实现被释放自由软件下一个条款BSD许可证。OpenWebRTC提供了另一种基于多媒体框架GStreamer的免费实现。JavaScript发明家布兰登·艾奇（Brendan Eich）称其为“在一场开放且无阻碍的网络长期战争中的新阵线”。</p>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><p>修改基础配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/freeswitch/conf/vars.xml</span></span><br><span class="line"><span class="comment"># 默认密码修改</span></span><br><span class="line">&lt;X-PRE-PROCESS cmd=<span class="string">"set"</span> data=<span class="string">"default_password=666666"</span>/&gt;</span><br><span class="line"><span class="comment"># 修改支持的编码列表</span></span><br><span class="line">&lt;X-PRE-PROCESS cmd=<span class="string">"set"</span> data=<span class="string">"global_codec_prefs=OPUS,G722,PCMU,PCMA,H264,VP8,H263"</span>/&gt;</span><br><span class="line">&lt;X-PRE-PROCESS cmd=<span class="string">"set"</span> data=<span class="string">"outbound_codec_prefs=OPUS,G722,PCMU,PCMA,H264,VP8,H263"</span>/&gt;</span><br><span class="line"><span class="comment"># 打开转码支持</span></span><br><span class="line">&lt;X-PRE-PROCESS cmd=<span class="string">"set"</span> data=<span class="string">"media_mix_inbound_outbound_codecs=true"</span>/&gt;</span><br><span class="line"><span class="comment"># 打开SSL支持</span></span><br><span class="line">&lt;X-PRE-PROCESS cmd=<span class="string">"set"</span> data=<span class="string">"internal_ssl_enable=true"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>修改sip通话设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/freeswitch/conf/sip_profiles/internal.xml</span></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">&lt;param name=<span class="string">"inbound-late-negotiation"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"inbound-zrtp-passthru"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">&lt;param name=<span class="string">"apply-candidate-acl"</span> value=<span class="string">"localnet.auto"</span>/&gt;</span><br><span class="line"><span class="comment"># 修改rtp inactivity timeout</span></span><br><span class="line">&lt;param name=<span class="string">"rtp-timeout-sec"</span> value=<span class="string">"30000"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"rtp-hold-timeout-sec"</span> value=<span class="string">"180000"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>修改默认加载模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/freeswitch/conf/autoload_configs/modules.conf.xml</span></span><br><span class="line">&lt;load module=<span class="string">"mod_av"</span>/&gt;</span><br><span class="line">&lt;load module=<span class="string">"mod_shout"</span>/&gt;</span><br><span class="line">&lt;load module=<span class="string">"mod_h26x"</span>/&gt;</span><br><span class="line">&lt;load module=<span class="string">"mod_ilbc"</span>/&gt;</span><br><span class="line">&lt;load module=<span class="string">"mod_rtmp"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="配置修改验证"><a href="#配置修改验证" class="headerlink" title="配置修改验证"></a>配置修改验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">freeswitch@xps15&gt; sofia status</span><br><span class="line">                     Name	   Type	                                      Data	State</span><br><span class="line">============================================================================================</span><br><span class="line">external-ipv6	profile	  sip:mod_sofia@[2403:d400:1001:2:cc58:83ee:da6e:b743]:5080	RUNNING (0)</span><br><span class="line">external-ipv6	profile	  sip:mod_sofia@[2403:d400:1001:2:cc58:83ee:da6e:b743]:5081	RUNNING (0) (TLS)</span><br><span class="line">  10.162.48.191	  <span class="built_in">alias</span>	                                  internal	ALIASED</span><br><span class="line">     external	profile	          sip:mod_sofia@10.162.48.191:5080	RUNNING (0)</span><br><span class="line">     external	profile	          sip:mod_sofia@10.162.48.191:5081	RUNNING (0) (TLS)</span><br><span class="line">    external::example.com	gateway	                   sip:joeuser@example.com	NOREG</span><br><span class="line">internal-ipv6	profile	  sip:mod_sofia@[2403:d400:1001:2:cc58:83ee:da6e:b743]:5060	RUNNING (0)</span><br><span class="line">internal-ipv6	profile	  sip:mod_sofia@[2403:d400:1001:2:cc58:83ee:da6e:b743]:5061	RUNNING (0) (TLS)</span><br><span class="line">      internal	profile	          sip:mod_sofia@10.162.48.191:5060	RUNNING (0)</span><br><span class="line">      internal	profile	          sip:mod_sofia@10.162.48.191:5061	RUNNING (0) (TLS)</span><br><span class="line">============================================================================================</span><br><span class="line">4 profiles 1 <span class="built_in">alias</span></span><br></pre></td></tr></table></figure>

<h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><div class="note danger">
            <p>前方高能！</p>
          </div>

<h4 id="两人视频通话"><a href="#两人视频通话" class="headerlink" title="两人视频通话"></a>两人视频通话</h4><p>以下是两人视频通话的实验结果，VP8和H264编码均测试可行。</p>
<p>关于H265， 由于FreeSWITCH不支持H265编解码，因此可以通过开启透传模式进行实验，此时FreeSWITCH不进行编解码，只负责设备间协调。</p>
<p>注意：H265只支持在两个linphone之间拨打，webRTC不支持。</p>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='250';   src="Screenshot_2019-05-08-22-09-02-509_org.linphone.png">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 视频通话效果</div> </center>

<center>
    <img src="Screenshot_2019-05-08-22-00-41-928_org.linphone.png" title="图 H264视频通话" width="250">
    <img src="Screenshot_2019-05-08-22-03-58-211_org.linphone.png" title="图 VP8视频通话" width="250"><br>
</center>


<h4 id="webRTC-1"><a href="#webRTC-1" class="headerlink" title="webRTC"></a>webRTC</h4><p>实验需要使用<a href="https://www.mozilla.org/en-US/firefox/organizations/all/" target="_blank" rel="noopener"><strong>Firefox ESR (Firefox Extended Support Release)</strong></a>浏览器，打开jssip_demo，登录到FreeSWITCH</p>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='450';   src="1557729990825.png">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 webRTC端登录</div> </center>


<p>成功登录之后可以正常进行视频通话、会议通话等，和手机端linphone对等。</p>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='600';   src="webRTC.png">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 webRTC通话效果</div> </center>

<p>此时，可以在FreeSWITCH查看到设备注册情况：</p>
<ul>
<li>手机端 agent：<code>LinphoneAndroid/3.3.1 (belle-sip/1.6.3)</code></li>
<li>电脑端 agent：<code>JsSIP 0.7.17</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">freeswitch@xps15&gt; sofia status profile internal reg</span><br><span class="line">Registrations:</span><br><span class="line">===========================================================================================</span><br><span class="line">Call-ID:    	4TEf3h8-8Q</span><br><span class="line">User:       	1000@10.162.48.191</span><br><span class="line">Contact:    	<span class="string">""</span> &lt;sip:1000@10.162.158.184:37914;transport=udp&gt;</span><br><span class="line">Agent:      	LinphoneAndroid/3.3.1 (belle-sip/1.6.3)</span><br><span class="line">Status:     	Registered(UDP)(unknown) EXP(2019-05-13 15:40:51) EXPSECS(3128)</span><br><span class="line">Ping-Status:	Reachable</span><br><span class="line">Ping-Time:	0.00</span><br><span class="line">Host:       	xps15</span><br><span class="line">IP:         	10.162.158.184</span><br><span class="line">Port:       	37914</span><br><span class="line">Auth-User:  	1000</span><br><span class="line">Auth-Realm: 	10.162.48.191</span><br><span class="line">MWI-Account:	1000@10.162.48.191</span><br><span class="line"></span><br><span class="line">Call-ID:    	e7pjfnevajs4jt4tdc58dk</span><br><span class="line">User:       	1001@10.162.48.191</span><br><span class="line">Contact:    	<span class="string">""</span> &lt;sip:hmf3085e@75k2o7pe5ngo.invalid;transport=ws;fs_nat=yes;fs_path=sip%3Ahmf3085e%4010.162.48.191%3A56540%3Btransport%3Dws&gt;</span><br><span class="line">Agent:      	JsSIP 0.7.17</span><br><span class="line">Status:     	Registered(WS-NAT)(unknown) EXP(2019-05-13 14:58:45) EXPSECS(602)</span><br><span class="line">Ping-Status:	Reachable</span><br><span class="line">Ping-Time:	0.00</span><br><span class="line">Host:       	xps15</span><br><span class="line">IP:         	10.162.48.191</span><br><span class="line">Port:       	56540</span><br><span class="line">Auth-User:  	1001</span><br><span class="line">Auth-Realm: 	10.162.48.191</span><br><span class="line">MWI-Account:	1001@10.162.48.191</span><br><span class="line"></span><br><span class="line">Total items returned: 2</span><br><span class="line">===========================================================================================</span><br></pre></td></tr></table></figure>

<h4 id="视频会议"><a href="#视频会议" class="headerlink" title="视频会议"></a>视频会议</h4><p>拨号3000可以进入视频会议：</p>
<p>通过<code>conference + commend</code>可以手动对视频会议配置进行修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">freeswitch@xps15&gt; conference  list</span><br><span class="line">Conference 3000-10.162.48.191 (2 members rate: 8000 flags: running|answered|enforce_min|dynamic|exit_sound|enter_sound|video_floor_only|video_rfc4579|livearray_sync|transcode_video|video_muxing|minimize_video_encoding|json_status)</span><br><span class="line">2;sofia/internal/1001@10.162.48.191;724374d7-55b5-4998-ba53-2fc160ff9650;1001;1001;hear|speak|video;0;0;0;100</span><br><span class="line">1;sofia/internal/1000@10.162.48.191;32797f63-e4c4-489f-b2fc-aa2ac91fdff9;1000;1000;hear|speak|talking|video|floor|vid-floor;0;0;0;100</span><br></pre></td></tr></table></figure>

<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='600';   src="IMG_20190508_225334.jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 视频会议效果</div> </center>

<h5 id="视频会议布局修改"><a href="#视频会议布局修改" class="headerlink" title="视频会议布局修改"></a>视频会议布局修改</h5><p>调整视频会议布局需要修改以下配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/freeswitch/conf/autoload_configs/conference.conf.xml</span></span><br><span class="line"><span class="comment"># 加载布局模块</span></span><br><span class="line">&lt;param name=<span class="string">"conference-flags"</span> value=<span class="string">"video-floor-only|rfc-4579|livearray-sync|minimize-video-encoding"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"video-mode"</span> value=<span class="string">"mux"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"video-layout-name"</span> value=<span class="string">"2x2"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"video-canvas-size"</span> value=<span class="string">"1920x1080"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"video-canvas-bgcolor"</span> value=<span class="string">"#333333"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"video-layout-bgcolor"</span> value=<span class="string">"#000000"</span>/&gt;</span><br><span class="line">&lt;param name=<span class="string">"video-fps"</span> value=<span class="string">"25"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>conference_layouts.conf.xml</code>中，FreeSWITCH预置了一些布局配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>1x1<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>2x1<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>1x1+2x1<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>2x2<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>3x3<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>4x4<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>5x5<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>6x6<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>8x8<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"grid-zoom"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>1x1<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>2x1-zoom<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>3x1-zoom<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>2x2<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>5-grid-zoom<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>3x2-zoom<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>7-grid-zoom<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>4x2-zoom<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>3x3<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"1up_top_left_plus"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>1up_top_left+5<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>1up_top_left+7<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>1up_top_left+9<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"3up_plus"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>3up+4<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">layout</span>&gt;</span>3up+9<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="布局调整测试"><a href="#布局调整测试" class="headerlink" title="布局调整测试"></a>布局调整测试</h5><p>在FreeSWITCH中使用命令：<code>conference 3000-10.162.48.191 vid-layout 1up_top_left+5</code>，可以实时修改布局配置，其中，可修改的布局在前文已经展示，以下展示了一些布局效果。</p>
<ul>
<li>1x1+2x1</li>
</ul>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='500';   src="IMG_20190508_225334.jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 布局1x1+2x1</div> </center>

<ul>
<li>2x2</li>
</ul>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='500';   src="IMG_20190508_225122.jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 布局2x2</div> </center>

<ul>
<li>3x1-zoom</li>
</ul>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='500';   src="IMG_20190508_225246.jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 布局3x1-zoom</div> </center>

<ul>
<li>1up_top_left_plus</li>
</ul>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='500';   src="IMG_20190508_225226.jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 布局1up_top_left_plus</div> </center>

<ul>
<li>3up+4</li>
</ul>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='500';   src="IMG_20190508_225407.jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">图 布局3up+4</div> </center>

<h4 id="延迟测试"><a href="#延迟测试" class="headerlink" title="延迟测试"></a>延迟测试</h4><p>以下是延迟测试，可以看到通过视频通话实时传回的图像中，时钟显示在同一秒，说明延迟在1s以内。</p>
<center>     <img style="border-radius: 0.3125em;     box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"   width='500';   src="Cache_77f4b204702be80a..jpg">     <br>     <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 0px;">图 延迟测试</div> </center>

<h4 id="H264-vs-H265"><a href="#H264-vs-H265" class="headerlink" title="H264 vs H265"></a>H264 vs H265</h4><p>我们在保持通话双方摄像头固定、画面保持不变的情况下分别测试了H264和H65视频通话，从以下结果可以看到，H265的编码效率略高于H264。</p>
<ul>
<li>由于视频通话时，上传下载带宽是不断变化的，截图只能反映大致信息不能完全代表两者差异</li>
<li>事实上感觉H265只比H264好了一点点，差距不是太大，这可能和视频分辨率较小也有关。</li>
</ul>
<center>
    <img src="Screenshot_2019-05-20-12-37-16-743_org.linphone.png" title="图 H265视频通话" width = "250">
    <img src="Screenshot_2019-05-20-12-36-17-502_org.linphone.png" title="图 H264视频通话" width = "250"><br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;">               </div>   <div style="color:orange; border-bottom: 1px solid #d9d9d9;     display: inline-block;     color: #999;     padding: 2px;"></div>
</center>



<h3 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h3><p>本次实验总体来说难度不大，主要困难在于FreeSWITCH编译时碰到的问题，由于FreeSWITCH的使用仅限于视频通话的设置和视频会议的设置，在ppt较为完善的内容知指导以及学长的热心答疑下，后续部分难度不大。</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="不能修改视频会议布局"><a href="#不能修改视频会议布局" class="headerlink" title="不能修改视频会议布局"></a>不能修改视频会议布局</h4><p>原因是重新编译安装了FreeSWITCH后，忘记修改<code>conference.conf.xml</code>文件了，相当于没有加载布局模块</p>
<h4 id="视频会议选择H265没有视频"><a href="#视频会议选择H265没有视频" class="headerlink" title="视频会议选择H265没有视频"></a>视频会议选择H265没有视频</h4><p>原因是FreeSWITCH默认没有支持。</p>
<h3 id="号码说明"><a href="#号码说明" class="headerlink" title="号码说明"></a>号码说明</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9999 | 保持音乐</span><br><span class="line">9996 | echo，回音测试</span><br><span class="line">9992 | info，在控制台上显示呼叫参数</span><br><span class="line">9888 | FreeSWITCH电话会议，每周召开</span><br><span class="line">5900 | 呼叫挂起</span><br><span class="line">5901 | 接听挂起的呼叫</span><br><span class="line">5000 | 示例IVR</span><br><span class="line">4000 | 听取语音信箱</span><br><span class="line">33xx | 电话会议，48K(其中xx可为00-99，下同)</span><br><span class="line">32xx | 电话会议，32K</span><br><span class="line">31xx | 电话会议，16K</span><br><span class="line">30xx | 电话会议，8K</span><br><span class="line">2000-2002 | 呼叫组</span><br><span class="line">1000-1019 | 默认分机号</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/Reasonss/article/details/81171288" target="_blank" rel="noopener">Ubuntu16.04从零开始freeSWITCH安装</a></li>
<li><a href="https://wsonh.com/article/22.html" target="_blank" rel="noopener">在ubuntu16.04部署配置安装freeswitch以及常见问题解决</a></li>
<li><a href="https://www.codetd.com/article/5754468" target="_blank" rel="noopener">Ubuntu 16.04 install FreeSWITCH v1.8</a></li>
<li><a href="https://blog.csdn.net/u011745859/article/details/82150814" target="_blank" rel="noopener">FreeSwitch 1.9.0支持H264的视频会议配置</a></li>
<li><a href="https://blog.csdn.net/Java_lilin/article/details/78121184" target="_blank" rel="noopener">ubuntu16.04 编译freeswitch1.9的视频mod_av模块</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>media</category>
      </categories>
      <tags>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 unity plugins install</title>
    <url>/2019/05/11/Ubuntu16-04-unity-plugins-install/</url>
    <content><![CDATA[<div class="note default">
            <p>ubuntu18.04使用gnome桌面，gnome有很多很棒的插件，而且安装可以通过web和gnome-tweaks，十分方便。那么在ubuntu16.04 的unity桌面下，其实也可以安装一些桌面插件，下面是我安装的几个比较有用的插件。</p>
          </div>

<a id="more"></a>

<h3 id="weather"><a href="#weather" class="headerlink" title="weather"></a>weather</h3><p>这个插件如果选择开启 <span class="label default">Automatic Location Detection</span>的话，可能定位效果比较差（可能是通过ip定位的），但是如果手动设置了经纬度，居然可以精确到我寝室楼号？！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:kasra-mp/ubuntu-indicator-weather</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install indicator-weather</span><br></pre></td></tr></table></figure>

<h3 id="caffeine"><a href="#caffeine" class="headerlink" title="caffeine"></a>caffeine</h3><p>开启caffeine防止休眠，在有时候电脑开文件偶尔看一眼的时候非常有用，或者是在图书馆去灌水+厕所很容易超过五分钟，万一有程序在跑，电脑休眠了就很烦了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:caffeine-developers/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install caffeine</span><br></pre></td></tr></table></figure>
<h3 id="multiload"><a href="#multiload" class="headerlink" title="multiload"></a>multiload</h3><p>主要用它来查看cpu占用情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install indicator-multiload</span><br></pre></td></tr></table></figure>

<h3 id="cpufreq"><a href="#cpufreq" class="headerlink" title="cpufreq"></a>cpufreq</h3><p>可以方便地切换cpu性能or节能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install indicator-cpufreq</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://itsfoss.com/best-indicator-applets-ubuntu/" target="_blank" rel="noopener">10 Best Indicator Applets For Ubuntu 16.04</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Submit Patches to FFmpeg</title>
    <url>/2020/03/06/Submit-Patches-to-FFmpeg/</url>
    <content><![CDATA[<div class="note default">
            <p>想参加今年的GSoC 2020的一个FFmpeg project，需要先做一个Qualification Task: Fix any open bug(s) on trac, get your patch reviewed on ffmpeg-devel@ mailing list. 花了几天解决了一个bug，没几行代码（我太慢了太菜了），然后在提交patch的时候碰到了不少问题。基本上，hwren的博客<a href="https://www.jianshu.com/p/1f54b144bd5b" target="_blank" rel="noopener">FFmpeg - 修改提交流程</a>里面都讲到了，但实际操作中，我还是碰到了一些问题，主要困难在于最后一步<code>git send-email</code>尝试了很久才成功，另外，邮件列表回复格式也折腾了我好久。</p><p>本文包含：1. 如何提交patch; 2. <code>git send-email</code>配置; 3. 邮件列表回复格式; 4. 一些经验教训</p>
          </div>

<a id="more"></a>

<h2 id="Check-List"><a href="#Check-List" class="headerlink" title="Check List"></a>Check List</h2><ol>
<li>准备好patch</li>
<li>FATE测试：<code>make fate -j8</code></li>
<li>提交修改：<code>git commit -s</code>，<code>-s</code>表示签名</li>
<li>生成patch：<code>git format-patch -v[x] -[n]</code>，<code>-v[x]</code>是版本，<code>-[n]</code>是打包commit的数量</li>
<li>检查patch：使用工具<code>tools/pacheck</code>检查<code>patch</code>规范，按提示进行修改</li>
<li>按照官方<code>check list</code>进行检查：<a href="https://ffmpeg.org/developer.html#toc-Patch-submission-checklist" target="_blank" rel="noopener">Patch submission checklist</a></li>
<li>提交patch：<code>git send-email -to ffmpeg-devel@ffmpeg.org 0001-xxxxx.patch</code></li>
<li>检查邮件和<a href="https://patchwork.ffmpeg.org/project/ffmpeg/list/" target="_blank" rel="noopener">https://patchwork.ffmpeg.org/project/ffmpeg/list/</a>，应该可以看到新发的patch</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example: git commit</span></span><br><span class="line">commit e27a35e0458224ef6f47753f248ba84ec8284818</span><br><span class="line">Author: Jun Zhao &lt;barryjzhao@tencent.com&gt;</span><br><span class="line">Date:   Wed Feb 19 11:51:20 2020 +0800</span><br><span class="line"></span><br><span class="line">    lavf/dashdec: add 3GPP TS26.247 probe <span class="keyword">in</span> dash demuxer</span><br><span class="line">    </span><br><span class="line">    Enabled the 3GP-DASH Release-10/Relase-11(3GPP TS26.247) profile</span><br><span class="line">    to dash demuxer probe.</span><br><span class="line">    </span><br><span class="line">    Signed-off-by: Jun Zhao &lt;barryjzhao@tencent.com&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-send-email-configuration"><a href="#git-send-email-configuration" class="headerlink" title="git send-email configuration"></a>git send-email configuration</h2><h3 id="default-way"><a href="#default-way" class="headerlink" title="default way"></a>default way</h3><h4 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1. 安装软件"></a>1. 安装软件</h4><ul>
<li>发现默认不带git-email，首先安装git-email</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt install git-email</span><br></pre></td></tr></table></figure>

<h4 id="2-配置smtp"><a href="#2-配置smtp" class="headerlink" title="2. 配置smtp"></a>2. 配置smtp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vim</span> ~/.gitconfig</span><br><span class="line"><span class="comment"># add this</span></span><br><span class="line">[sendemail]</span><br><span class="line">    from = Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">    smtpencryption = tls</span><br><span class="line">    smtpserver = smtp.sjtu.edu.cn</span><br><span class="line">    smtpserverport = 587</span><br><span class="line">    smtpuser = sj.hc_Zhong@sjtu.edu.cn</span><br><span class="line">    smtppass = mypasswd</span><br><span class="line">    suppresscc = self</span><br><span class="line">    chainreplyto = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-发送patch"><a href="#3-发送patch" class="headerlink" title="3. 发送patch"></a>3. 发送patch</h4><ul>
<li>可以先发给自己试一试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git send-email -to sj.hc_Zhong@sjtu.edu.cn 0001-avformat-hlsenc-Fix-initial-setting-for-start_pts.patch  </span><br><span class="line">0001-avformat-hlsenc-Fix-initial-setting-for-start_pts.patch</span><br><span class="line">OK. Log says:</span><br><span class="line">Server: smtp.sjtu.edu.cn</span><br><span class="line">MAIL FROM:&lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">RCPT TO:&lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">From: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">To: sj.hc_Zhong@sjtu.edu.cn</span><br><span class="line">Subject: [PATCH] avformat/hlsenc: Fix initial setting <span class="keyword">for</span> start_pts</span><br><span class="line">Date: Thu,  5 Mar 2020 21:53:48 +0800</span><br><span class="line">Message-Id: &lt;1583416428-7444-1-git-send-email-sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">X-Mailer: git-send-email 2.7.4</span><br><span class="line"></span><br><span class="line">Result: 250</span><br></pre></td></tr></table></figure>

<h3 id="use-msmtp-proxychain"><a href="#use-msmtp-proxychain" class="headerlink" title="use msmtp + proxychain"></a>use msmtp + proxychain</h3><ul>
<li>参考：<a href="https://www.smitechow.com/2018/10/git-send-email-use-proxy.html" target="_blank" rel="noopener">git send-email use proxy (msmtp + proxychains)</a>，这么做的原因是</li>
</ul>
<blockquote>
<p><code>git send-email</code> not work with normal git proxy config, <code>proxychains</code> is a general proxy for Linux normal shell command, but not work with <code>git send-email</code>.</p>
<p>So, basic we need tell <code>send-email</code> use another smtp client <code>msmtp</code> which compatible <code>proxychains</code>.</p>
</blockquote>
<h4 id="1-安装软件-1"><a href="#1-安装软件-1" class="headerlink" title="1. 安装软件"></a>1. 安装软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt install msmtp proxychain</span><br></pre></td></tr></table></figure>

<h4 id="2-修改配置文件x3"><a href="#2-修改配置文件x3" class="headerlink" title="2. 修改配置文件x3"></a>2. 修改配置文件x3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vim</span> ~/.msmtprc</span><br><span class="line"><span class="comment"># Example for a user configuration file</span></span><br><span class="line"><span class="comment"># Set default values for all following accounts.</span></span><br><span class="line">defaults</span><br><span class="line">auth on</span><br><span class="line">tls on</span><br><span class="line">tls_trust_file /etc/ssl/certs/ca-certificates.crt</span><br><span class="line">logfile ~/.msmtp.log</span><br><span class="line"><span class="comment"># My email service</span></span><br><span class="line">account sjtu</span><br><span class="line">host smtp.sjtu.edu.cn</span><br><span class="line">port 587</span><br><span class="line"><span class="comment"># proxy here is useless</span></span><br><span class="line"><span class="comment"># proxy_host 127.0.0.1</span></span><br><span class="line"><span class="comment"># proxy_port 7890</span></span><br><span class="line">from sj.hc_Zhong@sjtu.edu.cn</span><br><span class="line">user sj.hc_Zhong</span><br><span class="line">password mypasswd</span><br><span class="line"><span class="comment"># Set a default account</span></span><br><span class="line">account default : sjtu</span><br><span class="line"><span class="variable">$vim</span> ~/.gitconfig</span><br><span class="line">[sendemail]</span><br><span class="line">    smtpserver = /usr/bin/msmtp</span><br><span class="line"><span class="variable">$vim</span> /etc/proxychain.conf</span><br><span class="line">[ProxyList]</span><br><span class="line">http        127.0.0.1 7890</span><br><span class="line">https       127.0.0.1 7890</span><br><span class="line">socks5 		  127.0.0.1 1080</span><br></pre></td></tr></table></figure>

<h4 id="3-修改-msmtprc权限"><a href="#3-修改-msmtprc权限" class="headerlink" title="3. 修改~/.msmtprc权限"></a>3. 修改<code>~/.msmtprc</code>权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$chmod</span> 0600 ~/.msmtprc</span><br></pre></td></tr></table></figure>

<h4 id="4-发送patch"><a href="#4-发送patch" class="headerlink" title="4. 发送patch"></a>4. 发送patch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ proxychains git send-email -to ffmpeg-devel@ffmpeg.org  0001-avformat-hlsenc-Fix-initial-setting-for-start_pts.patch  </span><br><span class="line">ProxyChains-3.1 (http://proxychains.sf.net)</span><br><span class="line">0001-avformat-hlsenc-Fix-initial-setting-for-start_pts.patch</span><br><span class="line">(mbox) Adding cc: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt; from line <span class="string">'From: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;'</span></span><br><span class="line">(body) Adding cc: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt; from line <span class="string">'Signed-off-by: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;'</span></span><br><span class="line"></span><br><span class="line">From: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">To: ffmpeg-devel@ffmpeg.org</span><br><span class="line">Cc: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">Subject: [PATCH] avformat/hlsenc: Fix initial setting <span class="keyword">for</span> start_pts</span><br><span class="line">Date: Thu,  5 Mar 2020 21:41:52 +0800</span><br><span class="line">Message-Id: &lt;1583415712-6396-1-git-send-email-sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">X-Mailer: git-send-email 2.7.4</span><br><span class="line"></span><br><span class="line">    The Cc list above has been expanded by additional</span><br><span class="line">    addresses found <span class="keyword">in</span> the patch commit message. By default</span><br><span class="line">    send-email prompts before sending whenever this occurs.</span><br><span class="line">    This behavior is controlled by the sendemail.confirm</span><br><span class="line">    configuration setting.</span><br><span class="line"></span><br><span class="line">    For additional information, run <span class="string">'git send-email --help'</span>.</span><br><span class="line">    To retain the current behavior, but squelch this message,</span><br><span class="line">    run <span class="string">'git config --global sendemail.confirm auto'</span>.</span><br><span class="line"></span><br><span class="line">Send this email? ([y]es|[n]o|[q]uit|[a]ll): y  </span><br><span class="line">|DNS-request| smtp.sjtu.edu.cn </span><br><span class="line">|S-chain|-&lt;&gt;-127.0.0.1:7890-&lt;&gt;&lt;&gt;-4.2.2.2:53-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">|DNS-response| smtp.sjtu.edu.cn is 202.112.26.54</span><br><span class="line">|S-chain|-&lt;&gt;-127.0.0.1:7890-&lt;&gt;&lt;&gt;-202.112.26.54:587-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">OK. Log says:</span><br><span class="line">Sendmail: /usr/bin/msmtp -i ffmpeg-devel@ffmpeg.org sj.hc_Zhong@sjtu.edu.cn</span><br><span class="line">From: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">To: ffmpeg-devel@ffmpeg.org</span><br><span class="line">Cc: Hongcheng Zhong &lt;sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">Subject: [PATCH] avformat/hlsenc: Fix initial setting <span class="keyword">for</span> start_pts</span><br><span class="line">Date: Thu,  5 Mar 2020 21:41:52 +0800</span><br><span class="line">Message-Id: &lt;1583415712-6396-1-git-send-email-sj.hc_Zhong@sjtu.edu.cn&gt;</span><br><span class="line">X-Mailer: git-send-email 2.7.4</span><br><span class="line">Result: OK</span><br></pre></td></tr></table></figure>

<h2 id="Reply-email-configure-your-email-client"><a href="#Reply-email-configure-your-email-client" class="headerlink" title="Reply email (configure your email client)"></a>Reply email (configure your email client)</h2><ul>
<li>因为mail list用的是传统的回复风格，找了好久应该怎么配置邮箱客户端</li>
<li>FFmpeg的FAQ中的<a href="https://ffmpeg.org/mailing-list-faq.html#Rules-and-Etiquette" target="_blank" rel="noopener">Rules-and-Etiquette</a>提到的格式相关：</li>
</ul>
<blockquote>
<ul>
<li>Avoid <a href="https://en.wikipedia.org/wiki/Posting_style#Top-posting" target="_blank" rel="noopener">top-posting</a>. Also see <a href="https://ffmpeg.org/mailing-list-faq.html#What-is-top_002dposting_003f" target="_blank" rel="noopener">What is top-posting?</a></li>
<li>Avoid hijacking threads. Thread hijacking is replying to a message and changing the subject line to something unrelated to the original thread. Most email clients will still show the renamed message under the original thread. This can be confusing and these types of messages are often ignored.</li>
<li>Do not send screenshots. Copy and paste console text instead of making screenshots of the text.</li>
<li>Avoid sending email disclaimers and legalese if possible as this is a public list.</li>
<li>If you attach files avoid compressing small files. Uncompressed is preferred.</li>
<li>Please do not send HTML-only messages. The mailing list will ignore the HTML component of your message. Most mail clients will automatically include a text component: this is what the mailing list will use.</li>
<li>Configuring your mail client to break lines after 70 or so characters is recommended.</li>
</ul>
</blockquote>
<ul>
<li>其中提到的”Avoid top-posting”，区分好这个概念很重要，沿着这个找找到了关键<ul>
<li>sjtu的webmail设置如下：Preferences&gt;Mail&gt;Composing Messages&gt;Email Reply选中Use prefix</li>
<li>其他设置细节还不清楚</li>
</ul>
</li>
</ul>
<h2 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h2><ul>
<li><p>确保你的修改可以通过FATE测试，<code>make fate</code>会比较慢，可以<code>make fate -j8</code></p>
</li>
<li><p>查到有说在<code>.msmtprc</code>里面加<code>proxy_host</code>和<code>proxy_port</code>来走代理的，但是尝试了一下好像没用。</p>
</li>
<li><p><code>user</code>字段写完整的邮箱地址或者<code>@</code>前面部分都可以。</p>
</li>
<li><p><code>git send-email --smtp-debug=1</code>并不能看到debug信息，也不知道为什么。</p>
</li>
<li><p>比较坑的地方是端口：<code>net.sjtu.edu.cn</code>里面说的：</p>
<blockquote>
<p>SMTP 发信服务器为 smtp.sjtu.edu.cn， 安全端口为 465；  </p>
</blockquote>
<p>然而事实上我一开始用465端口死活发不出去，全都死在错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Unable to initialize SMTP properly. Check config and use --smtp-debug. VALUES: server=smtp.sjtu.edu.cn encryption=tls hello=localhost.localdomain port=465 at /usr/lib/git-core/git-send-email line 1383.</span><br></pre></td></tr></table></figure>

<p>后来在<a href="https://wiki.archlinux.org/index.php/Msmtp" target="_blank" rel="noopener">wiki.archlinux.msmtp</a>里面看到了有关的描述，似乎启用TLS的话，应该用587端口，挺坑的。</p>
</li>
<li><p>中间试了几次Gmail，发现Google给我发了拦截未知访问的邮件，Google安全做的真好。</p>
</li>
<li><p>尝试了msmtp+proxychains，并在修改端口为578后成功发送，后来想着再试试原生的方式，没准只是端口的问题，试了一下，果然是这样！</p>
</li>
<li><p>就我尝试的范围内，两种方式的差别有以下：</p>
<ol>
<li>原生的方式加的那几条配置挺实用的，还没有在msmtp里面找过</li>
<li>msmtp要求配置文件改权限为600，因为里面写了明文密码，记得还看到过用别的工具把明文密码加密掉的方式，相对安全一些吧。</li>
</ol>
</li>
<li><p>涉及多文件的patch还没有碰到过，之后再更新一下。</p>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://ffmpeg.org/developer.html" target="_blank" rel="noopener">FFmpeg Developer Documentation</a></p>
</li>
<li><p><a href="https://ffmpeg.org/mailing-list-faq.html" target="_blank" rel="noopener">FFmpeg Mailing List FAQ</a></p>
</li>
<li><p><a href="https://www.smitechow.com/2018/10/git-send-email-use-proxy.html" target="_blank" rel="noopener">git send-email use proxy (msmtp + proxychains)</a></p>
</li>
<li><p><a href="https://wiki.archlinux.org/index.php/Msmtp" target="_blank" rel="noopener">wiki.archlinux.msmtp</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/1f54b144bd5b" target="_blank" rel="noopener">FFmpeg - 修改提交流程, by hwren</a></p>
</li>
<li><p><a href="https://wiki.openstack.org/wiki/MailingListEtiquette" target="_blank" rel="noopener">MailingListEtiquette</a></p>
</li>
<li><p><a href="https://www.freedesktop.org/wiki/Software/PulseAudio/HowToUseGitSendEmail/" target="_blank" rel="noopener">How to Use git send-email</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 编译安装caffe</title>
    <url>/2019/05/13/Ubuntu16-04-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85caffe/</url>
    <content><![CDATA[<div class="note default">
            <p>第2次配置caffe环境吧，感觉只要之前没有瞎搞过其实caffe还挺好装的。（写的比较简略，主要记录了一些error）</p>
          </div>

<a id="more"></a>

<h2 id="Ubuntu16-04-编译安装caffe"><a href="#Ubuntu16-04-编译安装caffe" class="headerlink" title="Ubuntu16.04 编译安装caffe"></a>Ubuntu16.04 编译安装caffe</h2><p>基本按照<a href="https://caffe.berkeleyvision.org/install_apt.html" target="_blank" rel="noopener">caffe官方文档</a>给出的操作就可以，可能会碰到一些问题，在下面记录了</p>
<h4 id="error1"><a href="#error1" class="headerlink" title="error1"></a>error1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc fatal   : Unsupported gpu architecture <span class="string">'compute_20'</span></span><br></pre></td></tr></table></figure>

<h4 id="solution1"><a href="#solution1" class="headerlink" title="solution1"></a>solution1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class="line">CUDA_ARCH :=    -gencode arch=compute_30,code=sm_30 \</span><br><span class="line">                -gencode arch=compute_35,code=sm_35 \</span><br><span class="line">                -gencode arch=compute_50,code=sm_50 \</span><br><span class="line">                -gencode arch=compute_52,code=sm_52 \</span><br><span class="line">                -gencode arch=compute_60,code=sm_60 \</span><br><span class="line">                -gencode arch=compute_61,code=sm_61 \</span><br><span class="line">                -gencode arch=compute_61,code=compute_61</span><br></pre></td></tr></table></figure>

<h4 id="error2"><a href="#error2" class="headerlink" title="error2"></a>error2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In file included from ./include/caffe/blob.hpp:8:0,</span><br><span class="line">                 from ./include/caffe/layers/absval_layer.hpp:6,</span><br><span class="line">                 from src/caffe/layers/absval_layer.cpp:3:</span><br><span class="line">./include/caffe/common.hpp:5:27: fatal error: gflags/gflags.h: 没有那个文件或目录</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<h4 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a>solution2</h4><p><a href="https://github.com/BVLC/caffe/wiki/Commonly-encountered-build-issues" target="_blank" rel="noopener">Commonly encountered build issues</a>这篇里面写了一些常见的问题，确实有用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgflags-dev</span><br><span class="line">sudo apt-get install libgflags-dev</span><br><span class="line">sudo apt-get install libgoogle-glog-dev</span><br></pre></td></tr></table></figure>

<h4 id="error3"><a href="#error3" class="headerlink" title="error3"></a>error3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AR -o .build_release/lib/libcaffe.a</span><br><span class="line">LD -o .build_release/lib/libcaffe.so.1.0.0</span><br><span class="line">/usr/bin/ld: 找不到 -lboost_python3</span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">Makefile:582: recipe <span class="keyword">for</span> target <span class="string">'.build_release/lib/libcaffe.so.1.0.0'</span> failed</span><br></pre></td></tr></table></figure>

<h4 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h4><p><a href="https://github.com/BVLC/caffe/issues/4843" target="_blank" rel="noopener">Solve the problem: “cannot find -lboost_python3” when using Python3 Ubuntu16.04</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/x86_64-linux-gnu</span><br><span class="line">sudo ln -s libboost_python-py35.so libboost_python3.so</span><br></pre></td></tr></table></figure>

<h3 id="pycaffe接口"><a href="#pycaffe接口" class="headerlink" title="pycaffe接口"></a>pycaffe接口</h3><p>这部分在官方文档的<span class="label default">Python and/or MATLAB Caffe (optional)</span>部分，</p>
<h4 id="error1-1"><a href="#error1-1" class="headerlink" title="error1"></a>error1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python 3.5.2 (default, Nov 12 2018, 13:43:14) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import caffe</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named <span class="string">'caffe'</span></span><br></pre></td></tr></table></figure>

<h4 id="solution1-1"><a href="#solution1-1" class="headerlink" title="solution1"></a>solution1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta:caffe$ sudo <span class="built_in">echo</span> <span class="built_in">export</span> PYTHONPATH=<span class="string">"/opt/caffe/python"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">sparta:caffe$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="error2-1"><a href="#error2-1" class="headerlink" title="error2"></a>error2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python 3.5.2 (default, Nov 12 2018, 13:43:14) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import caffe</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/opt/caffe/python/caffe/__init__.py"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer</span><br><span class="line">  File <span class="string">"/opt/caffe/python/caffe/pycaffe.py"</span>, line 15, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import caffe.io</span><br><span class="line">  File <span class="string">"/opt/caffe/python/caffe/io.py"</span>, line 2, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import skimage.io</span><br><span class="line">ImportError: No module named <span class="string">'skimage'</span></span><br></pre></td></tr></table></figure>

<h4 id="solution2-1"><a href="#solution2-1" class="headerlink" title="solution2"></a>solution2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$CAFFE_PATH</span>/python</span><br><span class="line">sudo pip3 install -r requirement.txt</span><br></pre></td></tr></table></figure>

<h4 id="error3-1"><a href="#error3-1" class="headerlink" title="error3"></a>error3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">File <span class="string">"/usr/local/lib/python3.5/dist-packages/dateutil/rrule.py"</span>, line 55</span><br><span class="line">    raise ValueError, <span class="string">"Can't create weekday with n == 0"</span></span><br><span class="line">                    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<h4 id="solution3-1"><a href="#solution3-1" class="headerlink" title="solution3"></a>solution3</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install python-dateutil --upgrade</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 源码编译安装freeswitch</title>
    <url>/2019/05/09/Ubuntu16-04-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85freeswitch/</url>
    <content><![CDATA[<div class="note default">
            <p>在Multimedia的lab2需要我们安装使用freeswitch, 并且因为需要进行视频会议，需要加一些mod，在本机编译安装了freeswitch，总的来说编译安装freeswitch本体还是比较容易的，在编译几个模块的时候碰到一些问题比较麻烦。</p>
          </div>

<a id="more"></a>

<h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://freeswitch.org/stash/scm/fs/freeswitch.git</span><br></pre></td></tr></table></figure>

<p>因为我本机在校园网下使用git clone 会报错，所以直接去下载了tar.gz源码包<a href="https://files.freeswitch.org/freeswitch-releases/" target="_blank" rel="noopener">freeswitch-1.8.5</a>，但是后来在寝室测试直接git clone 也可以。git clone 地址：<a href="https://freeswitch.org/stash/projects/FS/repos/freeswitch/browse" target="_blank" rel="noopener">https://freeswitch.org/stash/projects/FS/repos/freeswitch/browse</a>，可以点tag找自己想要的版本</p>
<p>后来因为缺mod，图省事就使用了和助教一样的版本1.6.19。</p>
<h3 id="安装环境依赖"><a href="#安装环境依赖" class="headerlink" title="安装环境依赖"></a>安装环境依赖</h3><p>安装编译需要的lib库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install build-essential subversion automake autoconf wget libtool libncurses5-dev libspeex-dev libspeexdsp-dev sqlite3 libsqlite3-dev libcurl4-openssl-dev  libldns-dev libedit-dev libssl-dev pkg-config yasm liblua50-dev libopus-dev libsndfile-dev libpq-dev pkg-config lua5.2 lua5.2-doc liblua5.2-dev libreadline-dev</span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><h4 id="编译更多模块"><a href="#编译更多模块" class="headerlink" title="编译更多模块"></a>编译更多模块</h4><p>freeswitch可以通过动态加载模块，如果需要编译更多的模块，有两种方法：</p>
<ul>
<li>编辑<code>freeswitch/modules.conf</code>文件，找到要安装的模块，去掉前面的注释符号#，然后需要重新执行<code>./configure</code>，编译整个freeswitch。</li>
<li>在命令行执行<code>make mod_xxx-install</code>命令，这样就编译相应模块，并把编译后的动态库安装的<code>/usr/local/freeswitch/mod</code>目录下了。</li>
</ul>
<p>编译安装完以后，</p>
<ul>
<li>可以通过启动freeswitch后运行<code>load mod_xxx</code>来测试相应模块的编译是否成功。</li>
<li>也可以修改<code>/usr/local/freeswitch/conf/autoload_configs/modules.conf.xml</code>设置freeswitch启动时自动加载的模块。</li>
</ul>
<h4 id="编译本体"><a href="#编译本体" class="headerlink" title="编译本体"></a>编译本体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./bootstrap.sh   <span class="comment">#如果是tar包则省略这一步</span></span><br><span class="line">./configure</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软连接创建</span></span><br><span class="line">ln -sf /usr/<span class="built_in">local</span>/freeswitch/bin/freeswitch /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ln -sf /usr/<span class="built_in">local</span>/freeswitch/bin/fs_cli /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装声音文件</span></span><br><span class="line">sudo make <span class="built_in">cd</span>-sounds-install</span><br><span class="line">sudo make <span class="built_in">cd</span>-moh-install</span><br></pre></td></tr></table></figure>
<p>编译成功以后，运行<code>sudo freeswitch</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.=============================================================.</span><br><span class="line">|   _____              ______        _____ _____ ____ _   _   |</span><br><span class="line">|  |  ___| __ ___  ___/ ___\ \      / /_ _|_   _/ ___| | | |  |</span><br><span class="line">|  | |_ | <span class="string">'__/ _ \/ _ \___ \\ \ /\ / / | |  | || |   | |_| |  |</span></span><br><span class="line"><span class="string">|  |  _|| | |  __/  __/___) |\ V  V /  | |  | || |___|  _  |  |</span></span><br><span class="line"><span class="string">|  |_|  |_|  \___|\___|____/  \_/\_/  |___| |_| \____|_| |_|  |</span></span><br><span class="line"><span class="string">|                                                             |</span></span><br><span class="line"><span class="string">.=============================================================.</span></span><br><span class="line"><span class="string">|   Anthony Minessale II, Michael Jerris, Brian West, Others  |</span></span><br><span class="line"><span class="string">|   FreeSWITCH (http://www.freeswitch.org)                    |</span></span><br><span class="line"><span class="string">|   Paypal Donations Appreciated: paypal@freeswitch.org       |</span></span><br><span class="line"><span class="string">|   Brought to you by ClueCon http://www.cluecon.com/         |</span></span><br><span class="line"><span class="string">.=============================================================.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.===============================================================.</span></span><br><span class="line"><span class="string">|       _                                                       |</span></span><br><span class="line"><span class="string">|   ___| |_   _  ___  ___ ___  _ __         ___ ___  _ __ ___   |</span></span><br><span class="line"><span class="string">|  / __| | | | |/ _ \/ __/ _ \| '</span>_ \       / __/ _ \| <span class="string">'_ ` _ \  |</span></span><br><span class="line"><span class="string">| | (__| | |_| |  __/ (_| (_) | | | |  _  | (_| (_) | | | | | | |</span></span><br><span class="line"><span class="string">|  \___|_|\__,_|\___|\___\___/|_| |_| (_)  \___\___/|_| |_| |_| |</span></span><br><span class="line"><span class="string">|                                                               |</span></span><br><span class="line"><span class="string">.===============================================================.</span></span><br><span class="line"><span class="string">/</span></span><br><span class="line"><span class="string">2019-05-09 17:15:32.605630 [INFO] switch_core.c:2436 </span></span><br><span class="line"><span class="string">FreeSWITCH Version 1.6.19~64bit ( 64bit)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FreeSWITCH Started</span></span><br><span class="line"><span class="string">Max Sessions [1000]</span></span><br><span class="line"><span class="string">Session Rate [30]</span></span><br><span class="line"><span class="string">SQL [Enabled]</span></span><br></pre></td></tr></table></figure>

<h3 id="报错及解决"><a href="#报错及解决" class="headerlink" title="报错及解决"></a>报错及解决</h3><p>注意：在安装了新的lib之类的修改以后要重新执行<code>./configure</code>。</p>
<h4 id="error1-fatal-error-lua-h"><a href="#error1-fatal-error-lua-h" class="headerlink" title="[error1]: fatal error: lua.h"></a>[error1]: fatal error: lua.h</h4><h4 id="solution1"><a href="#solution1" class="headerlink" title="[solution1]"></a>[solution1]</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /usr/include/lua5.2/*.h  ./src/mod/languages/mod_lua/</span><br><span class="line">sudo ln -s /usr/lib/x86_64-linux-gnu/liblua5.2.so /usr/lib/x86_64-linux-gnu/liblua.somake</span><br></pre></td></tr></table></figure>

<h4 id="error2-Makefile-930-You-must-install-libks-to-build-mod-signalwire"><a href="#error2-Makefile-930-You-must-install-libks-to-build-mod-signalwire" class="headerlink" title="[error2]: Makefile:930: *** You must install libks to build mod_signalwire."></a>[error2]: Makefile:930: *** You must install libks to build mod_signalwire.</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">making all mod_signalwire</span><br><span class="line">make[4]: Entering directory <span class="string">'/home/color/freeswitchls/src/freeswitch/src/mod/applications/mod_signalwire'</span></span><br><span class="line">Makefile:930: *** You must install libks to build mod_signalwire.  Stop.</span><br><span class="line">make[4]: Leaving directory <span class="string">'/home/color/freeswitch/src/freeswitch/src/mod/applications/mod_signalwire'</span></span><br><span class="line">Makefile:683: recipe <span class="keyword">for</span> target <span class="string">'mod_signalwire-all'</span> failed</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure>

<h4 id="solusion2"><a href="#solusion2" class="headerlink" title="[solusion2]"></a>[solusion2]</h4><p>安装 libks 和 signalwire</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># libks</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/signalwire/libks.git</span><br><span class="line"><span class="built_in">cd</span> libks</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/cmake .</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># signalwire</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/signalwire/signalwire-c.git</span><br><span class="line"><span class="built_in">cd</span> signalwire-c</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/cmake .</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">cp /usr/<span class="built_in">local</span>/lib/pkgconfig/*.pc /usr/lib/pkgconfig/</span><br><span class="line">cp -f /usr/<span class="built_in">local</span>/lib/* /usr/lib64/</span><br></pre></td></tr></table></figure>

<p>其中，安装libks时出现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Checking <span class="keyword">for</span> module <span class="string">'uuid'</span></span><br><span class="line">--   No package <span class="string">'uuid'</span> found</span><br></pre></td></tr></table></figure>

<p>需要再手动安装一下uuid</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install uuid-dev</span><br></pre></td></tr></table></figure>

<h4 id="error3-：安装mod-av的时候一直报错"><a href="#error3-：安装mod-av的时候一直报错" class="headerlink" title="[error3]：安装mod_av的时候一直报错"></a>[error3]：安装mod_av的时候一直报错</h4><p>很奇怪的是，这个报错不讲缺什么，讲的是函数接口deprecated，导致弄了挺久才发现要这么干。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mod_av.c: In <span class="keyword">function</span> ‘mod_av_shutdown’:</span><br><span class="line">mod_av.c:121:2: error: ‘av_lockmgr_register’ is deprecated [-Werror=deprecated-declarations]</span><br><span class="line">  av_lockmgr_register(NULL);</span><br><span class="line">  ^</span><br><span class="line">In file included from mod_av.c:34:0:</span><br><span class="line">/usr/include/x86_64-linux-gnu/libavcodec/avcodec.h:6103:5: note: declared here</span><br><span class="line"> int av_lockmgr_register(int (*cb)(void **mutex, enum AVLockOp op));</span><br><span class="line">     ^</span><br><span class="line">mod_av.c: In <span class="keyword">function</span> ‘mod_av_load’:</span><br><span class="line">mod_av.c:127:2: error: ‘av_lockmgr_register’ is deprecated [-Werror=deprecated-declarations]</span><br><span class="line">  av_lockmgr_register(&amp;mod_av_lockmgr_cb);</span><br><span class="line">  ^</span><br><span class="line">In file included from mod_av.c:34:0:</span><br><span class="line">/usr/include/x86_64-linux-gnu/libavcodec/avcodec.h:6103:5: note: declared here</span><br><span class="line"> int av_lockmgr_register(int (*cb)(void **mutex, enum AVLockOp op));</span><br><span class="line">     ^</span><br><span class="line">mod_av.c:131:2: error: ‘av_register_all’ is deprecated [-Werror=deprecated-declarations]</span><br><span class="line">  av_register_all();</span><br><span class="line">  ^</span><br><span class="line">In file included from mod_av.c:35:0:</span><br><span class="line">/usr/include/x86_64-linux-gnu/libavformat/avformat.h:2043:6: note: declared here</span><br><span class="line"> void av_register_all(void);</span><br><span class="line">      ^</span><br><span class="line">cc1: all warnings being treated as errors</span><br><span class="line">Makefile:681: recipe <span class="keyword">for</span> target <span class="string">'mod_av_la-mod_av.lo'</span> failed</span><br><span class="line">make[4]: *** [mod_av_la-mod_av.lo] Error 1</span><br><span class="line">make[4]: Leaving directory <span class="string">'/opt/freeswitch-1.6.19/src/mod/applications/mod_av'</span></span><br><span class="line">Makefile:667: recipe <span class="keyword">for</span> target <span class="string">'mod_av-all'</span> failed</span><br></pre></td></tr></table></figure>

<h4 id="solution3-需要安装libav"><a href="#solution3-需要安装libav" class="headerlink" title="[solution3]:需要安装libav"></a>[solution3]:需要安装libav</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install yasm libvpx. libx264. libx264-dev</span><br><span class="line"><span class="comment"># install libav</span></span><br><span class="line">git <span class="built_in">clone</span> https://freeswitch.org/stash/scm/sd/libav.git</span><br><span class="line"><span class="built_in">cd</span> libav</span><br><span class="line">./configure --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-gpl</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h4 id="error4-安装mod-shout缺包"><a href="#error4-安装mod-shout缺包" class="headerlink" title="[error4]: 安装mod_shout缺包"></a>[error4]: 安装mod_shout缺包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Makefile:932: *** You must install libshout3-dev to build mod_shout。 停止。</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libshout3-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Makefile:927: *** You must install libmpg123-dev to build mod_shout。 停止。</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libmpg123-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Makefile:922: *** You must install libmp3lame-dev to build mod_shout。 停止。</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libmp3lame-dev</span><br></pre></td></tr></table></figure>

<h4 id="error5-You-must-install-libilbc-dev-to-build-mod-ilbc"><a href="#error5-You-must-install-libilbc-dev-to-build-mod-ilbc" class="headerlink" title="[error5]: You must install libilbc-dev to build mod_ilbc"></a>[error5]: You must install libilbc-dev to build mod_ilbc</h4><h4 id="solution5"><a href="#solution5" class="headerlink" title="[solution5]"></a>[solution5]</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># install libilbc 因为apt包里没有libilbc-dev</span><br><span class="line">git clone https:&#x2F;&#x2F;freeswitch.org&#x2F;stash&#x2F;scm&#x2F;sd&#x2F;libilbc.git</span><br><span class="line">.&#x2F;bootstrap.sh</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make -j8</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta:~$ sudo freeswitch </span><br><span class="line">2019-05-13 13:55:15.895884 [INFO] switch_event.c:685 Activate Eventing Engine.</span><br><span class="line">......</span><br><span class="line">2019-05-13 13:55:36.037369 [CONSOLE] switch_core.c:2427 </span><br><span class="line">.=============================================================.</span><br><span class="line">|   _____              ______        _____ _____ ____ _   _   |</span><br><span class="line">|  |  ___| __ ___  ___/ ___\ \      / /_ _|_   _/ ___| | | |  |</span><br><span class="line">|  | |_ | <span class="string">'__/ _ \/ _ \___ \\ \ /\ / / | |  | || |   | |_| |  |</span></span><br><span class="line"><span class="string">|  |  _|| | |  __/  __/___) |\ V  V /  | |  | || |___|  _  |  |</span></span><br><span class="line"><span class="string">|  |_|  |_|  \___|\___|____/  \_/\_/  |___| |_| \____|_| |_|  |</span></span><br><span class="line"><span class="string">|                                                             |</span></span><br><span class="line"><span class="string">.=============================================================.</span></span><br><span class="line"><span class="string">|   Anthony Minessale II, Michael Jerris, Brian West, Others  |</span></span><br><span class="line"><span class="string">|   FreeSWITCH (http://www.freeswitch.org)                    |</span></span><br><span class="line"><span class="string">|   Paypal Donations Appreciated: paypal@freeswitch.org       |</span></span><br><span class="line"><span class="string">|   Brought to you by ClueCon http://www.cluecon.com/         |</span></span><br><span class="line"><span class="string">.=============================================================.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.===============================================================.</span></span><br><span class="line"><span class="string">|       _                                                       |</span></span><br><span class="line"><span class="string">|   ___| |_   _  ___  ___ ___  _ __         ___ ___  _ __ ___   |</span></span><br><span class="line"><span class="string">|  / __| | | | |/ _ \/ __/ _ \| '</span>_ \       / __/ _ \| <span class="string">'_ ` _ \  |</span></span><br><span class="line"><span class="string">| | (__| | |_| |  __/ (_| (_) | | | |  _  | (_| (_) | | | | | | |</span></span><br><span class="line"><span class="string">|  \___|_|\__,_|\___|\___\___/|_| |_| (_)  \___\___/|_| |_| |_| |</span></span><br><span class="line"><span class="string">|                                                               |</span></span><br><span class="line"><span class="string">.===============================================================.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2019-05-13 13:55:36.037382 [INFO] switch_core.c:2436 </span></span><br><span class="line"><span class="string">FreeSWITCH Version 1.6.19~64bit ( 64bit)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FreeSWITCH Started</span></span><br><span class="line"><span class="string">Max Sessions [1000]</span></span><br><span class="line"><span class="string">Session Rate [30]</span></span><br><span class="line"><span class="string">SQL [Enabled]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### freeswitch 默认号码说明</span><br></pre></td></tr></table></figure>
<p>9999 | 保持音乐<br>9996 | echo，回音测试<br>9992 | info，在控制台上显示呼叫参数<br>9888 | FreeSWITCH电话会议，每周召开<br>5900 | 呼叫挂起<br>5901 | 接听挂起的呼叫<br>5000 | 示例IVR<br>4000 | 听取语音信箱<br>33xx | 电话会议，48K(其中xx可为00-99，下同)<br>32xx | 电话会议，32K<br>31xx | 电话会议，16K<br>30xx | 电话会议，8K<br>2000-2002 | 呼叫组<br>1000-1019 | 默认分机号</p>
<p>```</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/Reasonss/article/details/81171288" target="_blank" rel="noopener">Ubuntu16.04从零开始freeSWITCH安装</a></li>
<li><a href="https://wsonh.com/article/22.html" target="_blank" rel="noopener">在ubuntu16.04部署配置安装freeswitch以及常见问题解决</a></li>
<li><a href="https://www.codetd.com/article/5754468" target="_blank" rel="noopener">Ubuntu 16.04 install FreeSWITCH v1.8</a></li>
<li><a href="https://blog.csdn.net/u011745859/article/details/82150814" target="_blank" rel="noopener">FreeSwitch 1.9.0支持H264的视频会议配置</a></li>
<li><a href="https://blog.csdn.net/Java_lilin/article/details/78121184" target="_blank" rel="noopener">ubuntu16.04 编译freeswitch1.9的视频mod_av模块</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>media</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>media</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 通过apt安装vapoursynth</title>
    <url>/2019/05/20/Ubuntu16-04-%E9%80%9A%E8%BF%87apt%E5%AE%89%E8%A3%85vapoursynth/</url>
    <content><![CDATA[<div class="note default">
            <p>Multimidia课的lab3“视频生产实例”要使用非线性编辑软件vapoursynth，助教给的是win下面的教程，就自己在ubuntu下面尝试了一下，因为有好用的预编译的包，所以整体比较简单。（相比之下前两个lab要求的软件编译的我头疼，and我上回不小心删掉了lab1的.md源码，暴哭了！）</p>
          </div>

<a id="more"></a>

<h2 id="Ubuntu16-04-install-vapoursynth-via-apt"><a href="#Ubuntu16-04-install-vapoursynth-via-apt" class="headerlink" title="Ubuntu16.04 install vapoursynth via apt"></a>Ubuntu16.04 install vapoursynth via apt</h2><p>vapour最新版是R45，通过apt安装的预编译版本是R43，如果有需要的话可以通过源码编译安装R45，有官方文档。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:djcj/hybrid</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 其实干脆vapoursynth全家都安装得了，因为基本都要用</span></span><br><span class="line">sudo apt-get install vapoursynth vapoursynth-editor</span><br><span class="line">sudo apt-get install vapoursynth-dev 				<span class="comment"># 因为上课需要自己编译几个插件所以安装</span></span><br><span class="line">sudo apt-get install vapoursynth-extra-plugins 		<span class="comment"># 需要用到这里的一些插件</span></span><br></pre></td></tr></table></figure>

<p>安装完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta:~$ sudo dpkg -l |grep vapour</span><br><span class="line">ii  libvapoursynth                              43-1~xenial                                  amd64        frameserver <span class="keyword">for</span> the 21st century</span><br><span class="line">ii  libvapoursynth-dev                          43-1~xenial                                  amd64        frameserver <span class="keyword">for</span> the 21st century - development files</span><br><span class="line">ii  libvapoursynth-script0                      43-1~xenial                                  amd64        frameserver <span class="keyword">for</span> the 21st century - VSScript runtime</span><br><span class="line">ii  vapoursynth                                 43-1~xenial                                  amd64        frameserver <span class="keyword">for</span> the 21st century</span><br><span class="line">ii  vapoursynth-editor                          16-2~xenial                                  amd64        editor <span class="keyword">for</span> VapourSynth scripts</span><br><span class="line">ii  vapoursynth-extra-plugins                   20180415-1~xenial                            amd64        Additional plugins <span class="keyword">for</span> VapourSynth</span><br><span class="line">ii  vapoursynth-python3                         43-1~xenial                                  amd64        frameserver <span class="keyword">for</span> the 21st century - Python 3 module</span><br><span class="line">ii  vapoursynth-viewer                          8+git18-1~xenial1                            amd64        modified version of the original Vapoursynth Editor</span><br><span class="line">ii  vapoursynth-waifu2x-models                  20160430-1~xenial                            all          model files <span class="keyword">for</span> the waifu2x VapourSynth plugin</span><br></pre></td></tr></table></figure>

<p>善用<code>sudo dpkg -L xxx</code>查看apt安装到的位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta:~$ sudo dpkg -L libvapoursynth-dev</span><br><span class="line">/usr/share/doc/libvapoursynth-dev/examples		<span class="comment"># example文件夹在这里</span></span><br><span class="line">/usr/share/doc/libvapoursynth-dev/examples/invert_example.c.gz</span><br><span class="line">/usr/share/doc/libvapoursynth-dev/examples/filter_skeleton.c</span><br><span class="line">/usr/share/doc/libvapoursynth-dev/examples/vsscript_example.c</span><br><span class="line"></span><br><span class="line">sparta:~$ sudo dpkg -L vapoursynth-extra-plugins</span><br><span class="line">/usr/lib/x86_64-linux-gnu/vapoursynth			<span class="comment"># 插件.so都在这里</span></span><br><span class="line">/usr/lib/x86_64-linux-gnu/vapoursynth/deblock.so</span><br><span class="line">...</span><br><span class="line">/usr/lib/python3/dist-packages/vsscripts		<span class="comment"># 插件.py的都在这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前的.so 与.py 插件</span></span><br><span class="line">sparta:vapoursynth$ <span class="built_in">cd</span> /usr/lib/python3/dist-packages/vsscripts				<span class="comment">#</span></span><br><span class="line">sparta:vsscripts$ ls</span><br><span class="line">adjust.py          knlm.py             nnedi3_rpow2.py  supersampledantialiasing.py</span><br><span class="line">dehalo_alpha.py    MaskDetail.py       psharpen.py      temporalsoften2.py</span><br><span class="line">edgecleaner.py     mcdegrainsharp.py   rangeutils.py    VAutoDeint.py</span><br><span class="line">fastlinedarken.py  MCDenoise.py        resamplehq.py    vshelpers.py</span><br><span class="line">finesharp.py       mpls.py             scoll.py         vsTAAmbk.py</span><br><span class="line">havsfunc.py        mvsfunc.py          sharpaamcmod.py</span><br><span class="line">hdr2sdr.py         nnedi3_resample.py  showdiff.py</span><br><span class="line">sparta:vapoursynth$ <span class="built_in">cd</span> /usr/lib/x86_64-linux-gnu/vapoursynth</span><br><span class="line">sparta:vapoursynth$ ls</span><br><span class="line">addgrain.so       eedi3.so           libocr.so          tc2cfr.so</span><br><span class="line">awarpsharp2.so    f3kdb.so           libremovegrain.so  tcanny.so</span><br><span class="line">bifrost.so        ffms2.so           libsubtext.so      tcomb.so</span><br><span class="line">bilateral.so      fft3dfilter.so     libvinverse.so     tdeintmod.so</span><br><span class="line">bm3d.so           fieldhint.so       libvivtc.so        templinearapproximate.so</span><br><span class="line">cnr2.so           fillborders.so     lsmashsource.so    temporalsoften2.so</span><br><span class="line">combmask.so       fluxsmooth.so      models             temporalsoften.so</span><br><span class="line">convo2d.so        fmtconv.so         msmoosh.so         tnlmeans.so</span><br><span class="line">ctmf.so           genericfilters.so  mvtools.so         ttempsmooth.so</span><br><span class="line">d2vscan.pl        histogram.so       nnedi3.so          vaguedenoiser.so</span><br><span class="line">d2vsource.so      hqdn3d.so          rawsource.so       vautodeint.so</span><br><span class="line">damb.so           imagereader.so     readmpls.so        videoscope.so</span><br><span class="line">dctfilter.so      it.so              reduceflicker.so   w3fdif.so</span><br><span class="line">deblock.so        knlmeanscl.so      retinex.so         waifu2x-opt.so</span><br><span class="line">degrainmedian.so  libeedi3.so        sangnommod.so      waifu2x-w2xc.so</span><br><span class="line">delogo.so         libimwri.so        scenechange.so     wwxd.so</span><br><span class="line">depan.so          libinvert.so       scrawl.so          yadifmod.so</span><br><span class="line">dfttest.so        libmiscfilters.so  scxvid.so</span><br><span class="line">eedi2.so          libmorpho.so       ssiq.so</span><br></pre></td></tr></table></figure>

<h3 id="插件编写编译"><a href="#插件编写编译" class="headerlink" title="插件编写编译"></a>插件编写编译</h3><p>vapoursynth有给出example，可以按照那个来添加插件与接口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先cd到vapoursynth的examples的路径</span></span><br><span class="line">spartazhc:~$ <span class="built_in">cd</span> /usr/share/doc/libvapoursynth-dev/examples	</span><br><span class="line">sparta:examples$ ll</span><br><span class="line">总用量 20</span><br><span class="line">drwxr-xr-x 2 root root 4096 5月  19 21:00 ./</span><br><span class="line">drwxr-xr-x 3 root root 4096 5月  19 21:00 ../</span><br><span class="line">-rw-r--r-- 1 root root 2004 2月   1  2018 filter_skeleton.c</span><br><span class="line">-rw-r--r-- 1 root root 3452 2月   1  2018 invert_example.c.gz</span><br><span class="line">-rw-r--r-- 1 root root 3607 2月   1  2018 vsscript_example.c</span><br><span class="line"><span class="comment"># 需要gzip解压invert_example.c.gz </span></span><br><span class="line">sparta:examples$ sudo gzip -d invert_example.c.gz </span><br><span class="line">sparta:examples$ ll</span><br><span class="line">总用量 28</span><br><span class="line">drwxr-xr-x 2 root root 4096 5月  19 21:16 ./</span><br><span class="line">drwxr-xr-x 3 root root 4096 5月  19 21:00 ../</span><br><span class="line">-rw-r--r-- 1 root root 2004 2月   1  2018 filter_skeleton.c</span><br><span class="line">-rw-r--r-- 1 root root 8724 2月   1  2018 invert_example.c</span><br><span class="line">-rw-r--r-- 1 root root 3607 2月   1  2018 vsscript_example.c</span><br><span class="line">sparta:examples$ sudo vim invert_example.c</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用gcc编译invert的动态链接</span></span><br><span class="line">sparta:examples$ sudo gcc -shared -fPIC -O2 invert_example.c -o libinvert.so</span><br><span class="line"><span class="comment"># cp到vapoursynth的.so库里面，当然也可以直接编译的时候把路径指定为这个</span></span><br><span class="line">sparta:examples$ sudo cp libinvert.so /usr/lib/x86_64-linux-gnu/vapoursynth/</span><br></pre></td></tr></table></figure>

<h3 id="invert插件使用"><a href="#invert插件使用" class="headerlink" title="invert插件使用"></a>invert插件使用</h3><p>修改<em>.vpy</em>文件使用插件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line">core = vs.get_core()</span><br><span class="line"></span><br><span class="line">clip = core.ffms2.Source(source = <span class="string">'input.m2ts'</span>)</span><br><span class="line"><span class="comment">#clip = core.std.Transpose(clip)</span></span><br><span class="line">clip = core.invert.Filter(clip)				<span class="comment"># 使用invert filter</span></span><br><span class="line"></span><br><span class="line">clip.set_output()</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>media</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>media</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 通过docker使用caffe</title>
    <url>/2019/05/14/Ubuntu16-04-%E9%80%9A%E8%BF%87docker%E4%BD%BF%E7%94%A8caffe/</url>
    <content><![CDATA[<div class="note default">
            <p>实验室给的一个小任务要训练一个caffe模型，但是询问以后发现实验室服务器上居然没有安装caffe（caffe真的这么少人用吗？！），于是需要在学长的电脑上配置caffe环境，但可能这位学长平时不太整机子，上面的环境有点乱，配置了一下午多也没配好，后来干脆用docker了，docker配置真的很方便！因为nvidia-docker已经被废弃，所以使用的是nvidia-docker2。(正常安装可以看之前的<a href="/2019/05/13/Ubuntu16-04-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85caffe/" title="Ubuntu16-04-编译安装caffe">Ubuntu16-04-编译安装caffe</a>)</p>
          </div>

<a id="more"></a>

<div class="note warning">
            <p>这里忽略了nvidia驱动的安装。</p>
          </div>

<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"><span class="comment"># Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="安装nvidia-docker2"><a href="#安装nvidia-docker2" class="headerlink" title="安装nvidia-docker2"></a>安装nvidia-docker2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理以前的。If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">sudo docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo apt-get purge -y nvidia-docker</span><br><span class="line">sudo apt autoremove</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行命令。Add the package repositories</span></span><br><span class="line"><span class="comment"># command 1</span></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \</span><br><span class="line">  sudo apt-key add -</span><br><span class="line"> </span><br><span class="line"><span class="comment"># command 2</span></span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># command 3</span></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 正式安装。Install nvidia-docker2 and reload the Docker daemon configuration</span></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试一下。 Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line">sudo docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure>

<p>如果正常出现nvidia-smi则安装成功</p>
<h3 id="docker-image"><a href="#docker-image" class="headerlink" title="docker image"></a>docker image</h3><h4 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -ti bvlc/caffe:cpu caffe --version</span><br></pre></td></tr></table></figure>

<h4 id="更多选项"><a href="#更多选项" class="headerlink" title="更多选项"></a>更多选项</h4><p>user (-u), current directory, and volumes (-w and -v)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --rm -u $(id -u):$(id -g) -v $(<span class="built_in">pwd</span>):$(<span class="built_in">pwd</span>) -w $(<span class="built_in">pwd</span>) bvlc/caffe:cpu caffe train --solver=example_solver.prototxt</span><br></pre></td></tr></table></figure>

<h4 id="bash-ipython"><a href="#bash-ipython" class="headerlink" title="bash / ipython"></a>bash / ipython</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run-ti bvlc/caffe:cpu ipython</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://github.com/BVLC/caffe/tree/master/docker" target="_blank" rel="noopener">caffe official</a></p>
</li>
<li><p><a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">nvidia-docker quickstart</a></p>
</li>
<li><p><a href="https://blog.csdn.net/quantum7/article/details/86416600" target="_blank" rel="noopener">ubuntu安装Nvidia-docker2详细步骤</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04安装后要做几件事</title>
    <url>/2019/07/08/Ubuntu16-04%E5%AE%89%E8%A3%85%E5%90%8E%E8%A6%81%E5%81%9A%E5%87%A0%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<div class="note default">
            <p>写于实习期间装系统后配置环境的时候，迅速弃坑！（有空想到了慢慢补吧）</p>
          </div>

<a id="more"></a>

<h3 id="从这里开始"><a href="#从这里开始" class="headerlink" title="从这里开始"></a>从这里开始</h3><ul>
<li>配置代理：<ul>
<li>系统代理</li>
<li>http / https代理</li>
<li>apt代理</li>
<li>git代理 </li>
</ul>
</li>
<li>安装vim</li>
<li>修改<code>/etc/sudoers</code>，<code>sudo</code>免密码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意这句话的位置，曾经碰到过因为位置问题修改无效的情况</span></span><br><span class="line">sparta  ALL=(ALL:ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>

<div class="note dangner">
            <p>千万别改错了<code>/etc/sudoers</code>文件！别给自己惹麻烦！</p>
          </div>

<h3 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h3><ul>
<li>vim</li>
<li>chrome</li>
<li>vscode</li>
</ul>
<div class="note default">
            <p>这里可以通过github管理你的配置文件，这样新系统下可以很快回到你熟悉的配置。</p>
          </div>

<h3 id="基本美化"><a href="#基本美化" class="headerlink" title="基本美化"></a>基本美化</h3><ul>
<li><code>unity-tweak-tools</code></li>
<li><em>caffeine</em> 桌面插件对工作非常有帮助！</li>
<li>安装numix主题</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Update hexo-theme-next to latest version(v7.8.0)</title>
    <url>/2020/06/03/Update-hexo-theme-next-to-latest-version-v7-8-0/</url>
    <content><![CDATA[<div class="note default">
            <p>今年寒假在家的时候主力系统从Ubuntu转向了Manjaro，之后就没写过博客，一方面是因为在做毕设之类的，确实没什么产出，另一方面是hexo的环境在Ubuntu上，懒得配过来，这次趁着心血来潮重新配了一下。把hexo和next都更新了，因为next主题有比较大的更新，所以在此记一笔。</p>
          </div>

<a id="more"></a>

<p>从Next v5.1.4更新到最新的 v7.8.0。从v5.1.x到最新版应该是有比较大的改动，因为官方github的readme里写了：</p>
<blockquote>
<p><strong>If you want to update from v5.1.x to the latest version, read <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">this</a>.</strong></p>
</blockquote>
<p>这次重新配置有了一些新的理解：</p>
<ol>
<li>hexo+next的目录结构</li>
<li>hexo+next的配置结构</li>
<li>如何去customize</li>
</ol>
<h3 id="重新配置的步骤"><a href="#重新配置的步骤" class="headerlink" title="重新配置的步骤"></a>重新配置的步骤</h3><ol>
<li>安装<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a></li>
<li>下载<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a></li>
<li>补充几个hexo的plugin</li>
<li>把之前博客的Source目录拷贝过来</li>
<li>配置hexo、next，hexo的配置基本可以迁移，但是因为我之前配置next的方法不是很规范，所以这次算是重新配置的</li>
</ol>
<h3 id="拷贝之前的Post的问题"><a href="#拷贝之前的Post的问题" class="headerlink" title="拷贝之前的Post的问题"></a>拷贝之前的Post的问题</h3><p>这里有一个问题，直接拷贝之前的post，会改变文件的修改日期，会导致<strong>“修改于”</strong>的时间显示异常，解决这个问题就是让<a href="https://askubuntu.com/questions/1040885/copy-file-and-keep-same-timestamp-of-original-file" target="_blank" rel="noopener">拷贝的时候保留原始的timestamp attribute</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># using the -p or --preserve= option</span></span><br><span class="line">$ cp -p oldfile newfile</span><br><span class="line"><span class="comment"># disable interaction mode (default cp will be alias as "cp -i" in bash/zsh)</span></span><br><span class="line">$ \cp -p oldfile newfile</span><br></pre></td></tr></table></figure>

<p>控制修改于这个时间显示的配置在hexo和next的配置文件里都有：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.yml</span></span><br><span class="line"><span class="comment">## Use post's date for updated date unless set in front-matter</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">true</span> </span><br><span class="line"><span class="comment"># next/_config.yml</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span>                                                           </span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>但是！当我解决完文件修改时间问题以后，我的“修改于”标签不显示了！我也不知道是什么BUG，明明设置里都开启了，尝试了<code>hexo clean &amp;&amp; hexo g</code>，也没用。</p>
<p>太令人沮丧了，下次再看这个问题。</p>
<h3 id="字体配置"><a href="#字体配置" class="headerlink" title="字体配置"></a>字体配置</h3><p>我对博客的字体配置需求主要是让我能用上思源宋体，下面两个链接讨论了next字体配置，基本上结合二者看就能看明白，但是我还是详细再讲一遍，查漏补缺一下。</p>
<ul>
<li><a href="https://leay.net/2020/02/14/hexo-next-font/" target="_blank" rel="noopener">Hexo Next 主题字体相关配置</a></li>
<li><a href="https://theme-next.js.org/docs/theme-settings/#Fonts-Customization" target="_blank" rel="noopener">Next Doc: Theme Setting</a></li>
</ul>
<p>单独开了一篇，<a href="/2020/06/03/Next%E4%B8%BB%E9%A2%98%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/" title="Next主题字体配置">Next主题字体配置</a></p>
<h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>以前都是<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>然后看<code>localhost:4000</code>，后来发现<code>hexo s</code>的时候，对配置的改动会即时生效，最多刷新页面即可，这就方便很多了。</p>
<p>更重要的是学会运用Chrome的F12 Debug，在debug窗口的左上角有一个<code>Select an element in the page to inspect it</code>的按钮，用这个工具点击页面中的元素会返回元素的内容以及应用到的Styles。用这个工具一方面可以查到对应元素的CSS格式定义（你自己的以及别人博客里面看中的样式），可以方便debug，另一方面甚至可以直接修改对应的CSS文件，调试出自己想要的样式。</p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>挖一下坑，这两天翻别人博客的时候看到有意思的东西以及想配置一下的功能：</p>
<ul>
<li>博客使用图片的问题，之前用的<code>hexo-asset-image</code>应该是不更新了，看看换一个现在流行的。</li>
<li>尝试一下cdn？</li>
<li>我的baidu sitemap似乎有问题。</li>
<li>看一下评论系统。</li>
<li>telegram+？</li>
<li>使用CI</li>
<li><a href="https://io-oi.me/tech/continuous-writing-with-github-issues/" target="_blank" rel="noopener">github issue?</a></li>
</ul>
<p>不得不赞美一下，next主题进步了好多！</p>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>VPP-startup</title>
    <url>/2019/09/19/VPP-startup/</url>
    <content><![CDATA[<div class="note default">
            <p>实习在intel NCLG package process，menter这边主要是做fdio项目里面的，VPP多少涉及一些，前几天想跑一下sweetcomb，终于整了一次VPP。</p>
          </div>

<a id="more"></a>

<h3 id="startup"><a href="#startup" class="headerlink" title="startup"></a>startup</h3><ul>
<li>配置文件在 <code>/etc/vpp/startup.conf</code>，但是也可以用<code>vpp -c xxx.conf</code>开另外的配置文件跑。</li>
<li>vpp 可以使用<code>systemctl</code>或者<code>service</code>来启动与控制s</li>
</ul>
<h4 id="vppctl基本使用"><a href="#vppctl基本使用" class="headerlink" title="vppctl基本使用"></a>vppctl基本使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vpp<span class="comment"># show interface </span></span><br><span class="line">              Name               Idx    State  MTU (L3/IP4/IP6/MPLS)     Counter          Count     </span><br><span class="line">FortyGigabitEthernet81/0/0        2     down         9000/0/0/0     </span><br><span class="line">FortyGigabitEthernet81/0/1        3     down         9000/0/0/0     </span><br><span class="line">TenGigabitEthernet3d/0/0          1     down         9000/0/0/0     </span><br><span class="line">local0                            0     down          0/0/0/0 </span><br><span class="line">vpp<span class="comment"># show pci</span></span><br><span class="line">Address      Sock VID:PID     Link Speed   Driver          Product Name                    Vital Product Data</span><br><span class="line">0000:3d:00.0   0  8086:37d2   2.5 GT/s x1  vfio-pci        Example VPD                     RV: 0x d7</span><br><span class="line">0000:3d:00.1   0  8086:37d2   2.5 GT/s x1  i40e            Example VPD                     RV: 0x d7</span><br><span class="line">0000:81:00.0   1  8086:1583   8.0 GT/s x4  vfio-pci        XL710 40GbE Controller          RV: 0x 86</span><br><span class="line">0000:81:00.1   1  8086:1583   8.0 GT/s x4  vfio-pci        XL710 40GbE Controller          RV: 0x 86</span><br><span class="line">vpp<span class="comment"># show interface address</span></span><br><span class="line">vpp<span class="comment"># show hardware</span></span><br></pre></td></tr></table></figure>

<h4 id="如何绑定网卡"><a href="#如何绑定网卡" class="headerlink" title="如何绑定网卡"></a>如何绑定网卡</h4><ul>
<li><p>其实绑定网卡是dpdk的工作，可以参考<a href="https://dpdk-guide.gitlab.io/dpdk-guide/setup/binding.html" target="_blank" rel="noopener">Binding NIC drivers</a> </p>
<ul>
<li><code>vpp/extras/vpp_config/script/dpdk-devbind.py</code>可以用于网卡绑定</li>
</ul>
</li>
<li><p>首先要启用<strong>vfio</strong></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo modprobe vfio</span><br><span class="line">sudo modprobe vfio_pci		<span class="comment"># vfio_pci是肯定要用的，但是不确定启用了vfio会不会自动开vfio_pci</span></span><br><span class="line">sudo lsmod | grep vfio</span><br><span class="line">vfio_pci               49152  3</span><br><span class="line">vfio_virqfd            16384  1 vfio_pci</span><br><span class="line">vfio_iommu_type1       28672  0</span><br><span class="line">vfio                   32768  10 vfio_iommu_type1,vfio_pci</span><br><span class="line">irqbypass              16384  5 vfio_pci,kvm</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用<code>ifconfig</code>配置网卡，这里的逻辑是：<ul>
<li>VPP启动的时候会查询没有被使用的网卡并且纳入管理</li>
<li>用<code>ifconfig eth-name down</code>命令关闭内核对网卡的驱动</li>
<li>重启vpp，在vpp里面就可以看到网卡了</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16-04从源码编译安装Nginx</title>
    <url>/2019/04/28/Ubuntu16-04%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/</url>
    <content><![CDATA[<div class="note default">
            <p>之前是通过apt安装的nginx1.14.2，方便好用，但是因为作业ppt中展示了rtmp stat.xsl文件的数据统计功能，我在本机<code>sudo find / &#39;stat.xsl&#39;</code>没有找到这个文件，因此才决定重新编译安装nginx。（事实上，当我安装完之后我才意识到官方事例的意思是这个stat.xsl文件放在什么地方都可以，也就是说只要去github或者哪里随便下载一下这个文件就可以了，我完全是没事找事！！！）</p><p>anyway，从源码编译安装nginx的过程如下：</p>
          </div>

<a id="more"></a>

<h3 id="创建nginx用户组以及用户"><a href="#创建nginx用户组以及用户" class="headerlink" title="创建nginx用户组以及用户"></a>创建nginx用户组以及用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd -r nginx</span><br><span class="line">sudo useradd -r -g nginx -s /bin/<span class="literal">false</span> -d /usr/<span class="built_in">local</span>/nginx -M nginx</span><br></pre></td></tr></table></figure>
<h3 id="编译依赖"><a href="#编译依赖" class="headerlink" title="编译依赖"></a>编译依赖</h3><p>requirements:</p>
<ul>
<li><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL</a> library version between 1.0.2 - 1.1.0</li>
<li><a href="https://www.zlib.net/" target="_blank" rel="noopener">Zlib</a> library version between 1.1.3 - 1.2.11</li>
<li><a href="http://www.pcre.org/" target="_blank" rel="noopener">PCRE</a> library version between 4.4 - 8.40</li>
<li><a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC</a> Compiler</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PCRE version 4.4 - 8.42</span></span><br><span class="line">wget https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gz &amp;&amp; tar xzvf pcre-8.42.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib version 1.1.3 - 1.2.11</span></span><br><span class="line">wget http://www.zlib.net/zlib-1.2.11.tar.gz &amp;&amp; tar xzvf zlib-1.2.11.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenSSL version 1.0.2 - 1.1.1</span></span><br><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1b.tar.gz &amp;&amp; tar xzvf openssl-1.1.1b.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># latest nginx</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.16.0.tar.gz &amp;&amp; tar zxvf nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/share/nginx \</span><br><span class="line">            --sbin-path=/usr/sbin/nginx \</span><br><span class="line">            --modules-path=/usr/lib/nginx/modules \</span><br><span class="line">            --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">            --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</span><br><span class="line">            --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">            --pid-path=/run/nginx.pid \</span><br><span class="line">            --lock-path=/var/lock/nginx.lock \</span><br><span class="line">            --user=nginx \</span><br><span class="line">            --group=nginx \</span><br><span class="line">            --build=Ubuntu \</span><br><span class="line">            --http-client-body-temp-path=/var/lib/nginx/body \</span><br><span class="line">            --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \</span><br><span class="line">            --http-proxy-temp-path=/var/lib/nginx/proxy \</span><br><span class="line">            --http-scgi-temp-path=/var/lib/nginx/scgi \</span><br><span class="line">            --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \</span><br><span class="line">            --with-openssl=../openssl-1.1.1b \</span><br><span class="line">            --with-openssl-opt=<span class="built_in">enable</span>-ec_nistp_64_gcc_128 \</span><br><span class="line">            --with-openssl-opt=no-nextprotoneg \</span><br><span class="line">            --with-openssl-opt=no-weak-ssl-ciphers \</span><br><span class="line">            --with-openssl-opt=no-ssl3 \</span><br><span class="line">            --with-pcre=../pcre-8.42 \</span><br><span class="line">            --with-pcre-jit \</span><br><span class="line">            --with-zlib=../zlib-1.2.11 \</span><br><span class="line">            --with-compat \</span><br><span class="line">            --with-file-aio \</span><br><span class="line">            --with-threads \</span><br><span class="line">            --with-http_addition_module \</span><br><span class="line">            --with-http_auth_request_module \</span><br><span class="line">            --with-http_dav_module \</span><br><span class="line">            --with-http_flv_module \</span><br><span class="line">            --with-http_gunzip_module \</span><br><span class="line">            --with-http_gzip_static_module \</span><br><span class="line">            --with-http_mp4_module \</span><br><span class="line">            --with-http_random_index_module \</span><br><span class="line">            --with-http_realip_module \</span><br><span class="line">            --with-http_slice_module \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-http_sub_module \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --with-http_secure_link_module \</span><br><span class="line">            --with-mail \</span><br><span class="line">            --with-mail_ssl_module \</span><br><span class="line">            --with-stream \</span><br><span class="line">            --with-stream_realip_module \</span><br><span class="line">            --with-stream_ssl_module \</span><br><span class="line">            --with-stream_ssl_preread_module \</span><br><span class="line">            --with-debug \</span><br><span class="line">            --with-cc-opt=<span class="string">'-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> \</span><br><span class="line">            --add-module=../nginx-rtmp-module </span><br><span class="line">make </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>这里如果加上一条配置<code>--with-ld-opt=&#39;-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now&#39;</code>会出现一个error，尝试了好几次并不能解决，Google也搜索不到这个错误，于是把这行删掉了，编译可以通过。</p>
<h3 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -v &amp;&amp; sudo nginx -V</span><br><span class="line"><span class="comment"># return as following</span></span><br><span class="line">nginx version: nginx/1.16.0 (Ubuntu)</span><br><span class="line">built by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11) </span><br><span class="line">built with OpenSSL 1.1.1b  26 Feb 2019</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/run/nginx.pid --lock-path=/var/lock/nginx.lock --user=nginx --group=nginx --build=Ubuntu --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-openssl=../openssl-1.1.1b --with-openssl-opt=<span class="built_in">enable</span>-ec_nistp_64_gcc_128 --with-openssl-opt=no-nextprotoneg --with-openssl-opt=no-weak-ssl-ciphers --with-openssl-opt=no-ssl3 --with-pcre=../pcre-8.42 --with-pcre-jit --with-zlib=../zlib-1.2.11 --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_slice_module --with-http_ssl_module --with-http_sub_module --with-http_stub_status_module --with-http_v2_module --with-http_secure_link_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-debug --with-cc-opt=<span class="string">'-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> --add-module=../nginx-rtmp-module</span><br></pre></td></tr></table></figure>

<p>还需要下一步处理一个报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br><span class="line"><span class="comment"># Will throw this error nginx: [emerg] mkdir() "/var/lib/nginx/body" failed (2: No such file or directory)</span></span><br><span class="line"><span class="comment"># Just create directory</span></span><br><span class="line">sudo mkdir -p /var/lib/nginx &amp;&amp; sudo nginx -t</span><br></pre></td></tr></table></figure>

<h3 id="添加service"><a href="#添加service" class="headerlink" title="添加service"></a>添加service</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>

<p>把下面这段复制粘贴进去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=A high performance web server and a reverse proxy server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t -q -g <span class="string">'daemon on; master_process on;'</span></span><br><span class="line">ExecStart=/usr/sbin/nginx -g <span class="string">'daemon on; master_process on;'</span></span><br><span class="line">ExecReload=/usr/sbin/nginx -g <span class="string">'daemon on; master_process on;'</span> -s reload</span><br><span class="line">ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=mixed</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="检查service状态"><a href="#检查service状态" class="headerlink" title="检查service状态"></a>检查service状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure>

<p>但是这里我做完之后报错没有nginx.service文件，纳闷了半天，然后其实<strong>重启就好了！</strong></p>
<p>至此，nginx就编译安装好了，可以：</p>
<ul>
<li>访问localhost查看</li>
<li><code>sudo vim /etc/nginx/nginx.conf</code>xiugai 配置文件</li>
<li><code>sudo nginx -t</code>检查配置文件合法性</li>
<li><code>sudo nginx -s reload</code>在不重启服务的情况下reload配置</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.vultr.com/docs/how-to-compile-nginx-from-source-on-ubuntu-16-04" target="_blank" rel="noopener">How to Compile Nginx From Source on Ubuntu 16.04</a></p>
<p><a href="http://nginx.org/en/docs/configure.html" target="_blank" rel="noopener">Building nginx from Sources</a></p>
<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>media</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Netopeer2</title>
    <url>/2019/09/19/Netopeer2/</url>
    <content><![CDATA[<div class="note default">
            <p>这篇相对<a href="/2019/09/19/clixon-backend-restconf/" title="clixon_backend_restconf">clixon_backend_restconf</a>更乱一些，内容从开头的Netopeer2代码阅读到后续的RESTCONF实现细节，差别很大。这篇的有效内容更多，原因是我实现的RESTCONF server和Netopeer2-server用的东西更接近。</p><p>同样的，后续可能会把和RESTCONF实现相关的部分再抽离出来。</p>
          </div>

<a id="more"></a>

<h3 id="libyang-数据结构"><a href="#libyang-数据结构" class="headerlink" title="libyang 数据结构"></a>libyang 数据结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Generic structure for a data node, directly applicable to the data nodes defined as #LYS_CONTAINER, #LYS_LIST</span></span><br><span class="line"><span class="comment"> * and #LYS_CHOICE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Completely fits to containers and choices and is compatible (can be used interchangeably except the #child member)</span></span><br><span class="line"><span class="comment"> * with all other lyd_node_* structures. All data nodes are provides as ::lyd_node structure by default.</span></span><br><span class="line"><span class="comment"> * According to the schema's ::lys_node#nodetype member, the specific object is supposed to be cast to</span></span><br><span class="line"><span class="comment"> * ::lyd_node_leaf_list or ::lyd_node_anydata structures. This structure fits only to #LYS_CONTAINER, #LYS_LIST and</span></span><br><span class="line"><span class="comment"> * #LYS_CHOICE values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * To traverse all the child elements or attributes, use #LY_TREE_FOR or #LY_TREE_FOR_SAFE macro. To traverse</span></span><br><span class="line"><span class="comment"> * the whole subtree, use #LY_TREE_DFS_BEGIN macro.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lyd_node</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_node</span> *<span class="title">schema</span>;</span>         <span class="comment">/**&lt; pointer to the schema definition of this node */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> validity;                <span class="comment">/**&lt; [validity flags](@ref validityflags) */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> dflt:<span class="number">1</span>;                  <span class="comment">/**&lt; flag for implicit default node */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> when_status:<span class="number">3</span>;           <span class="comment">/**&lt; bit for checking if the when-stmt condition is</span></span><br><span class="line"><span class="comment">    									  resolved - internal use only,</span></span><br><span class="line"><span class="comment">                                          do not use this value! */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyd_attr</span> *<span class="title">attr</span>;</span>          <span class="comment">/**&lt; pointer to the list of attributes of this node */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyd_node</span> *<span class="title">next</span>;</span> 			<span class="comment">/**&lt; pointer to the next sibling node </span></span><br><span class="line"><span class="comment">    									(NULL if there is no one) */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyd_node</span> *<span class="title">prev</span>;</span>           </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyd_node</span> *<span class="title">parent</span>;</span> <span class="comment">/**&lt; pointer to the parent node, NULL in case of root node */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">lyd_node</span> *<span class="title">child</span>;</span>          </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>libyang、libnetconf2</li>
<li>sysrepo 依赖 libyang</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main里的流程 server-init()</span></span><br><span class="line"><span class="comment">/* connect to the sysrepo */</span></span><br><span class="line">rc = sr_connect(<span class="string">"netopeer2"</span>, SR_CONN_DAEMON_REQUIRED | SR_CONN_DAEMON_START, &amp;np2srv.sr_conn);</span><br><span class="line"><span class="comment">/* server session */</span></span><br><span class="line">np2srv.sr_sess.ds = SR_DS_STARTUP;</span><br><span class="line">np2srv.sr_sess.opts = SR_SESS_DEFAULT;</span><br><span class="line">rc = sr_session_start(np2srv.sr_conn, np2srv.sr_sess.ds, np2srv.sr_sess.opts, &amp;np2srv.sr_sess.srs);</span><br><span class="line"><span class="comment">/* init libyang context with schemas */</span>--libyang TODO</span><br><span class="line">np2srv_init_schemas()</span><br><span class="line"><span class="comment">/* init libnetconf2 */</span></span><br><span class="line">nc_server_init(np2srv.ly_ctx)</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* set NETCONF operations callbacks */</span></span><br><span class="line">snode = ly_ctx_get_node(np2srv.ly_ctx, <span class="literal">NULL</span>, <span class="string">"/ietf-netconf:get-config"</span>, <span class="number">0</span>);</span><br><span class="line">nc_set_rpc_callback(snode, op_get);</span><br><span class="line"></span><br><span class="line">snode = ly_ctx_get_node(np2srv.ly_ctx, <span class="literal">NULL</span>, <span class="string">"/ietf-netconf:edit-config"</span>, <span class="number">0</span>);</span><br><span class="line">nc_set_rpc_callback(snode, op_editconfig);</span><br></pre></td></tr></table></figure>

<ul>
<li>经常用到<code>np2srv_sr_session_refresh(srs, NULL);</code>注意理解</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 举例 去netopeer2/server/op_get_config.c 搜索sr_ 可以看所有和sysrepo相关的函数</span></span><br><span class="line"><span class="comment">// np2srv_ : netopeer2 to sysrepo v???</span></span><br><span class="line"><span class="comment">// op_sr2ly_ : operation sysrepo to libyang</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nc_server_reply</span> *</span></span><br><span class="line"><span class="class"><span class="title">op_get</span>(<span class="title">struct</span> <span class="title">lyd_node</span> *<span class="title">rpc</span>, <span class="title">struct</span> <span class="title">nc_session</span> *<span class="title">ncs</span>)</span></span><br><span class="line"><span class="class">    // 先是一堆看不懂的<span class="title">libyang</span>、<span class="title">libnetconf2</span>有关的操作（主要就是这一些）</span></span><br><span class="line"><span class="class">    // 以及一些<span class="title">ds</span>的<span class="title">update</span>什么的</span></span><br><span class="line"><span class="class">    // <span class="title">filters</span></span></span><br><span class="line"><span class="class">    // 能知道开始用<span class="title">sysrepo</span>的接口的是这一句：</span></span><br><span class="line"><span class="class">    /*</span></span><br><span class="line"><span class="class">     * <span class="title">create</span> <span class="title">the</span> <span class="title">data</span> <span class="title">tree</span> <span class="title">for</span> <span class="title">the</span> <span class="title">data</span> <span class="title">reply</span></span></span><br><span class="line"><span class="class">     */</span></span><br><span class="line"><span class="class">    <span class="title">for</span> (<span class="title">i</span> = 0;</span> (<span class="keyword">signed</span>)i &lt; filter_count; i++) &#123;</span><br><span class="line">        <span class="comment">/* create the subtree */</span></span><br><span class="line">        <span class="keyword">if</span> (op_sr2ly_subtree(sessions-&gt;srs, &amp;root, filters[i], &amp;ereply)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//后面又是libyang和libnetconf2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接上，</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">op_sr2ly_subtree(<span class="keyword">sr_session_ctx_t</span> *srs, struct lyd_node **root, <span class="keyword">const</span> <span class="keyword">char</span> *subtree_xpath, struct nc_server_reply **ereply)</span><br><span class="line">    <span class="comment">// 涉及sysrepo的都上np2srv_sr_*的函数，这些函数在netopeer2/server/operations.c文件中重新封装，这个文件有3000+行</span></span><br><span class="line">	rc = np2srv_sr_get_items_iter(srs, full_subtree_xpath, &amp;sriter, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">while</span> ((!np2srv_sr_get_item_next(srs, sriter, &amp;value, <span class="literal">NULL</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (op_sr2ly(*root, value, &amp;node, &amp;cache)) &#123;</span><br><span class="line">            sr_free_val(value);</span><br><span class="line">            sr_free_val_iter(sriter);</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(*root)) &#123;</span><br><span class="line">            *root = node;</span><br><span class="line">        &#125;</span><br><span class="line">        sr_free_val(value);</span><br><span class="line">    &#125;</span><br><span class="line">    sr_free_val_iter(sriter);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 去netopeer2/server/operations.c 搜索sr_get_item</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">np2srv_sr_get_item</span><span class="params">(<span class="keyword">sr_session_ctx_t</span> *srs, <span class="keyword">const</span> <span class="keyword">char</span> *xpath, </span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">sr_val_t</span> **value, struct nc_server_reply **ereply)</span></span></span><br><span class="line"><span class="function">    <span class="title">pthread_rwlock_rdlock</span><span class="params">(&amp;sr_lock)</span></span>; <span class="comment">// sr_lock</span></span><br><span class="line">    <span class="keyword">if</span> (!np2srv.disconnected) &#123;</span><br><span class="line">        rc = sr_get_item(srs, xpath, value);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 后面是一些错误处理</span></span><br><span class="line">	pthread_rwlock_unlock(&amp;sr_lock);</span><br></pre></td></tr></table></figure>

<h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><ul>
<li><p>np2srv_init_schemas(void)</p>
</li>
<li><p>从sysrepo里面获取yang的schema</p>
</li>
<li><p>build libyang context</p>
</li>
<li><p><em>use modules from sysrepo</em></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Structure that contains information about a module installed in sysrepo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sr_schema_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Memory context used internally by Sysrepo for efficient storage</span></span><br><span class="line"><span class="comment">     * and conversion of this structure.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">sr_mem_ctx_t</span> *_sr_mem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *module_name;         <span class="comment">/**&lt; Name of the module. */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ns;                  <span class="comment">/**&lt; Namespace of the module used in @ref xp_page "XPath". */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *prefix;              <span class="comment">/**&lt; Prefix of the module. */</span></span><br><span class="line">    <span class="keyword">bool</span> installed;                  <span class="comment">/**&lt; TRUE if the module was explicitly installed. */</span></span><br><span class="line">    <span class="keyword">bool</span> implemented;                <span class="comment">/**&lt; TRUE if the module is implemented (does not have to be installed),</span></span><br><span class="line"><span class="comment">                                          not just imported. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">sr_sch_revision_t</span> revision;      <span class="comment">/**&lt; Revision the module. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">sr_sch_submodule_t</span> *submodules;  <span class="comment">/**&lt; Array of all installed submodules of the module. */</span></span><br><span class="line">    <span class="keyword">size_t</span> submodule_count;          <span class="comment">/**&lt; Number of module's submodules. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> **enabled_features;         <span class="comment">/**&lt; Array of enabled features */</span></span><br><span class="line">    <span class="keyword">size_t</span> enabled_feature_cnt;      <span class="comment">/**&lt; Number of enabled feature */</span></span><br><span class="line">&#125; <span class="keyword">sr_schema_t</span>;</span><br></pre></td></tr></table></figure>

<h3 id="libyang-context-ly-ctx"><a href="#libyang-context-ly-ctx" class="headerlink" title="libyang context ly_ctx"></a>libyang context ly_ctx</h3><h3 id="重要的数据结构"><a href="#重要的数据结构" class="headerlink" title="重要的数据结构"></a>重要的数据结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* NETCONF - SYSREPO connections */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">np2_sessions</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nc_session</span> *<span class="title">ncs</span>;</span> <span class="comment">/* NETCONF session */</span></span><br><span class="line">    <span class="keyword">sr_session_ctx_t</span> *srs;  <span class="comment">/* SYSREPO session */</span></span><br><span class="line">    <span class="keyword">sr_datastore_t</span> ds;      <span class="comment">/* current SYSREPO datastore */</span></span><br><span class="line">    <span class="keyword">sr_sess_options_t</span> opts; <span class="comment">/* current SYSREPO session options */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flags;              <span class="comment">/* various flags */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NP2S_CAND_CHANGED 0x01</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Netopeer server internal data */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">np2srv</span> &#123;</span></span><br><span class="line">    <span class="keyword">sr_conn_ctx_t</span> *sr_conn;        <span class="comment">/**&lt; sysrepo connection */</span></span><br><span class="line">    <span class="keyword">int</span> disconnected;              <span class="comment">/**&lt; flag marking that server is currently not connected to sysrepo */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">np2_sessions</span> <span class="title">sr_sess</span>;</span>   <span class="comment">/**&lt; Netopeer's sysrepo sessions */</span></span><br><span class="line">    <span class="keyword">sr_subscription_ctx_t</span> *sr_subscr; <span class="comment">/**&lt; sysrepo subscription context */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nc_pollsession</span> *<span class="title">nc_ps</span>;</span>  <span class="comment">/**&lt; libnetconf2 pollsession structure */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> nc_max_sessions;      <span class="comment">/**&lt; maximum number of running sessions */</span></span><br><span class="line">    <span class="keyword">pthread_t</span> workers[NP2SRV_THREAD_COUNT]; <span class="comment">/**&lt; worker threads handling sessions */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ly_ctx</span> *<span class="title">ly_ctx</span>;</span>         <span class="comment">/**&lt; libyang's context */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NP2SRV_ENABLED_LY_CTX_INFO_CACHE</span></span><br><span class="line">    <span class="keyword">uint16_t</span> cached_ly_ctx_module_set_id; <span class="comment">/**&lt; module-set-id at the time ly_ctx_info was last cached */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyd_node</span> *<span class="title">ly_ctx_info_cache</span>;</span> <span class="comment">/**&lt; a cache of calling ly_ctx_info on the ly_ctx */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">pthread_rwlock_t</span> ly_ctx_lock;  <span class="comment">/**&lt; libyang's context rwlock */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ly_ctx</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dict_table</span> <span class="title">dict</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ly_modules_list</span> <span class="title">models</span>;</span></span><br><span class="line">    ly_module_imp_clb imp_clb;</span><br><span class="line">    <span class="keyword">void</span> *imp_clb_data;</span><br><span class="line">    ly_module_data_clb data_clb;</span><br><span class="line">    <span class="keyword">void</span> *data_clb_data;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LY_ENABLED_LYD_PRIV</span></span><br><span class="line">    <span class="keyword">void</span> *(*priv_dup_clb)(<span class="keyword">const</span> <span class="keyword">void</span> *priv);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">pthread_key_t</span> errlist_key;</span><br><span class="line">    <span class="keyword">uint8_t</span> internal_module_count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="libyang"><a href="#libyang" class="headerlink" title="libyang"></a>libyang</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Structure describing an element in an XML tree.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the name item is NULL, then the content is part of the mixed content.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Children elements are connected in a half ring doubly linked list:</span></span><br><span class="line"><span class="comment"> * - first's prev pointer points to the last children</span></span><br><span class="line"><span class="comment"> * - last's next pointer is NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lyxml_elem</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> flags;                      <span class="comment">/**&lt; special flags */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LYXML_ELEM_MIXED 0x01 <span class="comment">/* element contains mixed content */</span></span></span><br><span class="line"><span class="comment">/* 0x80 is reserved and cannot be set! */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyxml_elem</span> *<span class="title">parent</span>;</span>       <span class="comment">/**&lt; parent node */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyxml_attr</span> *<span class="title">attr</span>;</span>         <span class="comment">/**&lt; first attribute declared in the element */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyxml_elem</span> *<span class="title">child</span>;</span>        <span class="comment">/**&lt; first children element */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyxml_elem</span> *<span class="title">next</span>;</span>         <span class="comment">/**&lt; next sibling node */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lyxml_elem</span> *<span class="title">prev</span>;</span>         <span class="comment">/**&lt; previous sibling node */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;                <span class="comment">/**&lt; name of the element */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">lyxml_ns</span> *<span class="title">ns</span>;</span>       <span class="comment">/**&lt; namespace of the element */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *content;             <span class="comment">/**&lt; text content of the node if any */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="解析的过程"><a href="#解析的过程" class="headerlink" title="解析的过程"></a>解析的过程</h3><p><code>in file libnetconf2/src/io.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">worker_thread(<span class="keyword">void</span> *arg)</span><br><span class="line">    <span class="comment">/* listen for incoming requests on active NETCONF sessions */</span></span><br><span class="line">    rc = nc_ps_poll(np2srv.nc_ps, <span class="number">0</span>, &amp;ncs);</span><br><span class="line">        nc_ps_poll_session_io(cur_session, NC_SESSION_LOCK_TIMEOUT, ts_cur.tv_sec, msg);</span><br><span class="line">        nc_server_recv_rpc_io(cur_session, timeout, &amp;rpc);</span><br><span class="line">			msgtype = nc_read_msg_io(session, io_timeout, &amp;xml, <span class="number">0</span>);</span><br><span class="line">				<span class="comment">/* build XML tree */</span></span><br><span class="line">                *data = lyxml_parse_mem(session-&gt;ctx, msg, <span class="number">0</span>);</span><br><span class="line">					<span class="comment">/* 具体看代码*/</span></span><br><span class="line">					root = lyxml_parse_elem(ctx, c, &amp;len, <span class="literal">NULL</span>, options);</span><br></pre></td></tr></table></figure>

<h3 id="rpc对比"><a href="#rpc对比" class="headerlink" title="rpc对比"></a>rpc对比</h3><h4 id="clixon"><a href="#clixon" class="headerlink" title="clixon"></a>clixon</h4><ul>
<li>clixon项目中没有使用query选项！！！</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码生成rpc的部分，在cixon/lib/src/clixon_proto_client.c/clicon_rpc_get(h, path, &amp;xret)</span></span><br><span class="line"><span class="keyword">if</span> ((cb = cbuf_new()) == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">goto</span> done;</span><br><span class="line">cprintf(cb, <span class="string">"&lt;rpc"</span>);</span><br><span class="line"><span class="keyword">if</span> ((username = clicon_username_get(h)) != <span class="literal">NULL</span>)</span><br><span class="line">cprintf(cb, <span class="string">" username=\"%s\""</span>, username);</span><br><span class="line">cprintf(cb, <span class="string">"&gt;&lt;get&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span> (xpath &amp;&amp; <span class="built_in">strlen</span>(xpath))</span><br><span class="line">cprintf(cb, <span class="string">"&lt;filter type=\"xpath\" select=\"%s\"/&gt;"</span>, xpath);</span><br><span class="line">cprintf(cb, <span class="string">"&lt;/get&gt;&lt;/rpc&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于这个get的rpc例子，其中填写的只有select的选项，填写的内容是xpath，我这里因为请求/restconf/data所以相当于是根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// log记录的样子</span></span><br><span class="line">clicon_rpc_msg request:&lt;rpc username=<span class="string">"none"</span>&gt;&lt;<span class="built_in">get</span>&gt;&lt;filter type=<span class="string">"xpath"</span> select=<span class="string">"/"</span>/&gt;&lt;/<span class="built_in">get</span>&gt;&lt;/rpc&gt;</span><br></pre></td></tr></table></figure>

<h4 id="netopeer2"><a href="#netopeer2" class="headerlink" title="netopeer2"></a>netopeer2</h4><h5 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义在libnetconf2/src/messages_client.h里面</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Enumeration of RPC types</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that NC_RPC_CLOSE is not defined since sending \&lt;close-session\&gt; is done implicitly by nc_session_free()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    NC_RPC_UNKNOWN = <span class="number">0</span>, <span class="comment">/**&lt; invalid RPC. */</span></span><br><span class="line">    NC_RPC_ACT_GENERIC, <span class="comment">/**&lt; user-defined generic RPC/action. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ietf-netconf */</span></span><br><span class="line">    NC_RPC_GETCONFIG,   <span class="comment">/**&lt; \&lt;get-config\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_EDIT,        <span class="comment">/**&lt; \&lt;edit-config\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_COPY,        <span class="comment">/**&lt; \&lt;copy-config\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_DELETE,      <span class="comment">/**&lt; \&lt;delete-config\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_LOCK,        <span class="comment">/**&lt; \&lt;lock\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_UNLOCK,      <span class="comment">/**&lt; \&lt;unlock\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_GET,         <span class="comment">/**&lt; \&lt;get\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_KILL,        <span class="comment">/**&lt; \&lt;kill-session\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_COMMIT,      <span class="comment">/**&lt; \&lt;commit\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_DISCARD,     <span class="comment">/**&lt; \&lt;discard-changes\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_CANCEL,      <span class="comment">/**&lt; \&lt;cancel-commit\&gt; RPC. */</span></span><br><span class="line">    NC_RPC_VALIDATE,    <span class="comment">/**&lt; \&lt;validate\&gt; RPC. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ietf-netconf-monitoring */</span></span><br><span class="line">    NC_RPC_GETSCHEMA,   <span class="comment">/**&lt; \&lt;get-schema\&gt; RPC. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* notifications */</span></span><br><span class="line">    NC_RPC_SUBSCRIBE    <span class="comment">/**&lt; \&lt;create-subscription\&gt; RPC. */</span></span><br><span class="line">&#125; NC_RPC_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义在libnetconf2/src/messages_p.h里面</span></span><br><span class="line"><span class="comment">// 这样的架构的目的是，有一个通用的nc_rpc类型，对应到具体类型的时候进行类型转换，有点cpp的子类的意思，应该是c里面的一种模拟</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nc_rpc</span> &#123;</span></span><br><span class="line">    NC_RPC_TYPE type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nc_rpc_get</span> &#123;</span></span><br><span class="line">    NC_RPC_TYPE type;        <span class="comment">/**&lt; NC_RPC_GET */</span></span><br><span class="line">    <span class="keyword">char</span> *filter;            <span class="comment">/**&lt; either XML subtree (starts with '&lt;') or an XPath (starts with '/' or an alpha) */</span></span><br><span class="line">    NC_WD_MODE wd_mode;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">free</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nc_rpc_edit</span> &#123;</span></span><br><span class="line">    NC_RPC_TYPE type;        <span class="comment">/**&lt; NC_RPC_EDIT */</span></span><br><span class="line">    NC_DATASTORE target;</span><br><span class="line">    NC_RPC_EDIT_DFLTOP default_op;</span><br><span class="line">    NC_RPC_EDIT_TESTOPT test_opt;</span><br><span class="line">    NC_RPC_EDIT_ERROPT error_opt;</span><br><span class="line">    <span class="keyword">char</span> *edit_cont;         <span class="comment">/**&lt; either URL (starts with aplha) or config (starts with '&lt;') */</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">free</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h5><ul>
<li><code>struct nc_rpc rpc</code> -&gt; <code>lyd_node data</code> -&gt; send from cli to server</li>
<li>&lt;rpc&gt; -&gt; <code>lyxml_elem</code> -&gt; <code>lyd_node</code> (using <code>lyd_parse_xml</code>)</li>
<li></li>
<li>or maybe we can use <code>lyd_parse_mem</code> to do parsing job directly. </li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 产生rpc 此时返回到一个struct nc_rpc 的对象，值得注意的是，在这个nc_rpc_get函数内部是用 struct nc_rpc_get 这个具体的rpc格式，然后返回的时候又退化为了通用形式，（后续会再从这个通用形式转化到具体形式）</span></span><br><span class="line"><span class="comment">// 这里的filter已经保存了cli输入的--filter-xpath 后面跟着的内容，是 char*</span></span><br><span class="line">rpc = nc_rpc_get(filter, wd, NC_PARAMTYPE_CONST);</span><br><span class="line"><span class="comment">// 使用这个对象进行发送</span></span><br><span class="line">ret = cli_send_recv(rpc, output, wd);</span><br><span class="line">	<span class="comment">// 具体是这个函数</span></span><br><span class="line">	msgtype = nc_send_rpc(session, rpc, <span class="number">1000</span>, &amp;msgid);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更详细的，是上面那个函数内部的switch case</span></span><br><span class="line"><span class="comment">/* 这是一个rpc例子</span></span><br><span class="line"><span class="comment">&lt;rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"39\"&gt;</span></span><br><span class="line"><span class="comment">    &lt;get xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"&gt;</span></span><br><span class="line"><span class="comment">		&lt;filter type=\"xpath\" xmlns:bld=\"urn:building:test\" </span></span><br><span class="line"><span class="comment">				select=\"/bld:*\"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/get&gt;</span></span><br><span class="line"><span class="comment">&lt;/rpc&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 所以说，看完了这个部分我们可以意识到：</span></span><br><span class="line"><span class="comment">	- 一个data node节点包含&lt;name xmlns="namespace"&gt;，这里的namespace是在创建node的时候指定的</span></span><br><span class="line"><span class="comment">	- 可以向node里面插入attribute，会在node里面产生 attr=xxx的一段</span></span><br><span class="line"><span class="comment">	一个问题：我创建filter的时候使用的namespace是ietf-netconf，为什么之后变成了urn:building:test，而且，前面的标志是xmlns:bld带了prefix*/</span></span><br><span class="line"><span class="keyword">case</span> NC_RPC_GET:</span><br><span class="line">rpc_g = (struct nc_rpc_get *)rpc; <span class="comment">// 将之前产生的rpc对象转换到特定的方式的struct(这里是get)</span></span><br><span class="line"><span class="comment">/* 新建一个lyd_node, 使用的lys_module是ietf-netconf, name是schema node name*/</span></span><br><span class="line">data = lyd_new(<span class="literal">NULL</span>, ietfnc, <span class="string">"get"</span>);	</span><br><span class="line"><span class="keyword">if</span> (rpc_g-&gt;filter) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!rpc_g-&gt;filter[<span class="number">0</span>] || (rpc_g-&gt;filter[<span class="number">0</span>] == <span class="string">'&lt;'</span>)) &#123;</span><br><span class="line">        node = lyd_new_anydata(data, ietfnc, <span class="string">"filter"</span>, rpc_g-&gt;filter, LYD_ANYDATA_SXML);</span><br><span class="line">        lyd_insert_attr(node, <span class="literal">NULL</span>, <span class="string">"type"</span>, <span class="string">"subtree"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 我们用xpath，首先新建一个anydata的data node，</span></span><br><span class="line"><span class="comment">        		name是filter，不往里面填东西，类型conststring */</span></span><br><span class="line">        node = lyd_new_anydata(data, ietfnc, <span class="string">"filter"</span>, <span class="literal">NULL</span>, LYD_ANYDATA_CONSTSTRING);</span><br><span class="line">        <span class="comment">/* 往里面插入两个attribute*/</span></span><br><span class="line">        lyd_insert_attr(node, <span class="literal">NULL</span>, <span class="string">"type"</span>, <span class="string">"xpath"</span>);</span><br><span class="line">        lyd_insert_attr(node, <span class="literal">NULL</span>, <span class="string">"select"</span>, rpc_g-&gt;filter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">        lyd_free(data);</span><br><span class="line">        <span class="keyword">return</span> NC_MSG_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经过上述的步骤生成的lyd_node gdb debug信息：</span></span><br><span class="line"><span class="comment">// 经过对比，和server解析后的结果的唯一差异就只是server解析后的填写了priv字段</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(gdb) p *data</span></span><br><span class="line"><span class="comment">$10 = &#123;schema = 0x697440, validity = 0 '\000', dflt = 0 '\000', when_status = 0 '\000', </span></span><br><span class="line"><span class="comment">  attr = 0x0, next = 0x0, prev = 0x6927d0, parent = 0x0, hash = 1772939101, ht = 0x0, </span></span><br><span class="line"><span class="comment">  child = 0x691420&#125;</span></span><br><span class="line"><span class="comment">(gdb) p *data </span></span><br><span class="line"><span class="comment">$11 = &#123;name = 0x6717a0 "get", </span></span><br><span class="line"><span class="comment">  dsc = 0x685800 "Retrieve running configuration and device state information.", </span></span><br><span class="line"><span class="comment">  ref = 0x670ed0 "RFC 6241, Section 7.7", flags = 0, ext_size = 0 '\000', </span></span><br><span class="line"><span class="comment">  iffeature_size = 0 '\000', padding = "\000\000\000", ext = 0x0, iffeature = 0x0, </span></span><br><span class="line"><span class="comment">  module = 0x689150, nodetype = LYS_RPC, parent = 0x0, child = 0x6975c0, </span></span><br><span class="line"><span class="comment">  next = 0x697540, prev = 0x68e460, priv = 0x0, hash = "\000\000\000"&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 经lyd_validate以后，lyd_node的validty字段会变成'\000'*/</span></span><br><span class="line">lyd_validate(&amp;data,...)</span><br><span class="line"><span class="comment">/* send RPC, store its message ID 到这里，rpc已经转化到了lyd_node类型的data里面*/</span></span><br><span class="line">r = nc_send_msg_io(session, timeout, data);</span><br><span class="line">	nc_write_msg_io(session, io_timeout, NC_MSG_RPC, op, <span class="literal">NULL</span>); <span class="comment">//data输入到op</span></span><br><span class="line">		<span class="comment">/* 下面是经过switch case选中的NC_MSG_RPC */</span></span><br><span class="line">        content = va_arg(ap, struct lyd_node *);</span><br><span class="line">        attrs = va_arg(ap, <span class="keyword">const</span> <span class="keyword">char</span> *); <span class="comment">// 这个是空的（对于测试样例）</span></span><br><span class="line">		<span class="comment">/* rpc头部，先经过buf转了一下*/</span></span><br><span class="line">        count = asprintf(&amp;buf, <span class="string">"&lt;rpc xmlns=\"%s\" message-id=\"%"</span>PRIu64<span class="string">"\"%s&gt;"</span>,</span><br><span class="line">                         NC_NS_BASE, session-&gt;opts.client.msgid + <span class="number">1</span>, attrs ? attrs : <span class="string">""</span>);</span><br><span class="line">		<span class="keyword">if</span> (count == <span class="number">-1</span>) &#123;</span><br><span class="line">            ERRMEM;</span><br><span class="line">            ret = NC_MSG_ERROR;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 把头部的内容发出去 */</span></span><br><span class="line">		nc_write_clb((<span class="keyword">void</span> *)&amp;arg, buf, count, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">		<span class="comment">/* 调用libyang的函数把lyd_node输出xml形式，发送 */</span></span><br><span class="line">        <span class="keyword">if</span> (lyd_print_clb(nc_write_xmlclb, (<span class="keyword">void</span> *)&amp;arg, content, LYD_XML, 			 		 			LYP_WITHSIBLINGS | LYP_NETCONF)) &#123;</span><br><span class="line">            ret = NC_MSG_ERROR;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 把尾部的内容发出去 */</span></span><br><span class="line">        nc_write_clb((<span class="keyword">void</span> *)&amp;arg, <span class="string">"&lt;/rpc&gt;"</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><p>简要的，这里解析的时候首先将xml格式的rpc解析到<code>lyxml_elem</code>，再解析到<code>lyd_node</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">worker_thread(<span class="keyword">void</span> *arg)</span><br><span class="line">    <span class="comment">/* listen for incoming requests on active NETCONF sessions */</span></span><br><span class="line">    rc = nc_ps_poll(np2srv.nc_ps, <span class="number">0</span>, &amp;ncs);</span><br><span class="line">		ret = nc_ps_poll_session_io(cur_session, NC_SESSION_LOCK_TIMEOUT, </span><br><span class="line">                                    ts_cur.tv_sec, msg);</span><br><span class="line">			ret = nc_server_recv_rpc_io(cur_session, timeout, &amp;rpc);</span><br><span class="line">				msgtype = nc_read_msg_io(session, io_timeout, &amp;xml, <span class="number">0</span>);</span><br><span class="line">					*data = lyxml_parse_mem(session-&gt;ctx, msg, <span class="number">0</span>);</span><br><span class="line"><span class="comment">/* 想要rpc 把断点打在 lyxml_parse_mem*/</span></span><br><span class="line"><span class="comment">/* $3 = 0x7fffd4007c50 "</span></span><br><span class="line"><span class="comment">&lt;rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"39\"&gt;</span></span><br><span class="line"><span class="comment">    &lt;get xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"&gt;</span></span><br><span class="line"><span class="comment">		&lt;filter type=\"xpath\" xmlns:bld=\"urn:building:test\" </span></span><br><span class="line"><span class="comment">				select=\"/bld:*\"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/get&gt;</span></span><br><span class="line"><span class="comment">&lt;/rpc&gt;"...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">				(*rpc)-&gt;tree = lyd_parse_xml(server_opts.ctx, &amp;xml-&gt;child,</span><br><span class="line">                                     LYD_OPT_RPC | LYD_OPT_DESTRUCT | LYD_OPT_NOEXTDEPS |</span><br><span class="line">                                     LYD_OPT_STRICT, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上述netopeer2测试的例子的building.yang</span></span><br><span class="line"><span class="comment"># 可以见到，select="bld:\" 选中的是prefix</span></span><br><span class="line">module building &#123;</span><br><span class="line">  yang-version 1;</span><br><span class="line">  namespace <span class="string">"urn:building:test"</span>;</span><br><span class="line"></span><br><span class="line">  prefix bld;</span><br><span class="line"></span><br><span class="line">  organization <span class="string">"building"</span>;</span><br><span class="line">  contact <span class="string">"building address"</span>;</span><br><span class="line">  description <span class="string">"yang model for buildings"</span>;</span><br><span class="line">  revision <span class="string">"2018-01-22"</span> &#123;</span><br><span class="line">    description <span class="string">"initial revision"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  container rooms &#123;</span><br><span class="line">    list room &#123;</span><br><span class="line">      key room-number;</span><br><span class="line">      leaf room-number &#123;</span><br><span class="line">        <span class="built_in">type</span> uint16;</span><br><span class="line">      &#125;</span><br><span class="line">      leaf size &#123;</span><br><span class="line">        <span class="built_in">type</span> uint32;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initiate"><a href="#initiate" class="headerlink" title="initiate"></a>initiate</h3><ul>
<li>monitor是什么<ul>
<li><em>netconf_monitoring.c</em>, <em>@brief netopeer2-server ietf-netconf-monitoring statistics and counters</em></li>
<li>restconf  和 netconf在monitoring上差异怎么解决</li>
<li>capability的初始化设定</li>
</ul>
</li>
<li>poll session?</li>
<li>capability是什么</li>
<li>加载yang module做的事情<ul>
<li>sysrepo订阅<code>np2srv_sr_subtree_change_subscribe</code> </li>
<li>feature <code>feature_change_ietf_system(np2srv.sr_sess.srs, &quot;local-users&quot;, 1)</code></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">server_init(<span class="keyword">void</span>)</span><br><span class="line">    <span class="comment">// connect sysrepo </span></span><br><span class="line">    rc = sr_connect(<span class="string">"netopeer2"</span>, SR_CONN_DAEMON_REQUIRED | </span><br><span class="line">                    SR_CONN_DAEMON_START, &amp;np2srv.sr_conn);</span><br><span class="line">	rc = sr_session_start(np2srv.sr_conn, np2srv.sr_sess.ds, </span><br><span class="line">                          np2srv.sr_sess.opts, &amp;np2srv.sr_sess.srs);</span><br><span class="line">	<span class="comment">/* init libyang context with schemas */</span></span><br><span class="line">    <span class="keyword">if</span> (np2srv_init_schemas()) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init monitoring */</span></span><br><span class="line">    ncm_init();</span><br><span class="line">		stats.netconf_start_time = time(<span class="literal">NULL</span>);</span><br><span class="line">        pthread_mutex_init(&amp;stats.lock, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* init libnetconf2 */</span></span><br><span class="line">    nc_server_init(np2srv.ly_ctx);</span><br><span class="line">		nc_init();</span><br><span class="line">		<span class="comment">/* set default &lt;get-schema&gt; callback if not specified */</span></span><br><span class="line">        rpc = ly_ctx_get_node(ctx, <span class="literal">NULL</span>, <span class="string">"/ietf-netconf-monitoring:get-schema"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rpc &amp;&amp; !rpc-&gt;priv) &#123;</span><br><span class="line">            lys_set_private(rpc, nc_clb_default_get_schema);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">/* set default &lt;close-session&gt; callback if not specififed */</span></span><br><span class="line">        rpc = ly_ctx_get_node(ctx, <span class="literal">NULL</span>, <span class="string">"/ietf-netconf:close-session"</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="comment">/* ... */</span></span><br><span class="line">		</span><br><span class="line">	<span class="comment">/* prepare poll session structure for libnetconf2 */</span></span><br><span class="line">    np2srv.nc_ps = nc_ps_new();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set with-defaults capability basic-mode */</span></span><br><span class="line">    nc_server_set_capab_withdefaults(NC_WD_EXPLICIT, NC_WD_ALL | NC_WD_ALL_TAG | NC_WD_TRIM | NC_WD_EXPLICIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set capabilities for the NETCONF Notifications */</span></span><br><span class="line">    nc_server_set_capability(<span class="string">"urn:ietf:params:netconf:capability:notification:1.0"</span>);</span><br><span class="line">    nc_server_set_capability(<span class="string">"urn:ietf:params:netconf:capability:interleave:1.0"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* set NETCONF operations callbacks */</span></span><br><span class="line">    snode = ly_ctx_get_node(np2srv.ly_ctx, <span class="literal">NULL</span>, <span class="string">"/ietf-netconf:get-config"</span>, <span class="number">0</span>);</span><br><span class="line">    nc_set_rpc_callback(snode, op_get);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* set Notifications subscription callback */</span></span><br><span class="line">    snode = ly_ctx_get_node(np2srv.ly_ctx, <span class="literal">NULL</span>, <span class="string">"/notifications:create-subscription"</span>, <span class="number">0</span>);</span><br><span class="line">    nc_set_rpc_callback(snode, op_ntf_subscribe);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set server options */</span></span><br><span class="line">    mod = ly_ctx_get_module(np2srv.ly_ctx, <span class="string">"ietf-netconf-server"</span>, <span class="literal">NULL</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mod &amp;&amp; <span class="built_in">strcmp</span>(NP2SRV_KEYSTORED_DIR, <span class="string">"none"</span>)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (ietf_netconf_server_init(mod)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mod = ly_ctx_get_module(np2srv.ly_ctx, <span class="string">"ietf-system"</span>, <span class="literal">NULL</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (mod) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ietf_system_init(mod)) &#123;</span><br><span class="line">                <span class="keyword">goto</span> error;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WRN(<span class="string">"Sysrepo does not implement the \"ietf-system\" module, SSH publickey authentication will not work."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        WRN(<span class="string">"Sysrepo does not have the \"ietf-netconf-server\" module or keystored keys dir unknown, using default NETCONF server options."</span>);</span><br><span class="line">        nc_server_ssh_set_hostkey_clb(np2srv_default_hostkey_clb, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (nc_server_add_endpt(<span class="string">"main"</span>, NC_TI_LIBSSH)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nc_server_endpt_set_address(<span class="string">"main"</span>, <span class="string">"0.0.0.0"</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nc_server_endpt_set_port(<span class="string">"main"</span>, <span class="number">830</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nc_server_ssh_endpt_add_hostkey(<span class="string">"main"</span>, <span class="string">"default"</span>, <span class="number">-1</span>)) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="POST-实现"><a href="#POST-实现" class="headerlink" title="POST 实现"></a>POST 实现</h3><h4 id="restconf"><a href="#restconf" class="headerlink" title="restconf"></a>restconf</h4><ul>
<li>没有datastore的概念</li>
<li>clixon流程：<ul>
<li>edit-config: target = candidate; default-operation = none</li>
<li>commit</li>
<li>if netopeer have startup feature<ul>
<li>copy-config to startup</li>
</ul>
</li>
</ul>
</li>
<li>一个比较重要的差别：对比netopeer2的edit-config，restconf在url里面可能存在部分路径（datastore 与 data resource的区别。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edit-config [--<span class="built_in">help</span>] --target running|candidate (--config[=&lt;file&gt;] | --url &lt;url&gt;) [--defop merge|replace|none] [--<span class="built_in">test</span> <span class="built_in">set</span>|<span class="built_in">test</span>-only|<span class="built_in">test</span>-then-set] [--error stop|<span class="built_in">continue</span>|rollback]</span><br></pre></td></tr></table></figure>

<h4 id="netconf-edit-config"><a href="#netconf-edit-config" class="headerlink" title="netconf: edit-config"></a>netconf: edit-config</h4><ul>
<li><p>operation: Elements in the &lt;config&gt; subtree <strong>MAY</strong> contain an “operation” attribute, which belongs to the NETCONF namespace</p>
</li>
<li><p>netconf 里面定义<strong>attribute</strong>的operation = merge | replace | create | delete | remove </p>
<ul>
<li>在yang里面只定义了typedef edit-operation-type {，没看到使用啊 – 这个还是不知道</li>
<li>为什么说 belongs to the NETCONF namespace? – 这个可以回答了，看下面的data的xml需要指定nc</li>
<li><code>&lt;interface xc:operation=&quot;replace&quot;&gt;</code></li>
<li>A: 感觉这个attribute是自己写的，需要执行的时候自己加上去，写在顶级?node里面</li>
<li>AA：前半句对，是自己写的，但是这个是在发送的config里面写的。=，写法如下：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># delete test</span></span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span> xmlns:nc=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;</span><br><span class="line">  &lt;room nc:operation=<span class="string">"delete"</span>&gt;</span><br><span class="line">    &lt;room-number&gt;12&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;dabc&lt;/room-name&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br><span class="line"><span class="comment"># 这里的一个注意点是要在前面定义nc： xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"</span></span><br><span class="line"><span class="comment"># 否则会报错如下，原因是不定义这个nc，解析的时候不知道是谁的operation</span></span><br><span class="line">&gt; edit-config --target running --config</span><br><span class="line">ERROR</span><br><span class="line">	<span class="built_in">type</span>:     protocol</span><br><span class="line">	tag:      unknown-attribute</span><br><span class="line">	severity: error</span><br><span class="line">	message:  Invalid attribute <span class="string">"operation"</span>.</span><br><span class="line">	bad-attr <span class="comment">#1: operation</span></span><br><span class="line">	bad-elem <span class="comment">#1: /building:rooms/room</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># netopeer2</span></span><br><span class="line">(gdb) p *sessions-&gt;srs</span><br><span class="line"><span class="variable">$44</span> = &#123;conn_ctx = 0x6492d0, id = 1891619541, lock = &#123;__data = &#123;__lock = 0, __count = 0, __</span><br><span class="line">owner = 0, __nusers = 0, __kind = 0, __spins = 0, __elision = 0, __list = &#123;__prev = 0x0, _</span><br><span class="line">_next = 0x0&#125;&#125;, __size = <span class="string">'\000'</span> &lt;repeats 39 <span class="built_in">times</span>&gt;, __align = 0&#125;, last_error = SR_ERR_OK, e</span><br><span class="line">rror_info = 0x0, error_info_size = 0, error_cnt = 0, notif_session = <span class="literal">false</span>, commit_id = 0&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">(gdb) p data</span><br><span class="line">$7 = 0x725ea0 "</span><br><span class="line"><span class="tag">&lt;<span class="name">rpc</span> <span class="attr">xmlns</span>=<span class="string">\</span>"<span class="attr">urn:ietf:params:xml:ns:netconf:base:1.0</span>\" <span class="attr">message-id</span>=<span class="string">\</span>"<span class="attr">22</span>\"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit-config</span> <span class="attr">xmlns</span>=<span class="string">\</span>"<span class="attr">urn:ietf:params:xml:ns:netconf:base:1.0</span>\"&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">running</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">config</span>&gt;</span>// config 里面是我提交的部分</span><br><span class="line">            <span class="tag">&lt;<span class="name">rooms</span> <span class="attr">xmlns</span>=<span class="string">\</span>"<span class="attr">urn:building:test</span>\"&gt;</span>\n  </span><br><span class="line">                <span class="tag">&lt;<span class="name">room</span>&gt;</span>\n    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">room-number</span>&gt;</span>2&gt;<span class="tag">&lt;/<span class="name">room-number</span>&gt;</span>\n    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">room-name</span>&gt;</span>abcd<span class="tag">&lt;/<span class="name">room-name</span>&gt;</span>\n    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">size</span>&gt;</span>100<span class="tag">&lt;/<span class="name">size</span>&gt;</span>\n  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">room</span>&gt;</span>\n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">rooms</span>&gt;</span>\n</span><br><span class="line">        <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc</span>&gt;</span>"</span><br></pre></td></tr></table></figure>

<h4 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h4><ul>
<li>现在实现的是把url中的部分路径转换到data里面，但是我担忧理解可能有偏差，因为协议讲的是If the target resource type is a datastore or data resource, then the POST is treated as a request to create a <strong>top-level resource</strong> or child resource, respectively. </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datastore</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;rooms xmlns="urn:building:test"&gt;&lt;room&gt;&lt;room-number&gt;2333&lt;/room-number&gt;&lt;room-name&gt;deabc&lt;/room-name&gt;&lt;size&gt;100&lt;/size&gt;&lt;/room&gt;&lt;/rooms&gt;'</span> http://localhost/restconf/data</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+json"</span> -d <span class="string">'&#123;"building:rooms":&#123;"room": [&#123;"room-number":2333,"room-name":"deabc","size":100&#125;]&#125;&#125;'</span> http://localhost/restconf/data</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"building:rooms"</span>:&#123;</span><br><span class="line">		<span class="string">"room"</span>: [&#123;</span><br><span class="line">			<span class="string">"room-number"</span>:2333,</span><br><span class="line">            <span class="string">"room-name"</span>:<span class="string">"deabc"</span>,</span><br><span class="line">            <span class="string">"size"</span>:100</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">"building:rooms"</span>:&#123;<span class="string">"room"</span>: [&#123;<span class="string">"room-number"</span>:2333,<span class="string">"room-name"</span>:<span class="string">"deabc"</span>,<span class="string">"size"</span>:100&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># data resource</span></span><br><span class="line"><span class="comment"># 有部分路径在url里面</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;room xmlns="urn:building:test"&gt;&lt;room-number&gt;2333&lt;/room-number&gt;&lt;room-name&gt;deabc&lt;/room-name&gt;&lt;size&gt;100&lt;/size&gt;&lt;/room&gt;'</span> http://localhost/restconf/data/building:rooms</span><br><span class="line"><span class="comment"># json</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+json"</span> -d <span class="string">'&#123;"building:room": [&#123;"room-number":2333,"room-name":"deabc","size":100&#125;]&#125;'</span> http://localhost/restconf/data/building:rooms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也就是说，我需要利用/building:rooms 去生成&lt;rooms xmlns="urn:building:test"&gt;&lt;/rooms&gt;</span></span><br><span class="line"><span class="comment"># 并且与原始的data信息拼装成完整的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多级container测试</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;storages xmlns="urn:building:test"&gt;&lt;boxs&gt;&lt;toys&gt;&lt;toy-number&gt;1&lt;/toy-number&gt;&lt;toy-owner&gt;tom&lt;/toy-owner&gt;&lt;/toys&gt;&lt;/boxs&gt;&lt;/storages&gt;'</span> http://localhost/restconf/data/</span><br><span class="line"></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;toys xmlns="urn:building:test"&gt;&lt;toy-number&gt;1&lt;/toy-number&gt;&lt;toy-owner&gt;tom&lt;/toy-owner&gt;&lt;/toys&gt;'</span> http://localhost/restconf/data/building:storages/boxs</span><br><span class="line"></span><br><span class="line"><span class="comment"># jukebox test for multi-key</span></span><br><span class="line"><span class="comment"># datastore</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;jukebox xmlns="http://example.com/ns/example-jukebox"&gt;&lt;library&gt;&lt;artist&gt;&lt;name&gt;Foo Fighters&lt;/name&gt;&lt;album&gt;&lt;name&gt;One by One&lt;/name&gt;&lt;year&gt;2012&lt;/year&gt;&lt;song&gt;&lt;name&gt;song1&lt;/name&gt;&lt;location&gt;/home/music&lt;/location&gt;&lt;format&gt;MP3&lt;/format&gt;&lt;length&gt;286&lt;/length&gt;&lt;/song&gt;&lt;/album&gt;&lt;/artist&gt;&lt;/library&gt;&lt;/jukebox&gt;'</span> http://localhost/restconf/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># data resource </span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;song xmlns="http://example.com/ns/example-jukebox"&gt;&lt;name&gt;song1&lt;/name&gt;&lt;location&gt;music&lt;/location&gt;&lt;format&gt;MP3&lt;/format&gt;&lt;length&gt;286&lt;/length&gt;&lt;/song&gt;'</span>  http://localhost/restconf/data/example-jukebox:jukebox/library/artist=Foo%20Fighters/album=Wasting%20Light</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;jukebox xmlns=<span class="string">"http://example.com/ns/example-jukebox"</span>&gt;</span><br><span class="line">  &lt;library&gt;</span><br><span class="line">    &lt;artist&gt;</span><br><span class="line">      &lt;name&gt;Foo Fighters&lt;/name&gt;</span><br><span class="line">      &lt;album&gt;</span><br><span class="line">        &lt;name&gt;One by One&lt;/name&gt;</span><br><span class="line">        &lt;year&gt;2012&lt;/year&gt;</span><br><span class="line">        &lt;song&gt;</span><br><span class="line">        	&lt;name&gt;song1&lt;/name&gt;</span><br><span class="line">        	&lt;location&gt;/home/music&lt;/location&gt;</span><br><span class="line">        	&lt;format&gt;MP3&lt;/format&gt;</span><br><span class="line">        	&lt;length&gt;286&lt;/length&gt;</span><br><span class="line">        &lt;/song&gt;</span><br><span class="line">      &lt;/album&gt;</span><br><span class="line">    &lt;/artist&gt;</span><br><span class="line">  &lt;/library&gt;</span><br><span class="line">&lt;/jukebox&gt;</span><br></pre></td></tr></table></figure>

<h4 id="double-POST-error"><a href="#double-POST-error" class="headerlink" title="double POST error"></a>double POST error</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这部分在netopeer2里面会报错</span></span><br><span class="line"><span class="comment"># edit 的内容是：</span></span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span> xmlns:nc=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;</span><br><span class="line">  &lt;room nc:operation=<span class="string">"create"</span>&gt;</span><br><span class="line">    &lt;room-number&gt;12&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;dabc&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;200&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br><span class="line"></span><br><span class="line">&gt; edit-config --target running --config </span><br><span class="line">ERROR</span><br><span class="line">	<span class="built_in">type</span>:     application</span><br><span class="line">	tag:      data-exists</span><br><span class="line">	severity: error</span><br><span class="line">	path:     /building:rooms/room[room-number=<span class="string">'2333'</span>][room-name=<span class="string">'deabc'</span>]</span><br><span class="line">	message:  Request could not be completed because the relevant data model content already exists.</span><br></pre></td></tr></table></figure>

<h3 id="Coexistence-with-NETCONF"><a href="#Coexistence-with-NETCONF" class="headerlink" title="Coexistence with NETCONF"></a>Coexistence with NETCONF</h3><ul>
<li>If the NETCONF server supports <strong>:writable-running</strong>, all edits to configuration nodes in {+restconf}/data are performed in the running configuration datastore. </li>
<li>Otherwise, if the device supports <strong>:candidate</strong>, all edits to configuration nodes in {+restconf}/data are performed in the candidate configuration datastore. The candidate MUST be automatically committed to running immediately after each successful edit.</li>
<li>我当前的实现算是按照这两条来的，但是因为netconf是enable writable-running的，我猜第一条符合就忽略第二条，意味着我直接写到running里面是对的。</li>
</ul>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ul>
<li>在第四章开头写的PUT的对应<ul>
<li>| PUT  | &lt;copy-config&gt; (PUT on datastore)  这个奇怪的东西先不管</li>
<li>| PUT | &lt;edit-config&gt; (nc:operation=”create/replace”) 先做这个出来</li>
</ul>
</li>
<li>Both the POST and PUT methods can be used to create data resources. <ul>
<li>The difference is that for POST, the client does not provide the resource identifier for the resource that will be created. </li>
<li>The target resource for the POST method for resource creation is the parent of the new resource. </li>
<li>The target resource for the PUT method for resource creation is the new resource.</li>
</ul>
</li>
<li>提到的二者的差别是：<ul>
<li>POST只能是创建新的，target写的是新建的对象的上一级</li>
<li>PUT根据情况可能会是create / replace，原因是PUT的target写的是目标对象自己<ul>
<li>首先检测有没有这个对象，如果没有的话就对应为创建<ul>
<li>涉及到的问题：如何检测？</li>
</ul>
</li>
<li>如果有这个对象，就把已有的对象replace成新的<ul>
<li>涉及到的问题：先删再加 / 修改？ 需要看sysrepo的支持和edit-config</li>
<li>A：在edit-config里面的replace是这样做的：先删再改。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>提炼一下：PUT的对象由url确定，内容由data确定<ul>
<li>一个问题是，PUT的内容是否要求完整性？</li>
<li>感觉是不要求的，还有默认值的问题</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace test</span></span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span> xmlns:nc=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;</span><br><span class="line">  &lt;room nc:operation=<span class="string">"replace"</span>&gt;</span><br><span class="line">    &lt;room-number&gt;12&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;dabc&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;200&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试发现，对一个不存在的对象使用edit-config op=replace，是默认带创建功能的，意味着我不需要手动检测了，直接replace就行，不存在create</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PUT还可以只改一个值啊</span></span><br><span class="line"><span class="comment"># Q: 这种应该如何定位，怕把别的同级别的东西也删掉了。</span></span><br><span class="line">new <span class="string">"restconf PUT change type to eth0 (non-key sub-element to list)"</span></span><br><span class="line">expectfn <span class="string">'curl -s -X PUT -d &#123;"example:type":"eth0"&#125; http://localhost/restconf/data/example:cont1/interface=local0/type'</span> 0 <span class="string">""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test </span></span><br><span class="line">curl -s -i -X PUT -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;album xmlns="http://example.com/ns/example-jukebox"&gt;&lt;name&gt;Wasting Light&lt;/name&gt;&lt;year&gt;2031&lt;/year&gt;&lt;/album&gt;'</span> http://localhost/restconf/data/example-jukebox:jukebox/library/artist=Foo%20Fighters/album=Wasting%20Light</span><br><span class="line"><span class="comment"># 对比POST</span></span><br><span class="line">curl -s -i -X POST -H <span class="string">"Accept: application/yang-data+xml"</span> -d <span class="string">'&lt;song xmlns="http://example.com/ns/example-jukebox"&gt;&lt;name&gt;song1&lt;/name&gt;&lt;location&gt;music&lt;/location&gt;&lt;format&gt;MP3&lt;/format&gt;&lt;length&gt;286&lt;/length&gt;&lt;/song&gt;'</span>  http://localhost/restconf/data/example-jukebox:jukebox/library/artist=Foo%20Fighters/album=Wasting%20Light</span><br><span class="line"></span><br><span class="line"><span class="comment"># input</span></span><br><span class="line">&lt;album xmlns=<span class="string">"http://example.com/ns/example-jukebox"</span>&gt;&lt;name&gt;Wasting Light&lt;/name&gt;&lt;genre&gt;jbox:alternative&lt;/genre&gt;&lt;year&gt;2011&lt;/year&gt;&lt;/album&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先去掉头尾</span></span><br><span class="line">&lt;name&gt;Wasting Light&lt;/name&gt;&lt;genre&gt;jbox:alternative&lt;/genre&gt;&lt;year&gt;2011&lt;/year&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后根据路径补全</span></span><br><span class="line">&lt;jukebox xmlns=<span class="string">"http://example.com/ns/example-jukebox"</span>&gt;</span><br><span class="line">  &lt;library&gt;</span><br><span class="line">    &lt;artist&gt;</span><br><span class="line">      &lt;name&gt;Foo Fighters&lt;/name&gt;</span><br><span class="line">      &lt;album&gt;</span><br><span class="line">        &lt;name&gt;One by One&lt;/name&gt;</span><br><span class="line">        &lt;year&gt;2012&lt;/year&gt;</span><br><span class="line">        &lt;song&gt;</span><br><span class="line">        	&lt;name&gt;song1&lt;/name&gt;</span><br><span class="line">        	&lt;location&gt;/home/music&lt;/location&gt;</span><br><span class="line">        	&lt;format&gt;MP3&lt;/format&gt;</span><br><span class="line">        	&lt;length&gt;286&lt;/length&gt;</span><br><span class="line">        &lt;/song&gt;</span><br><span class="line">      &lt;/album&gt;</span><br><span class="line">    &lt;/artist&gt;</span><br><span class="line">  &lt;/library&gt;</span><br><span class="line">&lt;/jukebox&gt;</span><br><span class="line"></span><br><span class="line">[INF]: api_path2xml striped data: [&lt;name&gt;Wasting Light&lt;/name&gt;&lt;genre&gt;jbox:alternative&lt;/genre&gt;&lt;year&gt;2011&lt;/year&gt;]</span><br><span class="line">[INF]: api_path2xml cxml: [&lt;jukebox xmlns=<span class="string">"http://example.com/ns/example-jukebox"</span>&gt;&lt;library&gt;&lt;artist&gt;&lt;name&gt;Foo Fighters&lt;/name&gt;&lt;album&gt;&lt;name&gt;Wasting Light&lt;/name&gt;&lt;genre&gt;jbox:alternative&lt;/genre&gt;&lt;year&gt;2011&lt;/year&gt;&lt;/album&gt;&lt;/artist&gt;&lt;/library&gt;&lt;/jukebox&gt;]</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># json test</span></span><br><span class="line"><span class="comment"># test datastore的完整版</span></span><br><span class="line">curl -s -i -X PATCH -H <span class="string">"Accept: application/yang-data+json"</span> -d <span class="string">'&#123; "example-jukebox:jukebox" : &#123; "library" : &#123; "artist" : [ &#123; "name" : "Fighters", "album" : [ &#123; "name" : "Light", "genre" : "example-jukebox:alternative", "year" : 2011, "song" : [  &#123; "name" : "Light", "location" :  "/media/foo/a7/wasting-light.mp3", "format" : "MP3", "length" : 286 &#125; ] &#125; ] &#125; ] &#125; &#125; &#125;'</span> http://localhost/restconf/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># data resource版</span></span><br><span class="line">curl -s -i -X PATCH -H <span class="string">"Accept: application/yang-data+json"</span> -d <span class="string">'&#123; "example-jukebox:album" : [ &#123; "name" : "Light", "genre" : "example-jukebox:alternative", "year" : 2011, "song" : [ &#123; "name" : "Light", "location" :  "/media/foo/a7/wasting light.mp3", "format" : "MP3", "length" : 286 &#125; ] &#125; ] &#125;'</span> http://localhost/restconf/data/example-jukebox:jukebox/library/artist=Fighters/album=Light</span><br><span class="line"><span class="comment"># 输入的pretty版</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"example-jukebox:album"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span> : <span class="string">"Light"</span>,</span><br><span class="line">            <span class="string">"genre"</span> : <span class="string">"example-jukebox:alternative"</span>,</span><br><span class="line">            <span class="string">"year"</span> : 2011,</span><br><span class="line">            <span class="string">"song"</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="string">"name"</span> : <span class="string">"Light"</span>,</span><br><span class="line">                <span class="string">"location"</span> :  <span class="string">"/media/foo/a7/wasting-light.mp3"</span>,</span><br><span class="line">                <span class="string">"format"</span> : <span class="string">"MP3"</span>,</span><br><span class="line">                <span class="string">"length"</span> : 286</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 裁剪</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span> : <span class="string">"Light"</span>,</span><br><span class="line">            <span class="string">"genre"</span> : <span class="string">"example-jukebox:alternative"</span>,</span><br><span class="line">            <span class="string">"year"</span> : 2011,</span><br><span class="line">            <span class="string">"song"</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="string">"name"</span> : <span class="string">"Light"</span>,</span><br><span class="line">                <span class="string">"location"</span> :  <span class="string">"/media/foo/a7/wasting-light.mp3"</span>,</span><br><span class="line">                <span class="string">"format"</span> : <span class="string">"MP3"</span>,</span><br><span class="line">                <span class="string">"length"</span> : 286</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># first step  modname + topcontainer//need cbtail</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="string">"example-jukebox:jukebox"</span> : &#123;</span><br><span class="line"><span class="comment"># second step  container</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="string">"example-jukebox:jukebox"</span> : &#123;</span><br><span class="line">		<span class="string">"library"</span> : &#123;			<span class="comment"># new line</span></span><br><span class="line"><span class="comment"># third step  list instance with key</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="string">"example-jukebox:jukebox"</span> : &#123;</span><br><span class="line">		<span class="string">"library"</span> : &#123;			</span><br><span class="line">			<span class="string">"artist"</span> : [		<span class="comment"># new line</span></span><br><span class="line">                &#123;				<span class="comment"># new line</span></span><br><span class="line">					<span class="string">"name"</span> : <span class="string">"Fighters"</span>, <span class="comment"># new line key</span></span><br><span class="line"><span class="comment"># 懒得写了</span></span><br><span class="line">&#123; <span class="string">"example-jukebox:jukebox"</span> : &#123; <span class="string">"library"</span> : &#123; <span class="string">"artist"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"Fighters"</span>, <span class="string">"album"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"Light"</span>,  <span class="string">"name"</span> : <span class="string">"Light"</span>, <span class="string">"genre"</span> : <span class="string">"example-jukebox:alternative"</span>, <span class="string">"year"</span> : 2011, <span class="string">"song"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"Light"</span>, <span class="string">"location"</span> :  <span class="string">"/media/foo/a7/wasting light.mp3"</span>, <span class="string">"format"</span> : <span class="string">"MP3"</span>, <span class="string">"length"</span> : 286 &#125; ] &#125; ] &#125; ] &#125; &#125; &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123; <span class="string">"example-jukebox:jukebox"</span> : &#123; <span class="string">"library"</span> : &#123; <span class="string">"artist"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"Fighters"</span>, <span class="string">"album"</span> : [ &#123; <span class="string">"name"</span> : <span class="string">"Light"</span>, <span class="string">"genre"</span> : <span class="string">"example-jukebox:alternative"</span>, <span class="string">"year"</span> : 2011, <span class="string">"song"</span> : [  &#123; <span class="string">"name"</span> : <span class="string">"Light"</span>, <span class="string">"location"</span> :  <span class="string">"/media/foo/a7/wasting-light.mp3"</span>, <span class="string">"format"</span> : <span class="string">"MP3"</span>, <span class="string">"length"</span> : 286 &#125; ] &#125; ] &#125; ] &#125; &#125; &#125;</span><br><span class="line"><span class="comment"># 补全的完整版</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"example-jukebox:jukebox"</span> : &#123;</span><br><span class="line">        <span class="string">"library"</span> : &#123;</span><br><span class="line">            <span class="string">"artist"</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"name"</span> : <span class="string">"Fighters"</span>,</span><br><span class="line">                    <span class="string">"album"</span> : [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"name"</span> : <span class="string">"Light"</span>,</span><br><span class="line">                            <span class="string">"genre"</span> : <span class="string">"example-jukebox:alternative"</span>,</span><br><span class="line">                            <span class="string">"year"</span> : 2011,</span><br><span class="line">                            <span class="string">"song"</span> : [</span><br><span class="line">                                &#123;</span><br><span class="line">                                <span class="string">"name"</span> : <span class="string">"Light"</span>,</span><br><span class="line">                                <span class="string">"location"</span> :  <span class="string">"/media/foo/a7/wasting-light.mp3"</span>,</span><br><span class="line">                                <span class="string">"format"</span> : <span class="string">"MP3"</span>,</span><br><span class="line">                                <span class="string">"length"</span> : 286</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul>
<li>现在只调研过POST第二次CREATE导致的错误</li>
<li>要了解这个error的格式是否是ietf-netconf的yang定义的</li>
<li>error有关的函数是否在libnetconf2里面</li>
<li>还要了解对于restconf，error要看yang还是看协议正文里面的http错误码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试xml</span></span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span> xmlns:nc=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;</span><br><span class="line">  &lt;room nc:operation=<span class="string">"create"</span>&gt;</span><br><span class="line">    &lt;room-number&gt;12&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;dabc&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;200&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb 断点位置提示</span></span><br><span class="line">1       breakpoint     keep y   0x000000000041a49c <span class="keyword">in</span> op_editconfig</span><br><span class="line">                                                   at /home/sparta/<span class="built_in">source</span>/Netopeer2-0.7-r1</span><br><span class="line">/server/op_editconfig.c:166</span><br><span class="line">        breakpoint already hit 1 time</span><br><span class="line">2       breakpoint     keep y   0x000000000041157b <span class="keyword">in</span> np2srv_sr_set_item</span><br><span class="line">                                                   at /home/sparta/<span class="built_in">source</span>/Netopeer2-0.7-r1</span><br><span class="line">/server/operations.c:136</span><br><span class="line">        breakpoint already hit 1 time</span><br><span class="line"><span class="comment"># 触发条件：第二次POST同一个内容</span></span><br><span class="line"><span class="comment"># 触发位置：</span></span><br><span class="line">np2srv_sr_set_item 函数内部的</span><br><span class="line">    rc = sr_set_item(srs, xpath, value, opts);</span><br><span class="line"><span class="comment"># rc返回14， 在后续的switch case中，指向</span></span><br><span class="line"><span class="keyword">case</span> SR_ERR_DATA_EXISTS:</span><br><span class="line">    e = nc_err(NC_ERR_DATA_EXISTS, NC_ERR_TYPE_PROT);</span><br><span class="line">    nc_err_set_path(e, xpath);</span><br><span class="line">    <span class="keyword">if</span> (*ereply) &#123;</span><br><span class="line">    nc_server_reply_add_err(*ereply, e);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    *ereply = nc_server_reply_err(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># server端报错</span></span><br><span class="line">[ERR]: (cl_request_process:543) Error by processing of the <span class="built_in">set</span>-item request (session id=61</span><br><span class="line">6876644): The item already exists.</span><br><span class="line">[ERR]: (sr_set_item:1832) Error by processing of the request.</span><br><span class="line"><span class="comment"># client端报错</span></span><br><span class="line">ERROR</span><br><span class="line">	<span class="built_in">type</span>:     application</span><br><span class="line">	tag:      data-exists</span><br><span class="line">	severity: error</span><br><span class="line">	path:     /building:rooms/room[room-number=<span class="string">'12'</span>][room-name=<span class="string">'dabc'</span>]</span><br><span class="line">	message:  Request could not be completed because the relevant data model content already exists.</span><br><span class="line">	</span><br><span class="line"><span class="comment"># error的处理</span></span><br><span class="line">session_server.c nc_server_send_reply_io <span class="keyword">function</span>:</span><br><span class="line">r = nc_write_msg_io(session, io_timeout, NC_MSG_REPLY, rpc-&gt;root, reply);</span><br><span class="line">	<span class="keyword">case</span> NC_MSG_REPLY:</span><br><span class="line">		<span class="keyword">case</span> NC_RPL_ERROR:</span><br><span class="line">            error_rpl = (struct nc_server_reply_error *)reply;</span><br><span class="line">            <span class="keyword">for</span> (i = 0; i &lt; error_rpl-&gt;count; ++i) &#123;</span><br><span class="line">                nc_write_error(&amp;arg, error_rpl-&gt;err[i], base_prefix);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">break</span>;</span><br></pre></td></tr></table></figure>

<h4 id="error-结构体的设定"><a href="#error-结构体的设定" class="headerlink" title="error 结构体的设定"></a>error 结构体的设定</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* error主要就是type, tag, message, path, app-tag是用nc_err_set_app_tag加的*/</span></span><br><span class="line"><span class="keyword">case</span> SR_ERR_DATA_EXISTS:</span><br><span class="line">	<span class="comment">/* nc_err里面会设定type, tag, message*/</span></span><br><span class="line">    e = nc_err(NC_ERR_DATA_EXISTS, NC_ERR_TYPE_PROT);</span><br><span class="line">    <span class="comment">/* 这里设定path */</span></span><br><span class="line">    nc_err_set_path(e, xpath);</span><br><span class="line">    <span class="keyword">if</span> (*ereply) &#123;</span><br><span class="line">        nc_server_reply_add_err(*ereply, e);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *ereply = nc_server_reply_err(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 再列一下：</span></span><br><span class="line">nc_err: 用type和tag创建一个error，内部会调用set_msg</span><br><span class="line">nc_err_set_path</span><br><span class="line">nc_err_set_app_tag</span><br><span class="line">nc_err_set_msg</span><br><span class="line">nc_err_set_sid</span><br><span class="line"><span class="comment">// 对于以上每个函数，都有对应的get替换掉set用来获取相应值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放空间</span></span><br><span class="line">nc_err_free</span><br></pre></td></tr></table></figure>

<h3 id="YANGs"><a href="#YANGs" class="headerlink" title="YANGs"></a>YANGs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/YangModels/yang/tree/master/standard/ietf/RFC</span><br><span class="line"><span class="comment"># basics</span></span><br><span class="line">ietf-ip</span><br><span class="line">ietf-interfaces</span><br><span class="line">ietf-inet-types</span><br><span class="line">ietf-yang-types</span><br><span class="line">ietf-yang-metadata</span><br><span class="line">ietf-yang-library</span><br><span class="line"><span class="comment"># netconf including：</span></span><br><span class="line">ietf-netconf</span><br><span class="line">ietf-netconf-notifications</span><br><span class="line">ietf-netconf- acm</span><br><span class="line">ietf-netconf-with-defaults</span><br><span class="line">ietf-netconf-server</span><br><span class="line">ietf-netconf-monitoring</span><br><span class="line">ietf-ssh-server</span><br><span class="line">ietf-tls-server</span><br><span class="line"><span class="comment"># restconf </span></span><br><span class="line">ietf-restconf</span><br><span class="line">ietf-restconf-monitoring</span><br><span class="line">ietf-restconf-server  <span class="comment">#draft</span></span><br><span class="line">ietf-restconf-transactions@2018-06-11.yang <span class="comment"># 扩展draft</span></span><br><span class="line">ietf-restconf-subscribed-notifications@2019-01-11.yang	<span class="comment"># 扩展draft</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ietf-restconf-monitoring@2017-01-26.yang </span></span><br><span class="line">module: ietf-restconf-monitoring</span><br><span class="line">  +--ro restconf-state</span><br><span class="line">     +--ro capabilities</span><br><span class="line">     |  +--ro capability*   ietf-inet-types:uri</span><br><span class="line">     +--ro streams</span><br><span class="line">        +--ro stream* [name]</span><br><span class="line">           +--ro name                        string</span><br><span class="line">           +--ro description?                string</span><br><span class="line">           +--ro replay-support?             boolean &lt;<span class="literal">false</span>&gt;</span><br><span class="line">           +--ro replay-log-creation-time?   ietf-yang-types:date-and-time</span><br><span class="line">           +--ro access* [encoding]</span><br><span class="line">              +--ro encoding    string</span><br><span class="line">              +--ro location    ietf-inet-types:uri</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ietf-netconf-monitoring.yang </span></span><br><span class="line">module: ietf-netconf-monitoring</span><br><span class="line">  +--ro netconf-state</span><br><span class="line">     +--ro capabilities</span><br><span class="line">     |  +--ro capability*   ietf-inet-types:uri</span><br><span class="line">     +--ro datastores</span><br><span class="line">     |  +--ro datastore* [name]</span><br><span class="line">     |     +--ro name     netconf-datastore-type</span><br><span class="line">     |     +--ro locks!</span><br><span class="line">     |        +--ro (lock-type)?</span><br><span class="line">     |           +--:(global-lock)</span><br><span class="line">     |           |  +--ro global-lock</span><br><span class="line">     |           |     +--ro locked-by-session    uint32</span><br><span class="line">     |           |     +--ro locked-time          ietf-yang-types:date-and-time</span><br><span class="line">     |           +--:(partial-lock)</span><br><span class="line">     |              +--ro partial-lock* [lock-id]</span><br><span class="line">     |                 +--ro lock-id              uint32</span><br><span class="line">     |                 +--ro locked-by-session    uint32</span><br><span class="line">     |                 +--ro locked-time          ietf-yang-types:date-and-time</span><br><span class="line">     |                 +--ro select*              ietf-yang-types:xpath1.0</span><br><span class="line">     |                 +--ro locked-node*         instance-identifier</span><br><span class="line">     +--ro schemas</span><br><span class="line">     |  +--ro schema* [identifier version format]</span><br><span class="line">     |     +--ro identifier    string</span><br><span class="line">     |     +--ro version       string</span><br><span class="line">     |     +--ro format        identityref</span><br><span class="line">     |     +--ro namespace     ietf-inet-types:uri</span><br><span class="line">     |     +--ro location*     union</span><br><span class="line">     +--ro sessions</span><br><span class="line">     |  +--ro session* [session-id]</span><br><span class="line">     |     +--ro session-id           uint32</span><br><span class="line">     |     +--ro transport            identityref</span><br><span class="line">     |     +--ro username             string</span><br><span class="line">     |     +--ro <span class="built_in">source</span>-host?         ietf-inet-types:host</span><br><span class="line">     |     +--ro login-time           ietf-yang-types:date-and-time</span><br><span class="line">     |     +--ro <span class="keyword">in</span>-rpcs?             ietf-yang-types:zero-based-counter32</span><br><span class="line">     |     +--ro <span class="keyword">in</span>-bad-rpcs?         ietf-yang-types:zero-based-counter32</span><br><span class="line">     |     +--ro out-rpc-errors?      ietf-yang-types:zero-based-counter32</span><br><span class="line">     |     +--ro out-notifications?   ietf-yang-types:zero-based-counter32</span><br><span class="line">     +--ro statistics</span><br><span class="line">        +--ro netconf-start-time?   ietf-yang-types:date-and-time</span><br><span class="line">        +--ro <span class="keyword">in</span>-bad-hellos?        ietf-yang-types:zero-based-counter32</span><br><span class="line">        +--ro <span class="keyword">in</span>-sessions?          ietf-yang-types:zero-based-counter32</span><br><span class="line">        +--ro dropped-sessions?     ietf-yang-types:zero-based-counter32</span><br><span class="line">        +--ro <span class="keyword">in</span>-rpcs?              ietf-yang-types:zero-based-counter32</span><br><span class="line">        +--ro <span class="keyword">in</span>-bad-rpcs?          ietf-yang-types:zero-based-counter32</span><br><span class="line">        +--ro out-rpc-errors?       ietf-yang-types:zero-based-counter32</span><br><span class="line">        +--ro out-notifications?    ietf-yang-types:zero-based-counter32</span><br><span class="line"></span><br><span class="line">  rpcs:</span><br><span class="line">    +---x get-schema</span><br><span class="line">       +---- input</span><br><span class="line">       |  +---w identifier    string</span><br><span class="line">       |  +---w version?      string</span><br><span class="line">       |  +---w format?       identityref</span><br><span class="line">       +---- output</span><br><span class="line">          +--ro data?   anyxml</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module: ietf-netconf</span><br><span class="line"></span><br><span class="line">  rpcs:</span><br><span class="line">    +---x get-config</span><br><span class="line">    |  +---- input</span><br><span class="line">    |  |  +---w <span class="built_in">source</span></span><br><span class="line">    |  |  |  +---w (config-source)</span><br><span class="line">    |  |  |     +--:(running)</span><br><span class="line">    |  |  |        +---w running?   empty</span><br><span class="line">    |  |  +---w filter?   anyxml</span><br><span class="line">    |  +---- output</span><br><span class="line">    |     +--ro data?   anyxml</span><br><span class="line">    +---x edit-config</span><br><span class="line">    |  +---- input</span><br><span class="line">    |     +---w target</span><br><span class="line">    |     |  +---w (config-target)</span><br><span class="line">    |     +---w default-operation?   enumeration &lt;merge&gt;</span><br><span class="line">    |     +---w error-option?        enumeration &lt;stop-on-error&gt;</span><br><span class="line">    |     +---w (edit-content)</span><br><span class="line">    |        +--:(config)</span><br><span class="line">    |           +---w config?   anyxml</span><br><span class="line">    +---x copy-config</span><br><span class="line">    |  +---- input</span><br><span class="line">    |     +---w target</span><br><span class="line">    |     |  +---w (config-target)</span><br><span class="line">    |     +---w <span class="built_in">source</span></span><br><span class="line">    |        +---w (config-source)</span><br><span class="line">    |           +--:(running)</span><br><span class="line">    |           |  +---w running?   empty</span><br><span class="line">    |           +--:(config)</span><br><span class="line">    |              +---w config?   anyxml</span><br><span class="line">    +---x delete-config</span><br><span class="line">    |  +---- input</span><br><span class="line">    |     +---w target</span><br><span class="line">    |        +---w (config-target)</span><br><span class="line">    +---x lock</span><br><span class="line">    |  +---- input</span><br><span class="line">    |     +---w target</span><br><span class="line">    |        +---w (config-target)</span><br><span class="line">    |           +--:(running)</span><br><span class="line">    |              +---w running?   empty</span><br><span class="line">    +---x unlock</span><br><span class="line">    |  +---- input</span><br><span class="line">    |     +---w target</span><br><span class="line">    |        +---w (config-target)</span><br><span class="line">    |           +--:(running)</span><br><span class="line">    |              +---w running?   empty</span><br><span class="line">    +---x get</span><br><span class="line">    |  +---- input</span><br><span class="line">    |  |  +---w filter?   anyxml</span><br><span class="line">    |  +---- output</span><br><span class="line">    |     +--ro data?   anyxml</span><br><span class="line">    +---x close-session</span><br><span class="line">    +---x <span class="built_in">kill</span>-session</span><br><span class="line">       +---- input</span><br><span class="line">          +---w session-id    session-id-type</span><br><span class="line"></span><br><span class="line">ietf-netconf features:</span><br><span class="line">	writable-running  (off)</span><br><span class="line">	candidate         (off)</span><br><span class="line">	confirmed-commit  (off)</span><br><span class="line">	rollback-on-error (off)</span><br><span class="line">	validate          (off)</span><br><span class="line">	startup           (off)</span><br><span class="line">	url               (off)</span><br><span class="line">	xpath             (off)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ietf-netconf-server.yang</span></span><br><span class="line">module: ietf-netconf-server</span><br><span class="line">  +--rw netconf-server</span><br><span class="line">     +--rw session-options</span><br><span class="line">        +--rw hello-timeout?   uint16 &lt;600&gt;</span><br><span class="line">module: ietf-netconf-server</span><br><span class="line">    +--rw netconf-server</span><br><span class="line">       +--rw session-options</span><br><span class="line">       |  +--rw hello-timeout?   uint16</span><br><span class="line">       +--rw listen &#123;(ssh-listen or tls-listen)&#125;?</span><br><span class="line">       |  +--rw max-sessions?   uint16</span><br><span class="line">       |  +--rw idle-timeout?   uint16</span><br><span class="line">       |  +--rw endpoint* [name]</span><br><span class="line">       |     +--rw name    string</span><br><span class="line">       |     +--rw (transport)</span><br><span class="line">       |        +--:(ssh) &#123;ssh-listen&#125;?</span><br><span class="line">       |        |  +--rw ssh</span><br><span class="line">       |        |     +--rw address?            inet:ip-address</span><br><span class="line">       |        |     +--rw port                inet:port-number</span><br><span class="line">       |        |     +--rw host-keys</span><br><span class="line">       |        |     |  +--rw host-key* [name]</span><br><span class="line">       |        |     |     +--rw name           string</span><br><span class="line">       |        |     |     +--rw (<span class="built_in">type</span>)?</span><br><span class="line">       |        |     |        +--:(public-key)</span><br><span class="line">       |        |     |        |  +--rw public-key?    -&gt; /kc:keychain/p</span><br><span class="line"> rivate-keys/private-key/name</span><br><span class="line">       |        |     |        +--:(certificate)</span><br><span class="line">       |        |     |           +--rw certificate?   -&gt; /kc:keychain/p</span><br><span class="line"> rivate-keys/private-key/certificate-chains/certificate-chain/certificat</span><br><span class="line"> e &#123;ssh-x509-certs&#125;?</span><br><span class="line">       |        |     +--rw client-cert-auth &#123;ssh-x509-certs&#125;?</span><br><span class="line">       |        |        +--rw trusted-ca-certs?       -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">       |        |        +--rw trusted-client-certs?   -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">       |        +--:(tls) &#123;tls-listen&#125;?</span><br><span class="line">       |           +--rw tls</span><br><span class="line">       |              +--rw address?        inet:ip-address</span><br><span class="line">       |              +--rw port            inet:port-number</span><br><span class="line">       |              +--rw certificates</span><br><span class="line">       |              |  +--rw certificate* [name]</span><br><span class="line">       |              |     +--rw name    -&gt; /kc:keychain/private-keys/p</span><br><span class="line"> rivate-key/certificate-chains/certificate-chain/certificate</span><br><span class="line">       |              +--rw client-auth</span><br><span class="line">       |                 +--rw trusted-ca-certs?       -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">       |                 +--rw trusted-client-certs?   -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">       |                 +--rw cert-maps</span><br><span class="line">       |                    +--rw cert-to-name* [id]</span><br><span class="line">       |                       +--rw id             uint32</span><br><span class="line">       |                       +--rw fingerprint    x509c2n:tls-fingerpr</span><br><span class="line"> int</span><br><span class="line">       |                       +--rw map-type       identityref</span><br><span class="line">       |                       +--rw name           string</span><br><span class="line">       +--rw call-home &#123;(ssh-call-home or tls-call-home)&#125;?</span><br><span class="line">          +--rw netconf-client* [name]</span><br><span class="line">             +--rw name                  string</span><br><span class="line">             +--rw (transport)</span><br><span class="line">             |  +--:(ssh) &#123;ssh-call-home&#125;?</span><br><span class="line">             |  |  +--rw ssh</span><br><span class="line">             |  |     +--rw endpoints</span><br><span class="line">             |  |     |  +--rw endpoint* [name]</span><br><span class="line">             |  |     |     +--rw name       string</span><br><span class="line">             |  |     |     +--rw address    inet:host</span><br><span class="line">             |  |     |     +--rw port?      inet:port-number</span><br><span class="line">             |  |     +--rw host-keys</span><br><span class="line">             |  |     |  +--rw host-key* [name]</span><br><span class="line">             |  |     |     +--rw name           string</span><br><span class="line">             |  |     |     +--rw (<span class="built_in">type</span>)?</span><br><span class="line">             |  |     |        +--:(public-key)</span><br><span class="line">             |  |     |        |  +--rw public-key?    -&gt; /kc:keychain/p</span><br><span class="line"> rivate-keys/private-key/name</span><br><span class="line">             |  |     |        +--:(certificate)</span><br><span class="line">             |  |     |           +--rw certificate?   -&gt; /kc:keychain/p</span><br><span class="line"> rivate-keys/private-key/certificate-chains/certificate-chain/certificat</span><br><span class="line"> e &#123;ssh-x509-certs&#125;?</span><br><span class="line">             |  |     +--rw client-cert-auth &#123;ssh-x509-certs&#125;?</span><br><span class="line">             |  |        +--rw trusted-ca-certs?       -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">             |  |        +--rw trusted-client-certs?   -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">             |  +--:(tls) &#123;tls-call-home&#125;?</span><br><span class="line">             |     +--rw tls</span><br><span class="line">             |        +--rw endpoints</span><br><span class="line">             |        |  +--rw endpoint* [name]</span><br><span class="line">             |        |     +--rw name       string</span><br><span class="line">             |        |     +--rw address    inet:host</span><br><span class="line">             |        |     +--rw port?      inet:port-number</span><br><span class="line">             |        +--rw certificates</span><br><span class="line">             |        |  +--rw certificate* [name]</span><br><span class="line">             |        |     +--rw name    -&gt; /kc:keychain/private-keys/p</span><br><span class="line"> rivate-key/certificate-chains/certificate-chain/certificate</span><br><span class="line">             |        +--rw client-auth</span><br><span class="line">             |           +--rw trusted-ca-certs?       -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">             |           +--rw trusted-client-certs?   -&gt; /kc:keychain/t</span><br><span class="line"> rusted-certificates/name</span><br><span class="line">             |           +--rw cert-maps</span><br><span class="line">             |              +--rw cert-to-name* [id]</span><br><span class="line">             |                 +--rw id             uint32</span><br><span class="line">             |                 +--rw fingerprint    x509c2n:tls-fingerpr</span><br><span class="line"> int</span><br><span class="line">             |                 +--rw map-type       identityref</span><br><span class="line">             |                 +--rw name           string</span><br><span class="line">             +--rw connection-type</span><br><span class="line">             |  +--rw (connection-type)?</span><br><span class="line">             |     +--:(persistent-connection)</span><br><span class="line">             |     |  +--rw persistent!</span><br><span class="line">             |     |     +--rw idle-timeout?   uint32</span><br><span class="line">             |     |     +--rw keep-alives</span><br><span class="line">             |     |        +--rw max-wait?       uint16</span><br><span class="line">             |     |        +--rw max-attempts?   uint8</span><br><span class="line">             |     +--:(periodic-connection)</span><br><span class="line">             |        +--rw periodic!</span><br><span class="line">             |           +--rw idle-timeout?        uint16</span><br><span class="line">             |           +--rw reconnect_timeout?   uint16</span><br><span class="line">             +--rw reconnect-strategy</span><br><span class="line">                +--rw start-with?     enumeration</span><br><span class="line">                +--rw max-attempts?   uint8</span><br><span class="line"><span class="comment">##########################</span></span><br><span class="line">ietf-netconf-server features:</span><br><span class="line">	listen        (off)</span><br><span class="line">	ssh-listen    (off)</span><br><span class="line">	tls-listen    (off)</span><br><span class="line">	call-home     (off)</span><br><span class="line">	ssh-call-home (off)</span><br><span class="line">	tls-call-home (off)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module: ietf-restconf-server</span><br><span class="line">  +--rw restconf-server</span><br><span class="line">     +---u restconf-server-app-grouping</span><br><span class="line"></span><br><span class="line">  grouping restconf-server-grouping</span><br><span class="line">    +-- client-identification</span><br><span class="line">       +-- cert-maps</span><br><span class="line">          +---u x509c2n:cert-to-name</span><br><span class="line">  grouping restconf-server-listen-stack-grouping</span><br><span class="line">    +-- (transport)</span><br><span class="line">       +--:(http) &#123;http-listen&#125;?</span><br><span class="line">       |  +-- http</span><br><span class="line">       |     +-- external-endpoint</span><br><span class="line">       |     |  +-- address    inet:ip-address</span><br><span class="line">       |     |  +-- port?      inet:port-number</span><br><span class="line">       |     +-- tcp-server-parameters</span><br><span class="line">       |     |  +---u tcps:tcp-server-grouping</span><br><span class="line">       |     +-- http-server-parameters</span><br><span class="line">       |     |  +---u https:http-server-grouping</span><br><span class="line">       |     +-- restconf-server-parameters</span><br><span class="line">       |        +---u rcs:restconf-server-grouping</span><br><span class="line">       +--:(https) &#123;https-listen&#125;?</span><br><span class="line">          +-- https</span><br><span class="line">             +-- tcp-server-parameters</span><br><span class="line">             |  +---u tcps:tcp-server-grouping</span><br><span class="line">             +-- tls-server-parameters</span><br><span class="line">             |  +---u tlss:tls-server-grouping</span><br><span class="line">             +-- http-server-parameters</span><br><span class="line">             |  +---u https:http-server-grouping</span><br><span class="line">             +-- restconf-server-parameters</span><br><span class="line">                +---u rcs:restconf-server-grouping</span><br><span class="line">  grouping restconf-server-callhome-stack-grouping</span><br><span class="line">    +-- (transport)</span><br><span class="line">       +--:(https) &#123;https-listen&#125;?</span><br><span class="line">          +-- https</span><br><span class="line">             +-- tcp-client-parameters</span><br><span class="line">             |  +---u tcpc:tcp-client-grouping</span><br><span class="line">             +-- tls-server-parameters</span><br><span class="line">             |  +---u tlss:tls-server-grouping</span><br><span class="line">             +-- http-server-parameters</span><br><span class="line">             |  +---u https:http-server-grouping</span><br><span class="line">             +-- restconf-server-parameters</span><br><span class="line">                +---u rcs:restconf-server-grouping</span><br><span class="line">  grouping restconf-server-app-grouping</span><br><span class="line">    +-- listen! &#123;https-listen&#125;?</span><br><span class="line">    |  +-- endpoint* [name]</span><br><span class="line">    |     +-- name?                                    string</span><br><span class="line">    |     +---u restconf-server-listen-stack-grouping</span><br><span class="line">    +-- call-home! &#123;https-call-home&#125;?</span><br><span class="line">       +-- restconf-client* [name]</span><br><span class="line">          +-- name?                 string</span><br><span class="line">          +-- endpoints</span><br><span class="line">          |  +-- endpoint* [name]</span><br><span class="line">          |     +-- name?                                      string</span><br><span class="line">          |     +---u restconf-server-callhome-stack-grouping</span><br><span class="line">          +-- connection-type</span><br><span class="line">          |  +-- (connection-type)</span><br><span class="line">          |     +--:(persistent-connection)</span><br><span class="line">          |     |  +-- persistent!</span><br><span class="line">          |     +--:(periodic-connection)</span><br><span class="line">          |        +-- periodic!</span><br><span class="line">          |           +-- period?         uint16</span><br><span class="line">          |           +-- anchor-time?    yang:date-and-time</span><br><span class="line">          |           +-- idle-timeout?   uint16</span><br><span class="line">          +-- reconnect-strategy</span><br><span class="line">             +-- start-with?     enumeration</span><br><span class="line">             +-- max-attempts?   uint8</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module: ietf-netconf-notifications</span><br><span class="line"></span><br><span class="line">  notifications:</span><br><span class="line">    +---n netconf-config-change</span><br><span class="line">    |  +--ro changed-by</span><br><span class="line">    |  |  +--ro (server-or-user)</span><br><span class="line">    |  |     +--:(server)</span><br><span class="line">    |  |     |  +--ro server?   empty</span><br><span class="line">    |  |     +--:(by-user)</span><br><span class="line">    |  |        +--ro username       string</span><br><span class="line">    |  |        +--ro session-id     ietf-netconf:session-id-or-zero-type</span><br><span class="line">    |  |        +--ro <span class="built_in">source</span>-host?   ietf-inet-types:ip-address</span><br><span class="line">    |  +--ro datastore?    enumeration &lt;running&gt;</span><br><span class="line">    |  +--ro edit*</span><br><span class="line">    |     +--ro target?      instance-identifier</span><br><span class="line">    |     +--ro operation?   ietf-netconf:edit-operation-type</span><br><span class="line">    +---n netconf-capability-change</span><br><span class="line">    |  +--ro changed-by</span><br><span class="line">    |  |  +--ro (server-or-user)</span><br><span class="line">    |  |     +--:(server)</span><br><span class="line">    |  |     |  +--ro server?   empty</span><br><span class="line">    |  |     +--:(by-user)</span><br><span class="line">    |  |        +--ro username       string</span><br><span class="line">    |  |        +--ro session-id     ietf-netconf:session-id-or-zero-type</span><br><span class="line">    |  |        +--ro <span class="built_in">source</span>-host?   ietf-inet-types:ip-address</span><br><span class="line">    |  +--ro added-capability*      ietf-inet-types:uri</span><br><span class="line">    |  +--ro deleted-capability*    ietf-inet-types:uri</span><br><span class="line">    |  +--ro modified-capability*   ietf-inet-types:uri</span><br><span class="line">    +---n netconf-session-start</span><br><span class="line">    |  +--ro username       string</span><br><span class="line">    |  +--ro session-id     ietf-netconf:session-id-or-zero-type</span><br><span class="line">    |  +--ro <span class="built_in">source</span>-host?   ietf-inet-types:ip-address</span><br><span class="line">    +---n netconf-session-end</span><br><span class="line">    |  +--ro username              string</span><br><span class="line">    |  +--ro session-id            ietf-netconf:session-id-or-zero-type</span><br><span class="line">    |  +--ro <span class="built_in">source</span>-host?          ietf-inet-types:ip-address</span><br><span class="line">    |  +--ro killed-by?            ietf-netconf:session-id-type</span><br><span class="line">    |  +--ro termination-reason    enumeration</span><br><span class="line">    +---n netconf-confirmed-commit</span><br><span class="line">       +--ro username         string</span><br><span class="line">       +--ro session-id       ietf-netconf:session-id-or-zero-type</span><br><span class="line">       +--ro <span class="built_in">source</span>-host?     ietf-inet-types:ip-address</span><br><span class="line">       +--ro confirm-event    enumeration</span><br><span class="line">       +--ro timeout?         uint32</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module: ietf-system</span><br><span class="line">  +--rw system</span><br><span class="line">  |  +--rw contact?          string</span><br><span class="line">  |  +--rw hostname?         ietf-inet-types:domain-name</span><br><span class="line">  |  +--rw location?         string</span><br><span class="line">  |  +--rw clock</span><br><span class="line">  |  |  +--rw (timezone)?</span><br><span class="line">  |  |     +--:(timezone-utc-offset)</span><br><span class="line">  |  |        +--rw timezone-utc-offset?   int16</span><br><span class="line">  |  +--rw dns-resolver</span><br><span class="line">  |     +--rw search*    ietf-inet-types:domain-name</span><br><span class="line">  |     +--rw server* [name]</span><br><span class="line">  |     |  +--rw name          string</span><br><span class="line">  |     |  +--rw (transport)</span><br><span class="line">  |     |     +--:(udp-and-tcp)</span><br><span class="line">  |     |        +--rw udp-and-tcp</span><br><span class="line">  |     |           +--rw address    ietf-inet-types:ip-address</span><br><span class="line">  |     +--rw options</span><br><span class="line">  |        +--rw timeout?    uint8 &lt;5&gt;</span><br><span class="line">  |        +--rw attempts?   uint8 &lt;2&gt;</span><br><span class="line">  +--ro system-state</span><br><span class="line">     +--ro platform</span><br><span class="line">     |  +--ro os-name?      string</span><br><span class="line">     |  +--ro os-release?   string</span><br><span class="line">     |  +--ro os-version?   string</span><br><span class="line">     |  +--ro machine?      string</span><br><span class="line">     +--ro clock</span><br><span class="line">        +--ro current-datetime?   ietf-yang-types:date-and-time</span><br><span class="line">        +--ro boot-datetime?      ietf-yang-types:date-and-time</span><br><span class="line"></span><br><span class="line">  rpcs:</span><br><span class="line">    +---x <span class="built_in">set</span>-current-datetime</span><br><span class="line">    |  +---- input</span><br><span class="line">    |     +---w current-datetime    ietf-yang-types:date-and-time</span><br><span class="line">    +---x system-restart</span><br><span class="line">    +---x system-shutdown</span><br><span class="line">&gt; feature ietf-system </span><br><span class="line">ietf-system features:</span><br><span class="line">	radius                (off)</span><br><span class="line">	authentication        (off)</span><br><span class="line">	<span class="built_in">local</span>-users           (off)</span><br><span class="line">	radius-authentication (off)</span><br><span class="line">	ntp                   (off)</span><br><span class="line">	ntp-udp-port          (off)</span><br><span class="line">	timezone-name         (off)</span><br><span class="line">	dns-udp-tcp-port      (off)</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>restconf</category>
      </categories>
      <tags>
        <tag>restconf</tag>
      </tags>
  </entry>
  <entry>
    <title>Streaming Tech</title>
    <url>/2019/12/01/Streaming-Tech/</url>
    <content><![CDATA[<div class="note default">
            <p>因为这周在Tech Forum的Presentation，查找了很多关于Streaming的资料，特别是关于协议的选择，还是学到了很多知识的。这篇Blog一部分是当时准备讲稿的留存，另一部分是之后的完善。因为Bitmovin和WOWZA他们的Blog和Report的质量都相当高，所以这篇某种意义上其只是拾人牙慧的收集整理而已。</p>
          </div>

<a id="more"></a>
<h2 id="Streaming-System"><a href="#Streaming-System" class="headerlink" title="Streaming System"></a>Streaming System</h2><ul>
<li><a href="https://www.wowza.com/blog/complete-guide-to-live-streaming" target="_blank" rel="noopener">WOWZA’s The Complete Guide To LIVE STREAMING</a>, [[pdf version]</li>
</ul>
<p><img src="image-20191127131654775.png" alt="image-20191127131654775"></p>
<p>一个常规的直播系统（仅考虑音视频内容相关）有以下部分构成：</p>
<ul>
<li>采集端：采集音视频、前处理、编码、封装、推流到服务端</li>
<li>服务端：转码、推送到边缘端、CDN</li>
<li>客户端：拉流、解码播放</li>
<li>一般来说，在采集端选择RTMP之类的传统协议推流到媒体服务器，转码后，用基于HTTP的技术推给客户端。</li>
</ul>
<h2 id="Streaming-Types"><a href="#Streaming-Types" class="headerlink" title="Streaming Types"></a>Streaming Types</h2><p>流媒体的解决方案主要与延迟要求相关，不同应用场景对延迟要求不同，极大影响了实现的技术构成。</p>
<p>应用按延迟要求分类：</p>
<ul>
<li>点播：对延迟没有要求</li>
<li>直播<ul>
<li>普通直播：延迟要求低</li>
<li>体育赛事直播：延迟要求较高，与广播延迟在同一级别</li>
<li>互动直播：延迟要求高</li>
</ul>
</li>
<li>电话会议：延迟要求最严格</li>
<li>来自EX MACHINA的一张图</li>
</ul>
<p><img src="0_sjCFsr2rLPitGrka.png" alt="0_sjCFsr2rLPitGrka"></p>
<h2 id="Streaming-Protocols"><a href="#Streaming-Protocols" class="headerlink" title="Streaming Protocols"></a>Streaming Protocols</h2><ul>
<li><p>这篇博客基本都谈到了，但是不是特别详细：<a href="https://www.wowza.com/blog/streaming-protocols" target="_blank" rel="noopener">Streaming Protocols: Everything You Need to Know</a></p>
</li>
<li><p>协议延迟对比图，来自<a href="https://www.wowza.com/blog/complete-guide-to-live-streaming" target="_blank" rel="noopener">WOWZA</a></p>
</li>
</ul>
<p><img src="latency-continuum-with-protocols-1140x638.png" alt="img"></p>
<h3 id="Traditional-Stateful-Streaming-Protocols"><a href="#Traditional-Stateful-Streaming-Protocols" class="headerlink" title="Traditional Stateful Streaming Protocols"></a>Traditional Stateful Streaming Protocols</h3><h4 id="RTMP-Real-Time-Messaging-Protocol"><a href="#RTMP-Real-Time-Messaging-Protocol" class="headerlink" title="RTMP (Real-Time Messaging Protocol)"></a>RTMP (<em>Real-Time Messaging Protocol</em>)</h4><ul>
<li><p>将音视频文件分拆成小包，基于TCP传输。</p>
</li>
<li><p>是Adobe 的私有协议，Adobe暂停了对FLV与RTMP标准的更新</p>
</li>
<li><p>一般传输的是 flv，f4v 格式流</p>
</li>
<li><p>RTMP+flv的组合对Codec有限制，只支持到h.264</p>
<ul>
<li>FLV不兼容hevc，在FLV规范扩展中加入了hevc支持</li>
<li>hevc rtmp+flv 推流, 金山修改的ffmpeg：<a href="https://github.com/ksvc/FFmpeg" target="_blank" rel="noopener">https://github.com/ksvc/FFmpeg</a> （改动很小，没有当前版本的改动但是应该不难，但是这个repo已经不再维护了）</li>
<li><a href="https://blog.csdn.net/vn9PLgZvnPs1522s82g/article/details/79063377" target="_blank" rel="noopener">FFmpeg代码导读——HEVC在RTMP中的扩展</a></li>
<li>为了减少国际上不必要的不兼容性麻烦，官方FFmpeg并不会对FLV与RTMP中扩展HEVC进行支持。</li>
<li>添加hevc支持的NRM：<a href="https://github.com/adwpc/nginx-rtmp-module" target="_blank" rel="noopener">https://github.com/adwpc/nginx-rtmp-module</a></li>
</ul>
</li>
<li><p>RTMP根本无法应对当今的贡献挑战。（参考<a href="https://www.haivision.com/blog/live-video-streaming/alternatives-rtmp-getting-streams-internet/" target="_blank" rel="noopener">alternatives-rtmp-getting-streams-internet</a>）原因如下：</p>
<ul>
<li>对RTMP的支持正在减弱，CDN 正在淘汰RTMP入口点，转而使用HLS和MPEG-DASH</li>
<li>RTMP 不支持 <a href="https://www.haivision.com/resources/streaming-video-definitions/hevc-h-265/" target="_blank" rel="noopener">HEVC</a> 编码的流，当然更不可能支持AV1。</li>
<li>RTMP 无法优雅地支持高分辨率以及VR，360视频等，原因有：<ul>
<li>缺乏HEVC等高级Codec支持。</li>
<li>由于带宽限制，RTMP无法以高比特率使用 。</li>
</ul>
</li>
<li>RTMP 使用TCP端口，通过防火墙不便。</li>
<li>RTMP 遇到安全性，多语言支持和广告插入支持方面的问题。</li>
</ul>
</li>
</ul>
<h4 id="RTSP-Real-Time-Streaming-Protocol"><a href="#RTSP-Real-Time-Streaming-Protocol" class="headerlink" title="RTSP (Real Time Streaming Protocol)"></a>RTSP (<em>Real Time Streaming Protocol</em>)</h4><ul>
<li>网络控制协议，专为娱乐和通信系统的使用，以控制流媒体服务器该协议用于在端点之间建立和控制媒体会话。媒体服务器的客户端发出VHS样式的命令，例如<em>播放</em>，<em>录制</em>和<em>暂停</em>，以促进对从服务器到客户端（视频点播）或从客户端到服务器（语音录制）的媒体流进行实时控制。（不是很懂，可能要看一点具体的才知道）</li>
<li>RTSP标准由IETF制定，1998年发布了<a href="https://tools.ietf.org/html/rfc2326" target="_blank" rel="noopener">RFC 2326</a>，2016年发布了RTSP 2.0 <a href="https://tools.ietf.org/html/rfc7826" target="_blank" rel="noopener">RFC 7826</a>, RTSP 2.0给予RTSP 1.0但是不向后兼容。</li>
<li>RTSP只是作为协议，具体的RTSP server实现使用 <a href="https://en.wikipedia.org/wiki/Real-time_Transport_Protocol" target="_blank" rel="noopener">Real-time Transport Protocol</a> (RTP) 和 <a href="https://en.wikipedia.org/wiki/RTCP" target="_blank" rel="noopener">Real-time Control Protocol</a> (RTCP) 实现媒体流的交付。RTP和RTCP也是IETF系列。<ul>
<li>RTP基于UDP，用于媒体流（音视频）的传输。</li>
<li>RTCP作为控制流用于监控传输状态、QOS及同步。</li>
</ul>
</li>
<li>RTSP是一种协议，允许创建流会话并配置RTP传递的详细信息，是控制协议。RTP是具体打包音频和视频帧并将其发送到客户端的协议。</li>
<li>作为标准，RTSP支持可以用<a href="https://tools.ietf.org/html/rfc4566" target="_blank" rel="noopener">SDP</a> (Session Description Protocol) 描述的所有视频格式。<ul>
<li>所以问题在于特定RTSP服务器实现是否支持所有这些格式</li>
<li>SDP对视频格式的支持性</li>
</ul>
</li>
<li>整体感觉是RTSP现在在直播上用的比较少，并不清楚RTSP 2.0的使用。</li>
</ul>
<h3 id="New-Technologies"><a href="#New-Technologies" class="headerlink" title="New Technologies"></a>New Technologies</h3><h4 id="SRT-Secure-Reliable-Transport"><a href="#SRT-Secure-Reliable-Transport" class="headerlink" title="SRT (Secure Reliable Transport)"></a>SRT (<em>Secure Reliable Transport</em>)</h4><p>由Haivision 和 Wowza共同创建，并于2017开源。SRT通过动态适应传输端点之间的实时网络状况，优化了跨不可预测的网络（例如Internet）的流传输性能。这有助于最小化抖动和带宽变化的影响，而纠错机制有助于最大程度地减少数据包丢失。</p>
<p>它具备以下特点：</p>
<ul>
<li><p>编解码器无关</p>
</li>
<li><p>旨在解决视频在公共互联网（网络质量不好）的分发挑战</p>
</li>
<li><p>安全方面：SRT支持AES加密，保障端到端的视频传输安全;</p>
</li>
<li><p>可靠性方面：SRT通过前向纠正技术(FEC)保证传输的稳定性;</p>
</li>
<li><p>低延迟方面：SRT底层使用UDT协议，UDT协议是一个老牌的基于UDP的可靠传输协议，当然原生的UDT传输延迟是比较高的，SRT在此基础上做了不少的拥塞控制策略的相关优化以降低传输延时。</p>
</li>
</ul>
<p>SRT协议的缺陷：</p>
<ul>
<li>协议复杂度较高</li>
<li>丢包场景下速度退避较大</li>
</ul>
<h4 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h4><ul>
<li><p><a href="https://webrtc.org" target="_blank" rel="noopener">https://webrtc.org</a></p>
</li>
<li><p>用于视频会议</p>
</li>
<li><p>基于Web</p>
</li>
</ul>
<h3 id="HTTP-Based-Adaptive-Streaming-Protocols"><a href="#HTTP-Based-Adaptive-Streaming-Protocols" class="headerlink" title="HTTP-Based Adaptive Streaming Protocols"></a>HTTP-Based Adaptive Streaming Protocols</h3><p>所有现有的自适应HTTP流技术，例如专有的 <strong>Adobe HTTP动态流（HDS）</strong>，<strong><a href="http://bitmovin.com/apple-http-live-streaming-hls/" target="_blank" rel="noopener">Apple HTTP实时流（HLS）</a></strong>，<strong><a href="http://bitmovin.com/microsoft-smooth-streaming-mss/" target="_blank" rel="noopener">Microsoft平滑流（MSS）</a></strong>，以及唯一的国际标准化解决方案 <strong><a href="http://bitmovin.com/dynamic-adaptive-streaming-http-mpeg-dash/" target="_blank" rel="noopener">MPEG动态HTTP自适应流（MPEG-DASH）</a></strong> 遵循几乎相同的原则。</p>
<p>基本思想是生成相同内容的多个版本（例如，不同的比特率或空间分辨率），并将这些版本划分为片段（例如，两秒钟）。片段在Web服务器上提供，可以通过与HTTP标准兼容的方式下载GET请求。通常，不同版本之间的关系由清单描述，该清单在流传输会话之前提供给客户端。清单使用HTTP统一资源定位符（URL）表示媒体内容的不同质量以及每种质量的各个部分。这种结构提供了片段与比特率（分辨率等）之间的绑定（例如，开始时间，片段的持续时间）。作为结果，在每个段的客户端都对比特率或空间分辨率进行调整，例如，如果带宽允许，客户端可以在每个段的基础上切换到更高的比特率，或者在带宽减少的情况下切换到更低的比特率。这具有几个优点，因为客户端最了解其功能，例如接收的吞吐量，延迟，设备功能（例如，屏幕分辨率）等。</p>
<ul>
<li>来自：<a href="https://bitmovin.com/mpeg-dash-vs-apple-hls-vs-microsoft-smooth-streaming-vs-adobe-hds/" target="_blank" rel="noopener">MPEG-DASH vs. Apple HLS vs. Microsoft Smooth Streaming vs. Adobe HDS</a> （这篇Bitmovin里有一个表非常棒，感谢markdown，它现在是我的了2333）</li>
</ul>
<table width="100%">
<tbody>
<tr>
<td width="30%"><strong>Feature</strong></td>
<td style="text-align: center;" width="8%"><strong>Adobe</strong> <strong>HDS</strong></td>
<td style="text-align: center;" width="7%"><a href="http://bitmovin.com/apple-http-live-streaming-hls/" target="_blank" rel="noopener"><strong>Apple</strong> <strong>HLS</strong></a></td>
<td style="text-align: center;" width="11%"><a href="http://bitmovin.com/microsoft-smooth-streaming-mss/" target="_blank" rel="noopener"><strong>MS</strong> <strong>Smooth Streaming</strong></a></td>
<td style="text-align: center;" width="8%"><a href="http://bitmovin.com/dynamic-adaptive-streaming-http-mpeg-dash/" target="_blank" rel="noopener"><strong>MPEG</strong>&#8211;<strong>DASH</strong></a></td>
</tr>
<tr>
<td>Deployment on Ordinary HTTP Servers</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Official International Standard (e.g., ISO/IEC MPEG)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Multiple Audio Channels (e.g., Languages, Comments, etc.)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Flexible Content Protection with Common Encryption (<a href="https://bitmovin.com/digital-rights-management-everything-to-know/" target="_blank" rel="noopener">DRM</a>)</td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Closed Captions / Subtitles</td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Efficent Ad Insertion</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Fast Channel Switching</td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Protocol Support&#8217;s multiple CDNs in parallel</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>HTML5 Support</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Support in HbbTV (version 1.5)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td><a href="http://bitmovin.com/mpeg-dash-hevc-encoding/" target="_blank" rel="noopener">HEVC Ready (UHD/4K)</a></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Agnostic to Video <a href="https://bitmovin.com/get-ready-for-a-multi-codec-world/" target="_blank" rel="noopener">Codecs</a></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Agnostic to Audio Codecs</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>ISO Base Media File Format Segments</td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>MPEG-2 TS Segments</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Segment Format Extensions beyond MPEG</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Support for multiplexed (Audio + Video) Content</td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Support for non-multiplexed (separate Audio, Video) Content</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Definition of Quality Metrics</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Client Logging &amp; Reporting</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Client Failover</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Remove and add Quality Levels during Streaming</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Multiple Video Views</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></td>
</tr>
<tr>
<td>Efficient Trick Modes</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><span style="line-height: 1.5;"><img class="size-full wp-image-7418 aligncenter" src="https://bitmovin.com/wp-content/uploads/2016/04/tick_green_sm2.png" alt="tick_green_sm2" width="40" height="40" /></span></td>
</tr>
</tbody>
</table>

<h4 id="HLS-HTTP-Live-Streaming"><a href="#HLS-HTTP-Live-Streaming" class="headerlink" title="HLS (HTTP Live Streaming)"></a>HLS (<em>HTTP Live Streaming</em>)</h4><ul>
<li><p>HLS 的延时包含了 TCP 握手、m3u8 文件下载与解析、ts 文件下载与解析等多个步骤。可以缩短列表的长度和单个 ts 文件的大小来降低延迟，极致来说可以缩减列表长度为 1，并且 ts 的时长为 1s，但是这样会造成请求次数增加，增大服务器压力，当网速慢时回造成更多的缓冲，所以苹果官方推荐的 ts 时长时 10s，所以这样就会大改有 30s 的延迟。</p>
</li>
<li><p>HLS 由两部分构成，一个是 .m3u8 文件，一个是 .ts 视频文件；每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，video 标签会解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 CDN 上。 HLS 协议视频支持 H.264 格式的编码，支持的音频编码方式是 AAC 编码。</p>
</li>
<li><p>以下是<code>.m3u8</code>文件的示例，处于对ABR的支持，如果HLS编多个不同分辨率和码率的流，会有两级目录：<code>master.m3u8</code>定义了子流的各项信息，子流中才是具体的<code>.ts</code>段信息。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master.m3u8</span></span><br><span class="line"><span class="comment">#EXTM3U</span></span><br><span class="line"><span class="comment">#EXT-X-VERSION:6</span></span><br><span class="line"><span class="comment">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2855600,CODECS="avc1.4d001f,mp4a.40.2",RESOLUTION=960x540</span></span><br><span class="line">live/medium.m3u8</span><br><span class="line"><span class="comment">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=5605600,CODECS="avc1.640028,mp4a.40.2",RESOLUTION=1280x720</span></span><br><span class="line">live/high.m3u8</span><br><span class="line"><span class="comment">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1755600,CODECS="avc1.42001f,mp4a.40.2",RESOLUTION=640x360</span></span><br><span class="line">live/low.m3u8</span><br><span class="line"><span class="comment">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=545600,CODECS="avc1.42001e,mp4a.40.2",RESOLUTION=416x234</span></span><br><span class="line">live/cellular.m3u8</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</span></span><br><span class="line"><span class="comment">#EXTM3U</span></span><br><span class="line"><span class="comment">#EXT-X-VERSION:3</span></span><br><span class="line"><span class="comment">#EXT-X-MEDIA-SEQUENCE:58846</span></span><br><span class="line"><span class="comment">#EXT-X-TARGETDURATION:10</span></span><br><span class="line"><span class="comment">#EXTINF:10.000,</span></span><br><span class="line">cctv1hd-1574835047000.ts</span><br><span class="line"><span class="comment">#EXTINF:10.000,</span></span><br><span class="line">cctv1hd-1574835057000.ts</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="LHLS-Low-Latency-HLS"><a href="#LHLS-Low-Latency-HLS" class="headerlink" title="LHLS (Low-Latency HLS)"></a>LHLS (Low-Latency HLS)</h5><ul>
<li><p>详见：<a href="https://developer.apple.com/videos/play/wwdc2019/502/" target="_blank" rel="noopener">Introducing Low-Latency HLS</a></p>
</li>
<li><p>spec: <a href="https://developer.apple.com/documentation/http_live_streaming/protocol_extension_for_low_latency_hls" target="_blank" rel="noopener">https://developer.apple.com/documentation/http_live_streaming/protocol_extension_for_low_latency_hls</a></p>
</li>
<li><p>LHLS的主要优化在于（来自上述演讲的PPT）：</p>
<ul>
<li>Reduce Publishing Latency<ul>
<li>Partial Segments<ul>
<li>Partial segment rather than regular segment<ul>
<li>CMAF Chunks, or short TS, audio or VTT</li>
<li>Less than a full GOP</li>
</ul>
</li>
<li>Playlists update every Partial Segment</li>
<li>Publishing latency becomes the Partial Segment duration</li>
<li>Partial Segments appear in parallel to regular Segments in Playlist</li>
</ul>
</li>
<li>Partial Segments Disappear Quickly<ul>
<li>Partial Segments only at live edge of Playlist<ul>
<li>Removed once Parent Segments are established</li>
<li>Keeps Playlists small</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Optimize Discovery<ul>
<li>Optimize Segment Discovery</li>
<li>Improve Caching Behvior</li>
<li>Blocking Playlist Reload<ul>
<li>Clients ask for its next Playlist update in advance</li>
<li>Server holds request until next Segment or Partial Segment appears</li>
</ul>
</li>
</ul>
</li>
<li>Eliminate Segment Round Trip<ul>
<li>HTTP/2 is required for LHLS<ul>
<li>HTTP/2 GET response can include secondary resources</li>
</ul>
</li>
<li>Segment Push<ul>
<li>GET of Playlist also pushes new Segment</li>
</ul>
</li>
</ul>
</li>
<li>Reduce Playlist Transer Overhead<ul>
<li>Playlist Delta Updates<ul>
<li>Clients asks for Delta Update explicitly</li>
<li>Update skips the earlier part of Playlist client already has</li>
</ul>
</li>
</ul>
</li>
<li>Switch Tiers Quickly<ul>
<li>Rendition Reports<ul>
<li>Playlist updates can carry up-to-date reports on peer Playlists<ul>
<li>Last Media Sequence Number and last Partial Segment number</li>
<li>Allows client to load latest Playlist when switching bit rates</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>一点解释来自：<a href="https://www.harmonicinc.com/news-insights/blog/dash-and-hls-update-low-latency-ott-delivery/" target="_blank" rel="noopener">DASH和HLS：低延迟OTT交付的更新</a></p>
<p>与今天广泛部署和使用的HLS规范相比，新的HLS更新提供了一些显着的增强：</p>
<ul>
<li><strong>部分分段：</strong>先前的HLS规范非常简单，交付分段为6秒。低延迟HLS将提供在媒体播放列表的实时边缘传送媒体的工具，在媒体播放列表中，媒体被分成大量较小的文件，例如持续时间为250-300ms的CMAF块（很少帧，但没有完整的GOP ）。这些较小的文件称为HLS局部段。部分片段的持续时间较短，可以比其父片段更早地打包并添加到媒体播放列表。第一个部分片段可能在前一个片段发布后仅250毫秒后发布。为了避免播放列表太大，一旦部分片段比实时边缘的三个目标时长长，它们就会自动从媒体播放列表中删除。</li>
<li><strong>HTTP / 2推送段：</strong>传统上，对于每个段，HLS播放器都会轮询播放列表文件以检查是否有新的可用段，然后使用第二个HTTP请求来检索媒体段。当需要低延迟交付时，这些传统HTTP请求的开销在延迟方面会成为问题。苹果公司的新规范使用HTTP / 2推送来推送较短的媒体“部分”，以响应播放列表请求。但是，播放列表必须非常频繁地获取，因为每秒最多可能会发生3-4次。</li>
<li><strong>阻止播放列表请求：</strong>在媒体播放列表更新中，播放器可以添加查询参数以指定其希望播放列表响应包含将来的片段。然后，服务器可以保留该请求（阻止），直到包含该片段的播放列表的版本可用为止。客户端还可以要求服务器将指示的片段与播放列表响应一起推送到客户端。阻止播放列表重载可消除轮询，而服务器推送可消除请求往返。</li>
<li><strong>播放列表增量更新：</strong>对于长时间运行的事件，播放列表大小可能会成为问题。随着更短的片段和片段的引入，这将变得更加关键，因为将发出更频繁的播放列表更新请求。在此HLS更新中，Apple提供了一种生成“增量”播放列表的方法，这意味着播放列表仅包含完整播放列表中的某些片段。这允许玩家一次请求完整的播放列表，将其存储并使用较小的增量播放列表添加到其中，该播放列表仅包含最新的几个片段以及播放列表顶部的低延迟“部分”。</li>
<li><strong>更快的比特率切换：</strong>通过低延迟交付，播放器对网络状况变化做出反应的时间更少。低延迟HLS允许特定格式的播放列表响应包含有关另一个格式中可用的最新块和段的信息。这样就可以跳入另一个表示形式，而无需在启动切换之前发出完整的播放列表请求。</li>
</ul>
</li>
</ul>
<h4 id="MPEG-DASH-Dynamic-Adaptive-Streaming-over-HTTP-ISO-IEC-23009-1"><a href="#MPEG-DASH-Dynamic-Adaptive-Streaming-over-HTTP-ISO-IEC-23009-1" class="headerlink" title="MPEG-DASH (Dynamic Adaptive Streaming over HTTP,  ISO/IEC 23009-1)"></a>MPEG-DASH (<em>Dynamic Adaptive Streaming over HTTP,  ISO/IEC 23009-1</em>)</h4><ul>
<li>Netflix使用了MPEG-DASH</li>
<li>MPEG-DASH是和编码标准无关的</li>
<li>MPEG-DASH是MPEG开发的，与其他三个以厂商为中心的解决方案对比，相当于是国际标准</li>
<li><a href="https://bitmovin.com/dynamic-adaptive-streaming-http-mpeg-dash/" target="_blank" rel="noopener">MPEG-DASH (Dynamic Adaptive Streaming over HTTP)</a>这篇博客已经讲的很好了，我觉得我没有必要献丑了，再贴一些MPEG-DASH的资源就罢。</li>
</ul>
<h4 id="HDS-HTTP-Dynamic-Streaming"><a href="#HDS-HTTP-Dynamic-Streaming" class="headerlink" title="HDS (HTTP Dynamic Streaming)"></a>HDS (<em>HTTP Dynamic Streaming</em>)</h4><ul>
<li>Adobe的技术，没怎么看到有用的。</li>
</ul>
<h4 id="MSS-Microsoft-Smooth-Streaming"><a href="#MSS-Microsoft-Smooth-Streaming" class="headerlink" title="MSS (Microsoft Smooth Streaming)"></a>MSS (<em>Microsoft Smooth Streaming</em>)</h4><ul>
<li>感觉是过气技术了。</li>
</ul>
<h4 id="CMAF-Common-Media-Application-Format"><a href="#CMAF-Common-Media-Application-Format" class="headerlink" title="CMAF (Common Media Application Format)"></a>CMAF (<em>Common Media Application Format</em>)</h4><ul>
<li><p>来自：<a href="https://www.wowza.com/blog/what-is-cmaf" target="_blank" rel="noopener">What is CMAF?</a></p>
</li>
<li><p>Purpose:</p>
<ul>
<li>Use a common media format for video streams — thereby reducing costs, complexity, and latency.</li>
</ul>
</li>
<li><p>Goals:</p>
<ul>
<li>Eliminate investments associated with encoding and storing multiple copies of the same content.</li>
<li>Simplify workflows and improve CDN efficiency.</li>
<li>Decrease video lag by with chunked-encoded and chunked-transfer CMAF.</li>
</ul>
</li>
<li><p>Timeline:</p>
<ul>
<li><strong>February 2016:</strong> <strong>Apple and Microsoft</strong> proposed CMAF to the Moving Pictures Expert Group (MPEG).</li>
<li><strong>June 2016:</strong> Apple announced support of fMP4 format.</li>
<li><strong>July 2017:</strong> Specifications finalized.</li>
<li><strong>January 2018:</strong> CMAF standard officially published.</li>
</ul>
</li>
<li><p>这样，对于apple的HLS，现在有两个低延迟方案了：LHLS和CMAF</p>
</li>
<li><p>参考：<a href="https://www.wowza.com/blog/low-latency-cmaf-chunked-transfer-encoding" target="_blank" rel="noopener">Low-Latency CMAF for Live Streaming at Scale</a></p>
</li>
<li><p>HLS之前使用的是.ts格式，使用CMAF会转到.mp4，有助于降低成本，提高CDN效率</p>
</li>
</ul>
<p><img src="CMAF-HLS-DASH-graph.png" alt="img"></p>
<ul>
<li>CMAF本身是一种媒体格式，它的低延迟通过两个行为实现<ul>
<li>chunked encoding (分块编码)</li>
<li>chunked transfer encoding (分块传输编码)</li>
</ul>
</li>
<li>比较具体的CMAF blog：<a href="https://blogs.akamai.com/2018/10/best-practices-for-ultra-low-latency-streaming-using-chunked-encoded-and-chunk-transferred-cmaf.html" target="_blank" rel="noopener">BEST PRACTICES FOR ULTRA-LOW LATENCY STREAMING USING CHUNKED-ENCODED AND CHUNK-TRANSFERRED CMAF</a></li>
</ul>
<h3 id="How-to-choose-Steaming-Protols"><a href="#How-to-choose-Steaming-Protols" class="headerlink" title="How to choose Steaming Protols"></a>How to choose Steaming Protols</h3><ul>
<li><p>协议基于TCP / UDP可以反映一些信息：</p>
<ul>
<li>基于TCP的协议更可靠，更消耗资源？</li>
<li>基于UDP更注重传输实时性</li>
</ul>
</li>
<li><p>协议基于HTTP意味着：</p>
<ul>
<li>从HTTP走流量，无需担心端口、防火墙等问题</li>
<li>可以使用HTTP cache</li>
<li>移动端无需APP，兼容HTML5的浏览器就可以看</li>
<li>将多个帧一起打包传输，实时性欠缺</li>
<li>在CDN上的伸缩性好</li>
</ul>
</li>
<li><p>因此，在实际应用中，一般在采集端推流到媒体服务器会使用一些传统的协议，RTMP、RTSP，或者是SRT（也有很多厂商自己定制的私有协议），之后的分发会使用给予HTTP的自适应流媒体技术。</p>
</li>
<li><p>想要低延迟可以定制化私有协议。</p>
</li>
</ul>
<h2 id="AV1-Streaming"><a href="#AV1-Streaming" class="headerlink" title="AV1 Streaming"></a>AV1 Streaming</h2><h3 id="AV1-Current-Status"><a href="#AV1-Current-Status" class="headerlink" title="AV1 Current Status"></a>AV1 Current Status</h3><ul>
<li>编码复杂度高，编码优化不够完善：慢！<ul>
<li>只有较强的服务器上可以实时编码1080p及以上</li>
<li>因此，很难用于极端低延迟条件的应用场景，不考虑这一使用场景</li>
</ul>
</li>
<li>不应该用于极端低延迟应用场景<ul>
<li>此类应用场景，如电话会议，参与人数较少，（这类场景没有那么流量成本敏感？）</li>
<li>AV1既然有高复杂度的特性，使用AV1的主要目的在于传输同等质量的视频时，降低比特率，降低带宽的使用，从而降低流量成本。</li>
<li>因此AV1的用武之地不在这里。</li>
</ul>
</li>
<li>协议支持不够完善<ul>
<li>MPEG-DASH是Codec无关的协议，可以使用</li>
<li>HLS限制Codec，似乎还没支持AV1，但Apple也是AOM的成员，后续肯定会加入AV1.</li>
<li>RTMP不能支持（也不应该考虑了）</li>
</ul>
</li>
<li>一般延迟要求的直播10s，差不多是HLS和DASH的延迟范围，可以达到。</li>
<li>当前实现：pc: RTSP+x264 -&gt; server: dash+svtav1 -&gt; client</li>
</ul>
<h3 id="AV1-Prospect"><a href="#AV1-Prospect" class="headerlink" title="AV1 Prospect"></a>AV1 Prospect</h3><ul>
<li>from <strong>twitch</strong>: we are hoping <strong>2022-2023 we are going to release AV1 for the head content</strong>. But for the head content, we will continue to stream dual-format, AV1, H.264. But for the tail content, we are hoping towards five years from now to AV1, whole eco, every five-year-old device supports AV1. Then, we will be switching to AV1 100%.</li>
<li>因为免版税，又有Netflix、YouTube等大厂，AV1未来在互联网媒体肯定是最重要的编码标准。</li>
</ul>
<h3 id="AV1-Streaming-Implement"><a href="#AV1-Streaming-Implement" class="headerlink" title="AV1 Streaming Implement"></a>AV1 Streaming Implement</h3><ul>
<li><p>Web server: Nginx</p>
</li>
<li><p>Codec: libx264, libsvt_av1</p>
</li>
<li><p>Server: Intel Xeon Platinum 8280</p>
</li>
<li><p>Protocol: RTSP, MPEG-DASH (RTSP can be replaced by RTMP or SRT)</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pc ------------&gt; server -------------------&gt; client</span></span><br><span class="line"><span class="comment">#	  rtsp+h264  |transcode| dash+libsvt_av1</span></span><br><span class="line"><span class="comment"># pc side</span></span><br><span class="line">ffmpeg -s 1920x1080 -r 30 -f x11grab -i :0.0+0,0 \</span><br><span class="line">-c:v libx264 -tune zerolatency -preset ultrafast -crf 0 \</span><br><span class="line">-f rtsp -muxdelay 0 -rtsp_transport tcp     \</span><br><span class="line">rtsp://your-serverIP/live.sdp</span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="comment"># server side</span></span><br><span class="line">ffmpeg -rtsp_flags listen -i rtsp://your-serverIP:8888 \</span><br><span class="line">-map 0 -map 0\</span><br><span class="line">-c:a aac -c:v libsvt_av1 -preset 8 -forced-idr 1  \</span><br><span class="line">-b:v:0 5000k -s:v:0 1920x1080  \</span><br><span class="line">-b:v:1 2000k -s:v:1 1280x720  \</span><br><span class="line">-sc_threshold 0 -b_strategy 0 -ar:a:1 22050 \</span><br><span class="line">-use_timeline 1 -use_template 1  -window_size 5 \</span><br><span class="line">-adaptation_sets <span class="string">"id=0,streams=v id=1,streams=a"</span> \</span><br><span class="line">-hls_playlist 1 -seg_duration 2 -streaming 1   \</span><br><span class="line">-dash_segment_type 2 -strict experimental -lhls 1  \</span><br><span class="line">-f dash manifest.mpd</span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="comment"># play</span></span><br><span class="line">mpv http://your-serverIP/master.m3u8</span><br></pre></td></tr></table></figure>

<h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h3><ul>
<li><p>感觉Bitmovin和WOWZA两家的blog质量都很高，尤其是他们出的报告简直太棒了。</p>
<ul>
<li><a href="https://go.bitmovin.com/video-developer-report-2019" target="_blank" rel="noopener">BITMOVIN 2019 VIDEO DEVELOPER REPORT</a></li>
<li><a href="https://www.wowza.com/blog/2019-video-streaming-latency-report" target="_blank" rel="noopener">WOWZA 2019 Video Streaming Latency Report</a></li>
</ul>
</li>
</ul>
<h3 id="Some-Protocol-Implements"><a href="#Some-Protocol-Implements" class="headerlink" title="Some Protocol Implements"></a>Some Protocol Implements</h3><ul>
<li><a href="https://github.com/AirenSoft/OvenMediaEngine" target="_blank" rel="noopener">OvenMediaEngine</a></li>
<li><a href="https://github.com/ossrs/srs" target="_blank" rel="noopener">Simple-RTMP-Server</a></li>
<li><a href="https://github.com/Haivision/srt" target="_blank" rel="noopener">SRT</a></li>
<li><a href="https://github.com/arut/nginx-rtmp-module" target="_blank" rel="noopener">nginx-rtmp-module</a>; <a href="https://github.com/aileone/nginx-rtmp-module" target="_blank" rel="noopener">hevc support repo</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>media</category>
      </categories>
      <tags>
        <tag>media</tag>
        <tag>streaming</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch环境</title>
    <url>/2019/09/19/pytorch%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<div class="note default">
            <p>其实是virtualenv环境。</p><p>选择virtualenv的理由：conda有些包没有，用这个更加原生一点（很喜欢requirement.txt的方式）。而且conda真不好用。</p>
          </div>

<a id="more"></a>

<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv --python=python3 venv</span><br></pre></td></tr></table></figure>

<ul>
<li>要注意在virtualenv初始化的时候，使用国内源可能会有连接问题，需要切换到官方源</li>
</ul>
<h3 id="jupyter-notenook-ipykernel-install"><a href="#jupyter-notenook-ipykernel-install" class="headerlink" title="jupyter notenook ipykernel install"></a>jupyter notenook ipykernel install</h3><ul>
<li>在jupyter notebook里面使用虚拟环境</li>
</ul>
<p>第一步：安装Jupyter Notebook</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; python2 &gt;</span><br><span class="line">pip install jupyter</span><br><span class="line">&lt; python3 &gt;</span><br><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure>

<p>第二步：进入你的 Virtualenv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source venv&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>

<p>第三步：安装 IPykernel</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; python2 &gt;</span><br><span class="line">pip install ipykernel</span><br><span class="line">&lt; python3 &gt;</span><br><span class="line">pip3 install ipykernel</span><br></pre></td></tr></table></figure>

<p>第四步：ipykernel install</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; python2 &gt;</span><br><span class="line">python2 -m ipykernel install --user --name&#x3D;tensorflow3 </span><br><span class="line">&lt; python3 &gt;</span><br><span class="line">python3 -m ipykernel install --user --name&#x3D;tensorflow3</span><br></pre></td></tr></table></figure>

<h3 id="相关事项"><a href="#相关事项" class="headerlink" title="相关事项"></a>相关事项</h3><ul>
<li>virtualenv相当于在venv目录里面建立了新的python环境，所有安装的包之类的会限制在venv里面，所以想要删除环境其实直接全部删除就可以了。</li>
<li>为了记忆安装过什么包，除了使用<code>pip list</code>以外，也可以考虑将它们记录在<code>requirement.txt</code>里面，这样，需要分享的时候可以方便的用<code>pip install -r requirement.txt</code>来安装包。</li>
</ul>
<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR: Could not install packages due to an EnvironmentError: Missing dependencies <span class="keyword">for</span> SOCKS support.</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> all_proxy</span><br><span class="line"><span class="built_in">unset</span> ALL_PROXY</span><br><span class="line">pip install pysocks</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>sharelatex本地部署小记</title>
    <url>/2019/05/05/sharelatex%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<div class="note default">
            <p>上次参考教程<a href="https://haoyu.love/blog640.html#more-640" target="_blank" rel="noopener">本地部署 ShareLatex</a>成功在本地部署sharelatex后，大概是因为没有<code>docker commit</code>，几周之后因为机子一次重启，docker sharelatex恢复到了修改之前的样子，这次再修的时候顺便记录一下。</p>
          </div>

<a id="more"></a>

<h2 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h2><h3 id="docker-compose操作"><a href="#docker-compose操作" class="headerlink" title="docker-compose操作"></a>docker-compose操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d <span class="comment">#</span></span><br><span class="line">docker-compose start</span><br><span class="line">docker-compose stop</span><br><span class="line">docker <span class="built_in">exec</span> -it sharelatex bash  <span class="comment">#进入sharelatex的bash，不是很明白-it的意思</span></span><br></pre></td></tr></table></figure>

<h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[sparta@localhost ~]$ docker commit sharelatex sharelatex/sharelatex:full-texlive-install</span><br><span class="line">sha256:36d9d07c7da2ef46b10dbe0e0d9dfc0eb5bc309b562032e76b9c45eb9a8d389b</span><br><span class="line">[sparta@localhost ~]$ docker images</span><br><span class="line">REPOSITORY              TAG                    IMAGE ID            CREATED              SIZE</span><br><span class="line">sharelatex/sharelatex   full-texlive-install   36d9d07c7da2        About a minute ago   9.54GB</span><br><span class="line">mongo                   latest                 b1c8142b3efc        3 weeks ago          410MB</span><br><span class="line">redis                   latest                 a55fbf438dfd        5 weeks ago          95MB</span><br><span class="line">sharelatex/sharelatex   latest                 8e1bae81acac        14 months ago        3.46GB</span><br></pre></td></tr></table></figure>



<h2 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h2><p>参考Linux <a href="https://blog.argcv.com/articles/4439.c" target="_blank" rel="noopener">手动安装字体</a></p>
<p>其实只要把字体放到相应目录下（一般是<code>/usr/share/fonts/</code>）然后刷新字体缓存就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">fc</span>-cache -fv <span class="comment">#刷新字体缓存</span></span><br><span class="line"><span class="built_in">fc</span>-list <span class="comment">#查看字体，可以配合grep</span></span><br></pre></td></tr></table></figure>

<h3 id="docker与主机的文件拷贝"><a href="#docker与主机的文件拷贝" class="headerlink" title="docker与主机的文件拷贝"></a>docker与主机的文件拷贝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp foo.txt mycontainer:/foo.txt <span class="comment">#主机到docker</span></span><br><span class="line">docker cp mycontainer:/foo.txt foo.txt <span class="comment">#docker到主机</span></span><br></pre></td></tr></table></figure>



<h2 id="惨痛经历"><a href="#惨痛经历" class="headerlink" title="惨痛经历"></a>惨痛经历</h2><p>自己整的时候犯傻好几次：</p>
<ul>
<li>因为电脑重启了一次，重启服务的时候sharelatex进的是没有重新安装texlive的版本（原始拉下来的），记起来没有commit的话docker似乎不能保存更改，于是得重新装一次texlive</li>
<li>然而在安装到一半的时候我<code>docker images</code>一看发现之前是commit过一次的。于是中断了texlive的下载，但是，我把docker-compose.yml的sharelatex的image指定为commit了的版本，但是还是不行。</li>
<li>于是删掉了sharelatex的image重新开始。</li>
<li>然后又犯傻了一次，如果镜像有改动，<code>docker-compose up -d</code>会重新从源拉取一次，所以，我又犯傻把安装好的texlive覆盖掉了……</li>
<li><strong>没事别<code>docker-compose up -d</code>！！！</strong></li>
</ul>
<p>还是有一个很关键的问题：在docker-compose.yml的sharelatex的image指定为commit了的版本后如何能生效？？？</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.scaleway.com/en/docs/installing-sharelatex-ubuntu/" target="_blank" rel="noopener">Installing ShareLaTeX</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray setup</title>
    <url>/2019/09/19/v2ray-setup/</url>
    <content><![CDATA[<div class="note default">
            <p>国庆前夕又严打啊，原来的代理挂了，正好尝试一下v2ray。</p>
          </div>

<a id="more"></a>

<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><ul>
<li>install via script: <a href="https://install.direct/go.sh" target="_blank" rel="noopener">https://install.direct/go.sh</a></li>
<li>config.json(default): /etc/v2ray/config.json</li>
<li>log(define in config.json): /var/log/v2ray</li>
<li>usage via service: service v2ray start</li>
</ul>
<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><ul>
<li>download client at: <a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases</a></li>
<li>write config: <a href="https://github.com/KiriKira/vTemplate" target="_blank" rel="noopener">vTemplate</a></li>
<li>start client: <code>./v2ray --config=config.json</code></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vim-plugins</title>
    <url>/2019/09/19/vim-plugins/</url>
    <content><![CDATA[<div class="note default">
            <p>一直想配一套自己的vim配置。前段时间摸鱼的时候配了一点，这里会以记录我使用的插件为主，也会顺便记点别的。</p>
          </div>

<a id="more"></a>

<h3 id="vim-资源"><a href="#vim-资源" class="headerlink" title="vim 资源"></a>vim 资源</h3><ul>
<li><a href="https://github.com/mhinz/vim-galore" target="_blank" rel="noopener">vim-galore</a> : All things vim</li>
<li><a href="https://github.com/wsdjeg/vim-galore-zh_cn" target="_blank" rel="noopener">vim-galore-zh_cn</a> : 对前者的翻译以及作者自己添加的一点经验</li>
<li><a href="https://vimawesome.com/" target="_blank" rel="noopener">VimAwesome</a> : 找插件挺不错的</li>
</ul>
<h4 id="cheating-sheets"><a href="#cheating-sheets" class="headerlink" title="cheating sheets"></a>cheating sheets</h4><ul>
<li><p>在vim里面使用<code>:help</code> 或者 <code>:help quickref</code> 也是挺好的方法</p>
</li>
<li><p>写在前面的几个最好用。</p>
<ul>
<li><p><a href="https://vim.rtorr.com/" target="_blank" rel="noopener">https://vim.rtorr.com/</a></p>
</li>
<li><p><a href="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" target="_blank" rel="noopener">https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png</a></p>
</li>
<li><p><a href="http://www.nathael.org/Data/vi-vim-cheat-sheet.svg" target="_blank" rel="noopener">http://www.nathael.org/Data/vi-vim-cheat-sheet.svg</a></p>
</li>
<li><p><a href="http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png" target="_blank" rel="noopener">http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png</a></p>
</li>
<li><p><a href="http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png" target="_blank" rel="noopener">http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><ul>
<li><a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a>: Plugin manager 轻量化，用起来挺不错的。<ul>
<li>进入vim，<code>:PlugInstall</code>命令用来安装插件。</li>
</ul>
</li>
<li><a href="https://github.com/morhetz/gruvbox" target="_blank" rel="noopener">gruvbox</a>: color scheme 感觉看着比较顺眼，自带了airline的配色挺不错的。<ul>
<li>色彩矫正：在<code>in .bashrc source &quot;$HOME/.vim/plugged/gruvbox/gruvbox_256palette.sh&quot;</code></li>
</ul>
</li>
<li><a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener">airline</a>: airline</li>
</ul>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>vim的配置文件主要是：</p>
<ul>
<li><code>.vimrc</code>作为配置文件。</li>
<li><code>.vim</code>里面会放一些插件的文件，具体应该和选用的插件管理是哪种有关。</li>
<li><code>.viminfo</code>vim自己生成的一些操作历史记录文件。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/09/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<div class="note default">
            <p>一开始看这个的原因是udpi里面用到了hyperscan，所以看得hyperscan。杂七杂八看了挺多的，记录下来的不多。能否完善也要看缘分了。</p><p>对正则表达式挺感兴趣的，可能之后会再看怎么写正则表达式。（这篇东西等于啥也没有）</p>
          </div>

<a id="more"></a>

<h2 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h2><ul>
<li><p>regrex = regular expression</p>
</li>
<li><p>hyperscan</p>
</li>
<li><p>PCRE (perl compatible regular expression)</p>
</li>
</ul>
<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><ul>
<li>克莱尼代数</li>
<li>三种运算：<ul>
<li>串接</li>
<li>选择，表示并集</li>
<li>Kleene星号*，表示包含空串闭合在字符串串接下的最小子集</li>
</ul>
</li>
<li>Kleene星号有最高优先级，接着是串接，接着是并集。如果没有歧义则可以省略括号</li>
<li>例子<ul>
<li><code>a|b*</code>表示 $\displaystyle {\varepsilon ,a,b,bb,bbb,\cdots }$</li>
<li><code>(a|b)*</code>表示由包括空串、任意数目个<em>a</em>或<em>b</em>字符组成的所有字符串的集合：${\displaystyle {\varepsilon ,a,b,aa,ab,ba,bb,aaa\cdots }}$</li>
<li><code>ab*(c|ε)</code>表示开始于一个<em>a</em>接着零或多个<em>b</em>和最后一个可选的<em>c</em>组成的字符串的集合：${\displaystyle {a,ac,ab,abc,abb,abbc\cdots }}$</li>
</ul>
</li>
<li>为了使表达式更简洁，正规表达式也定义了<code>?</code>和<code>+</code>；<code>aa*</code>等于<code>a+</code>，表示a出现至少一次；而<code>(a|ε)</code>等于<code>a?</code>，表示a出现1次或不出现。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>regrex</tag>
      </tags>
  </entry>
  <entry>
    <title>linux network tools</title>
    <url>/2019/09/19/linux-network-tools/</url>
    <content><![CDATA[<div class="note default">
            <p>某天摸鱼的时候在看<a href="https://tonydeng.github.io/sdn-handbook/" target="_blank" rel="noopener">sdn-handbook</a>，然后尝试了一下里面提到的网络工具，做了简要的汇总。（感觉是最近完成度最高的一篇了，虽然也是逐渐偷工减料）</p>
          </div>

<a id="more"></a>

<h2 id="net-tools"><a href="#net-tools" class="headerlink" title="net-tools"></a>net-tools</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install net-tools</span><br><span class="line"><span class="comment"># 包含以下工具 --难怪netstat和route返回结果一样了</span></span><br><span class="line">/bin</span><br><span class="line">/bin/netstat</span><br><span class="line">/usr/sbin</span><br><span class="line">/usr/sbin/arp</span><br><span class="line">/sbin</span><br><span class="line">/sbin/nameif</span><br><span class="line">/sbin/ipmaddr</span><br><span class="line">/sbin/plipconfig</span><br><span class="line">/sbin/ifconfig</span><br><span class="line">/sbin/route</span><br><span class="line">/sbin/mii-tool</span><br><span class="line">/sbin/iptunnel</span><br><span class="line">/sbin/rarp</span><br><span class="line">/sbin/slattach</span><br></pre></td></tr></table></figure>

<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships</p>
<h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看端口使用情况</span></span><br><span class="line">netstat -ntulp | grep port-num</span><br><span class="line">    -t (tcp) 仅显示tcp相关选项</span><br><span class="line">    -u (udp)仅显示udp相关选项</span><br><span class="line">    -n 拒绝显示别名，能显示数字的全部转化为数字</span><br><span class="line">    -l 仅列出在Listen(监听)的服务状态</span><br><span class="line">    -p 显示建立相关链接的程序名</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 除了基本用法以外，还可以查看以下内容</span></span><br><span class="line">    --route , -r</span><br><span class="line">           Display the kernel routing tables. See the description <span class="keyword">in</span> route(8) <span class="keyword">for</span> details.  netstat -r and route -e produce the same output.</span><br><span class="line">   --groups , -g</span><br><span class="line">       Display multicast group membership information <span class="keyword">for</span> IPv4 and IPv6.</span><br><span class="line">   --interfaces, -i</span><br><span class="line">       Display a table of all network interfaces.</span><br><span class="line">   --masquerade , -M</span><br><span class="line">       Display a list of masqueraded connections.</span><br><span class="line">   --statistics , -s</span><br><span class="line">       Display summary statistics <span class="keyword">for</span> each protocol.</span><br></pre></td></tr></table></figure>

<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta@vostrozhc:~$ sudo netstat -ntulp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address        Foreign Address     State    PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:80           0.0.0.0:*           LISTEN   1079/nginx -g daemo</span><br><span class="line">tcp        0      0 127.0.1.1:53         0.0.0.0:*           LISTEN   1315/dnsmasq    </span><br><span class="line">tcp        0      0 0.0.0.0:22           0.0.0.0:*           LISTEN   1072/sshd       </span><br><span class="line">tcp        0      0 127.0.0.1:631        0.0.0.0:*           LISTEN   20096/cupsd     </span><br><span class="line">tcp        0      0 127.0.0.1:57468      0.0.0.0:*           LISTEN   12057/code      </span><br><span class="line">tcp        0      0 127.0.0.1:19645      0.0.0.0:*           LISTEN   2644/python     </span><br><span class="line">tcp6       0      0 :::80                :::*                LISTEN   1079/nginx -g daemo</span><br><span class="line">tcp6       0      0 :::34642             :::*                LISTEN   7094/nutstore   </span><br><span class="line">tcp6       0      0 :::22                :::*                LISTEN   1072/sshd       </span><br><span class="line">tcp6       0      0 ::1:631              :::*                LISTEN   20096/cupsd     </span><br><span class="line">tcp6       0      0 127.0.0.1:19080      :::*                LISTEN   7094/nutstore   </span><br><span class="line">udp        0      0 127.0.0.1:19081      0.0.0.0:*                    2635/nautilus   </span><br><span class="line">udp        0      0 0.0.0.0:53305        0.0.0.0:*                    879/avahi-daemon: r</span><br><span class="line">udp   188032      0 224.0.0.251:5353     0.0.0.0:*                    9287/chrome --<span class="built_in">type</span>=</span><br><span class="line">udp        0      0 224.0.0.251:5353     0.0.0.0:*                    9287/chrome --<span class="built_in">type</span>=</span><br><span class="line">udp        0      0 224.0.0.251:5353     0.0.0.0:*                    9248/chrome     </span><br><span class="line">udp        0      0 0.0.0.0:5353         0.0.0.0:*                    879/avahi-daemon: r</span><br><span class="line">udp        0      0 0.0.0.0:56122        0.0.0.0:*                    1315/dnsmasq    </span><br><span class="line">udp        0      0 127.0.1.1:53         0.0.0.0:*                    1315/dnsmasq    </span><br><span class="line">udp        0      0 0.0.0.0:68           0.0.0.0:*                    20136/dhclient  </span><br><span class="line">udp6       0      0 :::5353              :::*                         879/avahi-daemon: r</span><br><span class="line">udp6       0      0 :::47874             :::*                         879/avahi-daemon: r</span><br></pre></td></tr></table></figure>

<h4 id="FILES"><a href="#FILES" class="headerlink" title="FILES"></a>FILES</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/services -- The services translation file</span><br><span class="line"></span><br><span class="line">/proc -- Mount point <span class="keyword">for</span> the proc filesystem, <span class="built_in">which</span> gives access to kernel status information via the following files.</span><br><span class="line">    /proc/net/dev -- device information</span><br><span class="line">    /proc/net/raw -- raw socket information</span><br><span class="line">    /proc/net/tcp -- TCP socket information</span><br><span class="line">    /proc/net/udp -- UDP socket information</span><br><span class="line">    /proc/net/igmp -- IGMP multicast information</span><br><span class="line">    /proc/net/unix -- Unix domain socket information</span><br><span class="line">    /proc/net/ipx -- IPX socket information</span><br><span class="line">    /proc/net/ax25 -- AX25 socket information</span><br><span class="line">    /proc/net/appletalk -- DDP (appletalk) socket information</span><br><span class="line">    /proc/net/nr -- NET/ROM socket information</span><br><span class="line">    /proc/net/route -- IP routing information</span><br><span class="line">    /proc/net/ax25_route -- AX25 routing information</span><br><span class="line">    /proc/net/ipx_route -- IPX routing information</span><br><span class="line">    /proc/net/nr_nodes -- NET/ROM nodelist</span><br><span class="line">    /proc/net/nr_neigh -- NET/ROM neighbours</span><br><span class="line">    /proc/net/ip_masquerade -- masqueraded connections</span><br><span class="line">    /proc/net/snmp -- statistics</span><br></pre></td></tr></table></figure>

<h3 id="route"><a href="#route" class="headerlink" title="route"></a>route</h3><p>show / manipulate the IP routing table</p>
<h4 id="usage-1"><a href="#usage-1" class="headerlink" title="usage"></a>usage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route</span><br><span class="line">	add	: delete a route	</span><br><span class="line">	del : add a new route</span><br><span class="line">	-n  : show numerical addresses</span><br><span class="line"><span class="comment"># 其实应该就是读取了文件/proc/net/route -- IP routing information</span></span><br><span class="line"><span class="comment"># netstat --route|-r 也可以返回一样的结果，不过netstat应该只能查看不能删改</span></span><br></pre></td></tr></table></figure>

<h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta@vostrozhc:~$ route</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         shz82b-ldr01-v5 0.0.0.0         UG    100    0        0 enp2s0</span><br><span class="line">10.67.104.0     *               255.255.255.0   U     100    0        0 enp2s0</span><br><span class="line">shzsdns401.ccr. shz82b-ldr01-v5 255.255.255.255 UGH   100    0        0 enp2s0</span><br><span class="line">link-local      *               255.255.0.0     U     1000   0        0 enp2s0</span><br></pre></td></tr></table></figure>

<h4 id="FILES-1"><a href="#FILES-1" class="headerlink" title="FILES"></a>FILES</h4><pre><code>/proc/net/ipv6_route
/proc/net/route
/proc/net/rt_cache</code></pre><h3 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h3><p>manipulate the system ARP cache</p>
<h4 id="usage-2"><a href="#usage-2" class="headerlink" title="usage"></a>usage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp						</span><br><span class="line">	nothing				: <span class="built_in">print</span> the current content of the table.</span><br><span class="line">	-d address 			: delete a ARP table entry</span><br><span class="line">	-s address hw_addr 	: <span class="built_in">set</span> up a new table entry</span><br></pre></td></tr></table></figure>

<h4 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta@vostrozhc:~$ arp</span><br><span class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</span><br><span class="line">shz82b-ldr01-v504-pri.s  ether   00:04:96:9b:aa:83   C                     enp2s0</span><br><span class="line">shz82b-ldr01-v504-sec.s  ether   00:04:96:9b:aa:78   C                     enp2s0</span><br><span class="line">shz82b-ldr01-v504-vrrp.  ether   00:00:5e:00:01:01   C                     enp2s0</span><br></pre></td></tr></table></figure>

<h4 id="FILES-2"><a href="#FILES-2" class="headerlink" title="FILES"></a>FILES</h4><pre><code>/proc/net/arp
/etc/networks
/etc/hosts
/etc/ethers</code></pre><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install traceroute</span><br></pre></td></tr></table></figure>

<h2 id="dnsutils"><a href="#dnsutils" class="headerlink" title="dnsutils"></a>dnsutils</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dnsutils</span><br><span class="line"></span><br><span class="line">/usr/bin</span><br><span class="line">/usr/bin/nslookup</span><br><span class="line">/usr/bin/nsupdate</span><br><span class="line">/usr/bin/dig</span><br></pre></td></tr></table></figure>

<h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><p>DNS lookup utility</p>
<h4 id="usage-3"><a href="#usage-3" class="headerlink" title="usage"></a>usage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125;</span><br><span class="line">            &#123;global<span class="_">-d</span>-opt&#125; host [@<span class="built_in">local</span>-server] &#123;<span class="built_in">local</span><span class="_">-d</span>-opt&#125;</span><br><span class="line">            [ host [@<span class="built_in">local</span>-server] &#123;<span class="built_in">local</span><span class="_">-d</span>-opt&#125; [...]]</span><br></pre></td></tr></table></figure>

<h4 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta@vostrozhc:~$ dig child-prc.intel.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; child-prc.intel.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 47923</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;child-prc.intel.com.		IN	A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">child-prc.intel.com.	900	IN	CNAME	child-prc.iglb.intel.com.</span><br><span class="line">child-prc.iglb.intel.com. 19	IN	A	10.239.4.101</span><br><span class="line"></span><br><span class="line">;; Query time: 2 msec</span><br><span class="line">;; SERVER: 127.0.1.1<span class="comment">#53(127.0.1.1)</span></span><br><span class="line">;; WHEN: Mon Sep 09 11:19:07 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 93</span><br></pre></td></tr></table></figure>

<h2 id="dnsmasq"><a href="#dnsmasq" class="headerlink" title="dnsmasq"></a>dnsmasq</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dnsmasq-base</span><br></pre></td></tr></table></figure>

<h2 id="iproute2"><a href="#iproute2" class="headerlink" title="iproute2"></a>iproute2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install iproute2</span><br><span class="line">/sbin</span><br><span class="line">/sbin/tc</span><br><span class="line">/sbin/rtacct</span><br><span class="line">/sbin/tipc</span><br><span class="line">/sbin/rtmon</span><br><span class="line">/sbin/bridge</span><br><span class="line">/etc</span><br><span class="line">/etc/iproute2</span><br><span class="line">/etc/iproute2/rt_protos</span><br><span class="line">/etc/iproute2/ematch_map</span><br><span class="line">/etc/iproute2/rt_realms</span><br><span class="line">/etc/iproute2/rt_dsfield</span><br><span class="line">/etc/iproute2/rt_scopes</span><br><span class="line">/etc/iproute2/group</span><br><span class="line">/etc/iproute2/nl_protos</span><br><span class="line">/etc/iproute2/rt_tables</span><br><span class="line">/usr/sbin</span><br><span class="line">/usr/sbin/arpd</span><br><span class="line">/usr/sbin/genl</span><br><span class="line">/usr/bin</span><br><span class="line">/usr/bin/routel</span><br><span class="line">/usr/bin/nstat</span><br><span class="line">/usr/bin/routef</span><br><span class="line">/usr/bin/lnstat</span><br><span class="line">/bin</span><br><span class="line">/bin/ss</span><br><span class="line">/bin/ip</span><br><span class="line">/sbin/ip</span><br><span class="line">/usr/bin/rtstat</span><br><span class="line">/usr/bin/ctstat</span><br></pre></td></tr></table></figure>

<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>Interactively dump and analyze network traffic</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wireshark</span><br></pre></td></tr></table></figure>

<h2 id="ethtool"><a href="#ethtool" class="headerlink" title="ethtool"></a>ethtool</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ethtool</span><br></pre></td></tr></table></figure>

<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install iptables</span><br><span class="line">/sbin/iptables-restore</span><br><span class="line">/sbin/ip6tables-save</span><br><span class="line">/sbin/ip6tables</span><br><span class="line">/sbin/iptables-save</span><br><span class="line">/sbin/iptables</span><br><span class="line">/sbin/ip6tables-restore</span><br><span class="line">/usr/sbin</span><br><span class="line">/usr/sbin/nfnl_osf</span><br><span class="line">/usr/sbin/iptables-apply</span><br></pre></td></tr></table></figure>

<h2 id="iputils-ping"><a href="#iputils-ping" class="headerlink" title="iputils-ping"></a>iputils-ping</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install iputils-ping</span><br><span class="line">/bin/ping6</span><br><span class="line">/bin/ping</span><br></pre></td></tr></table></figure>

<h2 id="bridge-utils"><a href="#bridge-utils" class="headerlink" title="bridge-utils"></a>bridge-utils</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install bridge-utils</span><br><span class="line">/sbin/brctl</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>linux</category>
        <category>network</category>
        <category>tools</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tools</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>libyang-doc</title>
    <url>/2019/09/19/libyang-doc/</url>
    <content><![CDATA[<div class="note default">
            <p>CESENT公司开源了一套以sysrepo为datastore的网络配置体系。主要有：<code>libyang</code>, <code>sysrepo</code>, <code>libnetconf2</code>, <code>netopeer2</code>，而且<code>libyang</code>和<code>sysrepo</code>是我实现RESTCONF的主要依赖，所以这部分看得比较认真。</p><p>但是这篇东西基本上就是<code>libyang</code>的doc里面的概述部分。</p>
          </div>

<a id="more"></a>

<h2 id="libyang"><a href="#libyang" class="headerlink" title="libyang"></a>libyang</h2><p><strong>Context - Schema - Data</strong></p>
<ul>
<li><p>difference between <em>imported</em> and <em>implemented</em>?</p>
</li>
<li><p>functions for schemas have <strong>lys_</strong> prefix while functions for instance data have <strong>lyd_</strong> prefix</p>
</li>
</ul>
<h2 id="YANG"><a href="#YANG" class="headerlink" title="YANG"></a>YANG</h2><ul>
<li>A <strong>container</strong> node does not have a value, but it has a list of child nodes in the data tree.</li>
</ul>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions:"></a>Questions:</h2><ul>
<li>yang定义的rpc和实现过程中的rpc有什么关系？<ul>
<li>A: rfc8040里面讲的意思好像是yang里面定义的”rpc”. “action”通过http POST去触发</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rpc</span> <span class="attr">message-id</span>=<span class="string">"101"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activate-software-image</span> <span class="attr">xmlns</span>=<span class="string">"http://example.com/system"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image-name</span>&gt;</span>example-fw-2.3<span class="tag">&lt;/<span class="name">image-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activate-software-image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rpc-reply</span> <span class="attr">message-id</span>=<span class="string">"101"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">status</span> <span class="attr">xmlns</span>=<span class="string">"http://example.com/system"</span>&gt;</span></span><br><span class="line">    The image example-fw-2.3 is being installed.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc-reply</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>头部的namespace是怎么写的，是多一点操作就要多加一条相关的吗？</li>
<li>下面这条rpc， <code>&lt;config&gt;</code>里面的写法还不懂</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rpc</span> <span class="attr">message-id</span>=<span class="string">"101"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:nc</span>=<span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:yang</span>=<span class="string">"urn:ietf:params:xml:ns:yang:1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">running</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">system</span> <span class="attr">xmlns</span>=<span class="string">"urn:example:config"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:ex</span>=<span class="string">"urn:example:config"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">user</span> <span class="attr">nc:operation</span>=<span class="string">"create"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">yang:insert</span>=<span class="string">"after"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">yang:key</span>=<span class="string">"[ex:first-name=’fred’]</span></span></span><br><span class="line"><span class="tag"><span class="string">                                [ex:surname=’flintstone’]"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>barney<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">surname</span>&gt;</span>rubble<span class="tag">&lt;/<span class="name">surname</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>为什么ietf-restconf.yang里面只定义了group</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The &quot;ietf-restconf&quot; module defines conceptual definitions within an</span><br><span class="line">extension and two groupings, which are not meant to be implemented as</span><br><span class="line">datastore contents by a server. For example, the &quot;restconf&quot;</span><br><span class="line">container is not intended to be implemented as a top-level data node</span><br><span class="line">(under the &quot;&#x2F;restconf&#x2F;data&quot; URI).</span><br></pre></td></tr></table></figure>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p><strong>ly_ctx_*</strong></p>
<ul>
<li><p>The context concept allows callers to work in environments with different sets of YANG schemas.</p>
</li>
<li><p>Context holds all modules and their submodules internally. </p>
</li>
<li><p>To get a specific module or submodule, use <a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#gaf9cd151a6f7cb5246ea34f6681b4e0c2" target="_blank" rel="noopener">ly_ctx_get_module()</a> and <a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#ga4e95dad7cc374046b84352eddff3a420" target="_blank" rel="noopener">ly_ctx_get_submodule()</a>. </p>
</li>
<li><p>If you need to do something with all the modules or submodules in the context, it is advised to iterate over them using <a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#ga8ad57a5482f3c57c099bfd32a17e6f47" target="_blank" rel="noopener">ly_ctx_get_module_iter()</a>, it is the most efficient way. </p>
</li>
<li><p>Alternatively, the <a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#ga3189ba8857eee441f9f413a8abee0ae5" target="_blank" rel="noopener">ly_ctx_info()</a> function can be used to get complex information about the schemas in the context in the form of data tree defined by <a href="https://tools.ietf.org/html/draft-ietf-netconf-yang-library-04" target="_blank" rel="noopener">ietf-yang-library</a> schema. </p>
</li>
<li><p>To get a specific node defined in a module in the context, <a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#gaff344e9b687a734352f51b21fa71782f" target="_blank" rel="noopener">ly_ctx_find_path()</a> or <a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#gabce6ff4f82d0ce7786d0a89cb70fb369" target="_blank" rel="noopener">ly_ctx_get_node()</a> can be used.</p>
</li>
</ul>
<h2 id="Schemas"><a href="#Schemas" class="headerlink" title="Schemas"></a>Schemas</h2><p><strong>lys_features_*</strong></p>
<p><strong>lys_parse_*</strong></p>
<p>Schema is an internal libyang’s representation of a YANG data model. Each schema is connected with its <a href="https://netopeer.liberouter.org/doc/libyang/master/howtocontext.html" target="_blank" rel="noopener">context</a> and loaded using <a href="https://netopeer.liberouter.org/doc/libyang/master/howtoschemasparsers.html" target="_blank" rel="noopener">parser functions</a>. It means, that the schema cannot be created (nor changed) programmatically. In libyang, schemas are used only to access data model definitions.</p>
<ul>
<li><p>Basic YANG schemas format described in <a href="http://tools.ietf.org/html/rfc6020" target="_blank" rel="noopener">RFC 6020</a> and <a href="http://tools.ietf.org/html/rfc7951" target="_blank" rel="noopener">RFC 7951</a> (so both YANG 1.0 and YANG 1.1 versions are supported).</p>
</li>
<li><p>When the <a href="https://netopeer.liberouter.org/doc/libyang/master/howtocontext.html" target="_blank" rel="noopener">context</a> is created, it already contains the following schemas, which are implemented internally by libyang:</p>
<ul>
<li>ietf-yang-metadata@2016-08-05</li>
<li>yang@2017-02-20</li>
<li>ietf-inet-types@2013-07-15</li>
<li>ietf-yang-types@2013-07-15</li>
<li>ietf-yang-library@2016-06-21</li>
</ul>
</li>
<li><p>The <code>yang</code> schema is the libyang’s internal module to provide namespace and definitions of for various YANG attributes described in <a href="https://tools.ietf.org/html/rfc6243" target="_blank" rel="noopener">RFC 7951</a> (such as <code>insert</code> attribute for edit-config’s data).</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lys_node</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;                <span class="comment">/**&lt; node name (mandatory) */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *dsc;                 <span class="comment">/**&lt; description statement (optional) */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ref;                 <span class="comment">/**&lt; reference statement (optional) */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> flags;                  <span class="comment">/**&lt; [schema node flags](@ref snodeflags) */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> ext_size;                <span class="comment">/**&lt; number of elements in #ext array */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> iffeature_size;          <span class="comment">/**&lt; number of elements in the #iffeature array */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> padding[<span class="number">4</span>];              </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_ext_instance</span> **<span class="title">ext</span>;</span>   <span class="comment">/**&lt; array of pointers to the extension instances */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_iffeature</span> *<span class="title">iffeature</span>;</span> <span class="comment">/**&lt; array of if-feature expressions */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_module</span> *<span class="title">module</span>;</span>       <span class="comment">/**&lt; pointer to the node's module (mandatory) */</span></span><br><span class="line">    LYS_NODE nodetype;               <span class="comment">/**&lt; type of the node (mandatory) */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_node</span> *<span class="title">parent</span>;</span>         <span class="comment">/**&lt; pointer to the parent node, NULL in case of a top level node */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_node</span> *<span class="title">child</span>;</span>          </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_node</span> *<span class="title">next</span>;</span>           <span class="comment">/**&lt; pointer to the next sibling node (NULL if there is no one) */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lys_node</span> *<span class="title">prev</span>;</span>           </span><br><span class="line">    <span class="keyword">void</span> *priv;                      <span class="comment">/**&lt; private caller's data, not used by libyang */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Data-Instances"><a href="#Data-Instances" class="headerlink" title="Data Instances"></a>Data Instances</h2><p>All data nodes in data trees are connected with their schema node - libyang is not able to represent data of an unknown schema.</p>
<h3 id="Parsing-data"><a href="#Parsing-data" class="headerlink" title="Parsing data"></a>Parsing data</h3><ul>
<li><strong>lyd_parse_*</strong></li>
</ul>
<h3 id="Manipulating-Data"><a href="#Manipulating-Data" class="headerlink" title="Manipulating Data"></a>Manipulating Data</h3><p>Creating data is generally possible in two ways, they can be combined. </p>
<ul>
<li>You can add nodes one-by-one based on the node name and/or its parent (<a href="https://netopeer.liberouter.org/doc/libyang/master/group__datatree.html#ga84863d0360258e3bc4930d598658094b" target="_blank" rel="noopener">lyd_new()</a>, <strong>lyd_new_anydata_*</strong>(), <a href="https://netopeer.liberouter.org/doc/libyang/master/group__datatree.html#ga8cc511af9ca3b3a7048c3a5f6fe8f0db" target="_blank" rel="noopener">lyd_new_leaf()</a>, and their output variants) </li>
<li>or address the nodes using a simple XPath addressing (<a href="https://netopeer.liberouter.org/doc/libyang/master/group__datatree.html#ga31b3de84e33ece1022738f15fcac4242" target="_blank" rel="noopener">lyd_new_path()</a>). </li>
<li>The latter enables to create a whole path of nodes, requires less information about the modified data, and is generally simpler to use. The path format specifics can be found <a href="https://netopeer.liberouter.org/doc/libyang/master/howtoxpath.html" target="_blank" rel="noopener">here</a>.</li>
</ul>
<p>Working with two data subtrees can also be performed two ways. </p>
<ul>
<li>Usually, you would use lyd_insert*() functions. They are generally meant for simple inserts of a node into a data tree. </li>
<li>For more complicated inserts and when merging 2 trees use <a href="https://netopeer.liberouter.org/doc/libyang/master/group__datatree.html#gad1664b6cac7b4af0cfad588c682c9c3b" target="_blank" rel="noopener">lyd_merge()</a>. It offers additional options and is basically a more powerful insert.</li>
</ul>
<h3 id="Validating-Data"><a href="#Validating-Data" class="headerlink" title="Validating Data"></a>Validating Data</h3><ul>
<li><strong>lyd_validate()</strong></li>
</ul>
<h3 id="Default-Values"><a href="#Default-Values" class="headerlink" title="Default Values"></a>Default Values</h3><p>libyang provides support for work with default values as defined in <a href="https://tools.ietf.org/html/rfc6243" target="_blank" rel="noopener">RFC 6243</a>. This document defines 4 modes for handling default nodes in a data tree, libyang adds the fifth mode:</p>
<ul>
<li><strong>explicit</strong> - Only the explicitly set configuration data. But in the case of status data, missing default data are added into the tree. In libyang, this mode is represented by <a href="https://netopeer.liberouter.org/doc/libyang/master/group__printerflags.html#ga7c1600afee107c9a10571565c1c359cc" target="_blank" rel="noopener">LYP_WD_EXPLICIT</a> option.</li>
<li><strong>trim</strong> - Data nodes containing the schema default value are removed. This mode is applied using <a href="https://netopeer.liberouter.org/doc/libyang/master/group__printerflags.html#gadf3263351807e4a7b0274c06310c691a" target="_blank" rel="noopener">LYP_WD_TRIM</a> option.</li>
<li><strong>report-all</strong> - All the missing default data are added into the data tree. This mode is represented by <a href="https://netopeer.liberouter.org/doc/libyang/master/group__printerflags.html#ga917bb092a127506bb61ef6fc044724de" target="_blank" rel="noopener">LYP_WD_ALL</a> option.</li>
<li><strong>report-all-tagged</strong> - In this case, all the missing default data are added as in case of the <code>report-all</code> mode, but additionally all the nodes (existing as well as added) containing the schema default value are tagged (see the note below). libyang uses <a href="https://netopeer.liberouter.org/doc/libyang/master/group__printerflags.html#gaf242c90016e3e1dc3e039206f6536786" target="_blank" rel="noopener">LYP_WD_ALL_TAG</a> option for this mode.</li>
<li><strong>report-implicit-tagged</strong> - The last mode is similar to the previous one, except only the added nodes are tagged. This is the libyang’s extension and it is represented by <a href="https://netopeer.liberouter.org/doc/libyang/master/group__printerflags.html#ga93fa4001f5d73d942ca4cb80c28edeed" target="_blank" rel="noopener">LYP_WD_IMPL_TAG</a> option.</li>
</ul>
<h2 id="XPath-Addressing"><a href="#XPath-Addressing" class="headerlink" title="XPath Addressing"></a>XPath Addressing</h2><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>Regarding identifying schema nodes, we use a slightly modified version of YANG <strong>augment</strong> target path:</p>
<ul>
<li>strictly speaking, most XPath expressions are not accepted, only simple paths (no predicates, numbers, literals, operators, …),</li>
<li>whenever a prefix is used for a node, it is not the import prefix, but the <strong>module name</strong> itself,</li>
<li><strong>current module</strong> is specified separately for <em>absolute</em> paths and is the module of the start (current) node for <em>relative</em> paths,</li>
<li>unprefixed nodes all use the prefix of the <strong>current module</strong> so all nodes from other modules than the <strong>current module</strong> <em>MUST</em> have prefixes,</li>
<li>nodes from the <strong>current module</strong> <em>MAY</em> have prefixes,</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><ul>
<li><p>get all top-level nodes of the <strong>module-name</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;module-name:*</span><br></pre></td></tr></table></figure>
</li>
<li><p>get all the descendants of <strong>container</strong> (excluding container)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;module-name:container&#x2F;&#x2F;*</span><br></pre></td></tr></table></figure>
</li>
<li><p>get <strong>aug-leaf</strong>, which was added to <strong>module-name</strong> from an augment module <strong>augment-module</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;module-name:container&#x2F;container2&#x2F;augment-module:aug-cont&#x2F;augment-module:aug-leaf</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Functions-List"><a href="#Functions-List" class="headerlink" title="Functions List"></a>Functions List</h4><ul>
<li><a href="https://netopeer.liberouter.org/doc/libyang/master/group__schematree.html#ga4039ced8497a02779ac05c3fee0ad66b" target="_blank" rel="noopener">lys_find_path()</a></li>
<li><a href="https://netopeer.liberouter.org/doc/libyang/master/group__schematree.html#ga8e5b98c5ef4b5c182485c8d6e3ff3e24" target="_blank" rel="noopener">lys_path()</a></li>
<li><a href="https://netopeer.liberouter.org/doc/libyang/master/group__context.html#ga30d5e7b3071b6528f5f3b4b20f8225ba" target="_blank" rel="noopener">ly_path_data2schema()</a></li>
</ul>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>As for paths evaluated on YANG data, we opted for standardized JSON paths (<a href="https://tools.ietf.org/html/rfc7951#section-6.11" target="_blank" rel="noopener">RFC 7951</a>). Summarized, it follows these conventions:</p>
<ul>
<li>generally, you can use almost a full XPath in these paths where it makes sense, but only data nodes (node sets) will always be returned (except for paths, predicates are mostly used),</li>
<li>as per the specification, prefixes are actually <strong>module names</strong>,</li>
<li>also in the specification, for <em>absolute</em> paths, the first (leftmost) node <em>MUST</em> have a prefix,</li>
<li>for <em>relative</em> paths, you specify the <strong>context node</strong>, which then acts as a parent for the first node in the path,</li>
<li>nodes always inherit their module (prefix) from their <strong>parent node</strong> so whenever a node is from a different module than its parent, it <em>MUST</em> have a prefix,</li>
<li>nodes from the same module as their <strong>parent</strong> <em>MUST NOT</em> have a prefix,</li>
<li>different from schema paths, non-data nodes (choice, case, uses, input, output) are skipped and not included in the path.</li>
</ul>
<h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h4><ul>
<li><p>get <strong>list</strong> instance with <strong>key1</strong> of value <strong>1</strong> and <strong>key2</strong> of value <strong>2</strong> (this can return more <strong>list</strong> instances if there are more keys than <strong>key1</strong> and <strong>key2</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;module-name:container&#x2F;list[key1&#x3D;&#39;1&#39;][key2&#x3D;&#39;2&#39;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>get <strong>leaf-list</strong> instance with the value <strong>val</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;module-name:container&#x2F;leaf-list[.&#x3D;&#39;val&#39;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>get <strong>aug-list</strong> with <strong>aug-list-key</strong>, which was added to <strong>module-name</strong> from an augment module <strong>augment-module</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;module-name:container&#x2F;container2&#x2F;augment-module:aug-cont&#x2F;aug-list[aug-list-key&#x3D;&#39;value&#39;]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Functions-List-1"><a href="#Functions-List-1" class="headerlink" title="Functions List"></a>Functions List</h4><h2 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># need to kill sysrepod</span></span><br><span class="line">sudo sysrepoctl --uninstall --module=building</span><br><span class="line">sudo sysrepoctl --install --yang=./building@2019-08-07.yang --owner=root:root --permissions=666</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># yang define</span><br><span class="line"># 这个building是我当时测试多级container的yang，是看一个国外老哥的视频写的，也是yang入门了</span><br><span class="line">#（但是我用的是加了一些东西的下一个version）</span><br><span class="line">module building &#123;</span><br><span class="line">  yang-version 1;</span><br><span class="line">  namespace "urn:building:test";</span><br><span class="line"></span><br><span class="line">  prefix bld;</span><br><span class="line"></span><br><span class="line">  organization "building";</span><br><span class="line">  contact "building address";</span><br><span class="line">  description "yang model for buildings";</span><br><span class="line">  revision "2019-08-07" &#123;</span><br><span class="line">    description "modified revision";</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  container rooms &#123;</span><br><span class="line">    list room &#123;</span><br><span class="line">      key "room-number room-name";</span><br><span class="line">      leaf room-number &#123;</span><br><span class="line">        type uint16;</span><br><span class="line">      &#125;</span><br><span class="line">      leaf room-name &#123;</span><br><span class="line">        type string;</span><br><span class="line">      &#125;</span><br><span class="line">      leaf size &#123;</span><br><span class="line">        type uint32;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>restconf</category>
      </categories>
      <tags>
        <tag>restconf</tag>
      </tags>
  </entry>
  <entry>
    <title>电影命名简析与pt扫盲</title>
    <url>/2019/09/19/%E7%94%B5%E5%BD%B1%E5%91%BD%E5%90%8D%E7%AE%80%E6%9E%90%E4%B8%8Ept%E6%89%AB%E7%9B%B2/</url>
    <content><![CDATA[<div class="note default">
            <p>是一时兴起打算投电影社的推送才写的，但是写到一半就咕咕了，所以现在剩下的只有前半：<em>电影命名简析</em> （其实叫<em>视频资源命名解析</em>或许更加妥当。）</p><p>剩下一半就看缘分了～</p>
          </div>

<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里列了一些在pt站上下载的种子的名称</span></span><br><span class="line">[TTG] White Lies Black Lies 2015  WEB-DL 1080p H264 AAC-TTG.torrent</span><br><span class="line">[TTG] Peace.Hotel.1995.720p.BluRay.x264-WiKi.torrent</span><br><span class="line">[TTG] The Shannara Chronicles S02 Disc1 Blu-ray 1080p AVC TrueHD 5.1-DIY@TTG.torrent</span><br><span class="line">[TTG] Police.Story.1985.PROPER.1080p.GBR.Blu-ray.AVC.DTS-HD.MA.5.1-TTG.torrent</span><br><span class="line">[PT][纪录片][159050].Our.Planet.2019.S01.1080p.NF.WEB-DL.DDP5.1.x264-NTb.torrent</span><br><span class="line">[FRDS].美国队长2.Captain.America.The.Winter.Soldier.2014.BluRay.2160p.x265.10bit.HDR.3Audio.mUHD-FRDS.torrent</span><br></pre></td></tr></table></figure>

<p>一般命名规则：</p>
<p><strong><em>视频名字+年份+(电影版本)+分辨率+片源版本+视频编解码标准+音频编解码标准+压制组名字</em></strong> </p>
<h4 id="视频名字"><a href="#视频名字" class="headerlink" title="视频名字"></a>视频名字</h4><ul>
<li>一般以 . 分割 (原因大概是’ ‘不好打所以转义);</li>
</ul>
<h4 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h4><p>p表示逐行扫描( <em>Progressive scanning</em> ), i 表示隔行扫描（<em>interlaced scan</em>）</p>
<ul>
<li><p>2160p(4K/UHD): 3840x2160</p>
</li>
<li><p>1080p: 1920x1080</p>
</li>
<li><p>1080i: 1920x1080 interlaced scan</p>
</li>
<li><p>720p: 1280x720</p>
</li>
</ul>
<h4 id="电影版本"><a href="#电影版本" class="headerlink" title="(电影版本)"></a>(电影版本)</h4><ul>
<li>PROPER：完美版, 先前发行的电影质量较差，而这个认为是较好的</li>
<li>REPACK：重新制作发布，之前的版本就要回收</li>
<li>LIMITED：指在美国有限上映的片子，在少于 500 家电影院放映</li>
<li>DUPE：与别的组织 Release 有重复</li>
<li>IMAX：巨幕版，标准的 IMAX 银幕为 22 米宽、16 米高</li>
<li>UNRATE：未分级版</li>
<li>R-RATE：有删节版</li>
<li>SE：DVD 特别版</li>
<li>DC：导演剪辑版</li>
<li>WITH EXTRAS：带花絮</li>
<li>RERIP：同样电影重新 RIP</li>
<li>SUBBED：有硬字幕</li>
</ul>
<h4 id="片源版本"><a href="#片源版本" class="headerlink" title="片源版本"></a>片源版本</h4><ul>
<li>Bluray(BD): 蓝光原盘。</li>
<li>Remux: Remux 是无损提取出 HD-DVD和 BluRay-DVD 里面的主视频数据和主音频数据，再将所需的其他音轨（如国配、粤配、台配等）添加进去，再封装到我们熟悉的TS或者MKV、AVI文件中的过程。和原盘相比,一般差别在于会删除一些不需要的音轨及菜单调整，减小了视频体积。</li>
<li>WEB-DL(WEBRip): Web-download的简称。国外的 WEB-DL 版本，来源是 iTunes 在线付费商店，质量相当不错，接近 BLURAY 蓝光版，针对国内的 WEB 版本，则大多是在线付费门户网站的在线电影所破解下载获得的，如迅雷，腾讯，优酷等，其质量较国外的 WEB 版本差。</li>
<li>DVDRip: 从最终版的 DVD 转制。质量应该是很不错的。将 DVD 的视频、音频、字幕剥离出来，再经过压缩或者其他处理，然后重新合成成多媒体文件。一般来说，DVDRip由 AVI 格式文件和字幕文件组成。</li>
<li>HDTV: 高清电视转录, 一般带有台标, 美剧、高清综艺等等很容易见到HDTV格式的片源</li>
</ul>
<h4 id="视频编解码标准"><a href="#视频编解码标准" class="headerlink" title="视频编解码标准"></a>视频编解码标准</h4><p>原始的音视频体积非常大，包含许多冗余信息，通过视频编码可以显著减小其体积，便于存储、传输。</p>
<p>常见的视频编解码标准主要是H.264/AVC和H.265/HEVC，相比之下，质量比较测试表面，相同图像质量下H.265编码的视频大小将减少大约39-44%；主观视觉测试得出的数据显示，在码率减少51-74%的情况下，H.265编码视频的质量还能与H.264编码视频近似甚至更好。</p>
<ul>
<li>H264/MPEG-4 AVC (MPEG-4 part10)</li>
<li>XviD: Xvid是一个开源的MPEG-4 part2视频编解码器(比较老)</li>
<li>x264: x264 是一种免费的、具有更优秀算法的 H.264/MPEG-4 AVC视频压缩编码格式。它同 XviD 一样都是开源项目，但 x264 是采用 H.264 标准的，而 XviD 是采用 MPEG-4 早期标准的。由于 H.264 是 2003 年正式发布的最新的视频编码标准，因此，在通常情况下，x264 压缩出的视频文件在相同质量下要比 XviD 压缩出的文件要小，或者也可以说，在相同体积下比 XviD 压缩出的文件质量要好。</li>
<li>H265/HEVC</li>
<li>x265: Xvid是一个开源的MPEG-4视频编解码器</li>
</ul>
<h4 id="音频编解码标准"><a href="#音频编解码标准" class="headerlink" title="音频编解码标准"></a>音频编解码标准</h4><p>音频的标准主要考虑</p>
<ul>
<li>编码：有损 / 无损</li>
<li>声道数：2.0 / 5.1 / 7.1</li>
<li>码率</li>
</ul>
<p>主要有以下格式：</p>
<ul>
<li>AC3: 杜比音效的统称，AC3（Audio Coding 3）是杜比数码的同义词，杜比数码是一种高级音频压缩技术，它最多可以对 6 个比特率最高为 448kbps 的单独声道进行编码。。</li>
<li>DD5.1 = AC3 5.1</li>
<li>DDP5.1(Dolby Digital Plus) AC3的增强。</li>
<li>AAC(Advanced Audio Coding): 高级音频编码, 目的是取代MP3格式, 相对于mp3，AAC格式的音质更佳，文件更小, 属于有损压缩</li>
<li>DTS(Digital Theater Systems): 美国 DTS 公司与环球电影公司合作开发的数字影院环绕声系统。同杜比数字有类似之处，也是一种多声道采用压缩码技术。DTS 采用 CAC（相干声学编码）结构的压缩方式有别于杜比数字的压缩方式，典型的压缩比为 3：1，仅为杜比数字的四分之一，原始信号丢失较少，可保留原来声场中较丰富的细微信号，DTS 的 96KHz 的取样频率为杜比数字 48KHz 的一倍，最高比特位为 24Bit。</li>
<li>FLAC2.0</li>
</ul>
<h5 id="次世代音轨"><a href="#次世代音轨" class="headerlink" title="次世代音轨"></a>次世代音轨</h5><p>次世代音轨多在蓝光原盘、Remux、少量1080p资源中。720p及以下基本没有。</p>
<ul>
<li><p>DTS-HD MA 5.1(7.1) (DTS-HD Master Audio)</p>
</li>
<li><p>Dolby Atoms &amp; TrueHD 7.1</p>
</li>
<li><p>LPCM(2.0)</p>
</li>
</ul>
<h4 id="mkv"><a href="#mkv" class="headerlink" title="mkv"></a>mkv</h4><p>Matroska多媒体容器（Multimedia Container）是一种开放标准的自由的容器和文件格式，是一种<strong>多媒体封装格式</strong>，能够在一个文件中容纳无限数量的视频、音频、图片或字幕轨道。</p>
<h3 id="查看视频文件信息"><a href="#查看视频文件信息" class="headerlink" title="查看视频文件信息"></a>查看视频文件信息</h3><h4 id="nfo文件"><a href="#nfo文件" class="headerlink" title=".nfo文件"></a>.nfo文件</h4><ul>
<li>一般正规一些的压制视频都会有一个.nfo文件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">±°°°°°°°°°°±°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°±±±±±</span><br><span class="line">°°°°°±°°°±°°°°°°°°°°°°°°°°°°°°°°°°°ÜÜ°°°°°ÜÜ°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°±±±±</span><br><span class="line">°°°°±²±°°°°°°°°°°°°°°°°°°°°°°°ÜÜ²ÛÛÛÛ°°°°°ÛÛÛÛ²ÜÜ°°°°°°°°°°°°°°°°°°°°°°°°°°°°±±±</span><br><span class="line">°±±²²Û²²±±°°°°°°°°°°°°°°ÜÜ²°ÜÛÛÛÛÛÛÛ²°°°°°²ÛÛÛÛÛÛÛÜ°²ÜÜ°°°°°°°°°°°°°°°°°°°°°°°±±</span><br><span class="line">°°°°±²±°°°°°°°°°°°°°°°ÜÛÛÛÛ°°²ÛÛÛÛÛÝ°°°°°°°ÛÛÛÛÛÛ²°°ÛÛÛÛÜ°°°°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°±°°°°°°°°°°°°°°°ÛÛÛÛÛÛÛ°°ÛÛÛÛÛÝ°°°°°°°ÛÛÛÛÛÛ°°ÛÛÛÛÛÛÛ°°°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°±°°°°°°°°°°°ÜÛÛÛÛÛÛÛÛ²°ÛÛÛÛÛÝ°°°°°°°ÛÛÛÛÛÛ°²ÛÛÛÛÛÛÛÛÜ°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°±°°°°°°°°°°°°°°°ÛÛÛÛÛÛÛÛÛÛ°ÛÛÛÛÛÝ°°°°°°°ÛÛÛÛÛÛ°ÛÛÛÛÛÛÛÛÛÛ°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°ÛÛÛÛÛß°°²ÛÛ°°ÛÛÛÛÝ°°°°°°°ÛÛÛÛÛ°°ÛÛÛÛÝßÛÛÛÛÛ°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°²ÛÛÛÛß°°°°°ßÛ²°ÛÛÛÛÝ°°°°°°°ÛÛÛÛÛ°ÞÛßÛÛÝ°°ßÛÛÛÛ²°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°ÛÛÛÛ°°°°°°°°ß°°²ÛÛÛÝ°°°°°°°ÛÛÛÝ²°°ß²ÛÛÝ°°°°ÛÛÛÛ°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°²ÛÛÛ°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°ÛÛÛÝ°°°°±ÛÛÝ°°°°°ÛÛÛ²°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°ÛÛÛ²°°°°°°°°°°°°°ÛÛÛÛÜ°°°°°ÜÛÛÛÝ°°°°°ÛÛÝ°°°°°²ÛÛÛ°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÝ°°°°°ÛÛÝ°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÝ°°°°°ÛÛÝ°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°ÛÛÛÛÛß°°°°²ÛÛÛÝ°°°°°ÛÛÝ°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°ÛÛÛÛ²°°°°°°ÛÛÛÝ°°°°°ÛÛÝ°°°°°°ÛÛÛÝ°°°°°°°±°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°ÛÛÛÝ°°°°°ÛÛÝ°°°°°°ÛÛÛÝ°°°°±°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°²ÛÛÛ²°°°°°°°°°°°°°ÛÛÛÝ°°°°°°°ÛÛÛÝ°°°°°ÛÛÝ°°°°°²ÛÛÛ²°°°°°°°±°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°ÛÛÛÛ²°°°°°°°°°°°°ÛÛÛÝ°°°°°°°ÛÛÛÝ°°°°±ÛÛÝ°°°°²ÛÛÛÛ°°°°°°°°±°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°ÛÛÛÛÜ°°°°°°°Ü°°²ÛÛÛÛ²°°°°°²ÛÛÛÛ²°°ÜÞÛÛÝ°°°ÜÛÛÛÛ°°°°°°°°±²±°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°ßÛÛÛÛÛ°°°°°ÜÛ²°ÛÛÛÛÛÛ°°°°°ÛÛÛÛÛÛ°ÞÛÛÛÛÝ°°ÛÛÛÛÛß°°°°°±±²²Û²²±±°±±</span><br><span class="line">°°°°°°°°°°°°°°°°°ßÛÛÛÛÛÜÜ°ÜÛÛ°°ÛÛÛÛÛÝ°°°°°ÛÛÛÛÛÛ°°ÛÛÛÛÝÜÛÛÛÛÛß°°°°°°°°°±²±°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°ßÛÛÛÛÛÛÛÛÛÛ°°ÛÛÛÛÛÝ°°°°°ÛÛÛÛÛÛ°°ÛÛÛÛÛÛÛÛÛÛß°°°°°°°°°°°±°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°°°ÛÛÛÛÛÛÛÛ²°²ÛÛÛÛÛÝ°°°°°ÛÛÛÛÛÛ²°²ÛÛÛÛÛÛÛÛ°°°°°°°°°°°°±°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°°°°²ÛÛÛÛÛÛ°°ÛÛÛÛÛÛÝ°°°°°ÛÛÛÛÛÛÛ°°ÛÛÛÛÛÛÛ°°°°°°°°°°°°°°°°±°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°°°°°ßÛÛÛÛ°°²ÛÛÛÛÛÛÝ°°°°°ÛÛÛÛÛÛÛ²°°ÛÛÛÛß°°°°°°°°°°°°±°°°°°°±°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°°°°°°°ßß²°ßÛÛÛÛÛÛÛÝ°°°°°ÛÛÛÛÛÛÛÛß°²ßß°°°°°°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°ßßßÛÛÛß°°°°°ß²ÛÛßßß°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°±</span><br><span class="line">°°°°±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±</span><br><span class="line">°°°±±±±±±±±±±±±±±±±±±±±±±±±±Classic High Definition±±±±±±±±±±±±±±±±±±±±±±±±±±±±</span><br><span class="line">°°±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±</span><br><span class="line">°±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±Proudly Presents±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±</span><br><span class="line">±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±</span><br><span class="line"></span><br><span class="line">                 Cold.War.2018.BluRay.1080p.DTS.x265.10bit-CHD</span><br><span class="line"></span><br><span class="line">°±°±°±°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°</span><br><span class="line">General Information:</span><br><span class="line"></span><br><span class="line">RELEASE NAME....: Cold.War.2018.BluRay.1080p.DTS.x265.10bit-CHD</span><br><span class="line">RELEASE DATE....: 10/31/2018</span><br><span class="line">THEATRE DATE....: 2018</span><br><span class="line">iMDB URL........: http://www.imdb.com/title/tt6543652/</span><br><span class="line">iMDB RATiNG.....: 7.9/10   4,370 votes</span><br><span class="line">GENRE...........: Drama, Music, Romance</span><br><span class="line">SOURCE .........: Cold War 2018 Blu-ray 1080P AVC DST-HD MA 5.1 -zchrs@CHDBits(Thanks!)</span><br><span class="line">ViDEO BiTRATE...: x265 L4 Main10 @ 6433 Kbps</span><br><span class="line">FRAME RATE......: 24.000 fps</span><br><span class="line">AUDiO...........: Polish DTS core 5.1 @ 1509 Kbps</span><br><span class="line">RUNTiME.........: 01:28:00.427 (h:m:s)</span><br><span class="line">ASPECT RATiO....: 4 : 3</span><br><span class="line">RESOLUTiON......: 1440 x 1080 </span><br><span class="line">SUBTiTLES.......: Chinese(Chs) | Chinese(Cht) | Polish(Pol)</span><br><span class="line">CHAPTERS........: 12</span><br><span class="line">FilE SiZE.......: 4.898 G</span><br><span class="line">ENCODER.........: Today @ CHD</span><br><span class="line"></span><br><span class="line">x265 [info]: frame I:    393, Avg QP:17.27  kb/s: 21602.81</span><br><span class="line">x265 [info]: frame P:  27004, Avg QP:18.13  kb/s: 12569.45</span><br><span class="line">x265 [info]: frame B:  99333, Avg QP:21.46  kb/s: 4703.45</span><br><span class="line">x265 [info]: Weighted P-Frames: Y:4.0% UV:0.0%</span><br><span class="line">x265 [info]: Weighted B-Frames: Y:3.3% UV:0.0%</span><br><span class="line">x265 [info]: consecutive B-frames: 4.3% 15.1% 3.4% 31.4% 9.9% 22.6% 4.6% 4.9% 1.7% 2.1%</span><br></pre></td></tr></table></figure>

<h4 id="mediainfo"><a href="#mediainfo" class="headerlink" title="mediainfo"></a>mediainfo</h4><p><code>mediainfo</code>是一个linux下的工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">General</span><br><span class="line">Unique ID                                : 230405195286120003730632671871865789496 (0xAD566D2EBC8CB58F5BB435637CF91C38)</span><br><span class="line">Complete name                            : Cold.War.2018.BluRay.1080p.DTS.x265.10bit-CHD.mkv</span><br><span class="line">Format                                   : Matroska</span><br><span class="line">Format version                           : Version 4 / Version 2</span><br><span class="line">File size                                : 4.90 GiB</span><br><span class="line">Duration                                 : 1h 28mn</span><br><span class="line">Overall bit rate                         : 7 967 Kbps</span><br><span class="line">Movie name                               : Today @ CHD</span><br><span class="line">Encoded date                             : UTC 2018-10-30 22:40:52</span><br><span class="line">Writing application                      : mkvmerge v28.2.0 (<span class="string">'The Awakening'</span>) 64-bit</span><br><span class="line">Writing library                          : libebml v1.3.6 + libmatroska v1.4.9</span><br><span class="line">Cover                                    : Yes</span><br><span class="line">Attachments                              : cover.png</span><br><span class="line"></span><br><span class="line">Video</span><br><span class="line">ID                                       : 1</span><br><span class="line">Format                                   : HEVC</span><br><span class="line">Format/Info                              : High Efficiency Video Coding</span><br><span class="line">Format profile                           : Main 10@L4@Main</span><br><span class="line">Codec ID                                 : V_MPEGH/ISO/HEVC</span><br><span class="line">Duration                                 : 1h 28mn</span><br><span class="line">Bit rate                                 : 6 433 Kbps</span><br><span class="line">Width                                    : 1 440 pixels</span><br><span class="line">Height                                   : 1 080 pixels</span><br><span class="line">Display aspect ratio                     : 4:3</span><br><span class="line">Frame rate mode                          : Constant</span><br><span class="line">Frame rate                               : 24.000 fps</span><br><span class="line">Color space                              : YUV</span><br><span class="line">Chroma subsampling                       : 4:2:0</span><br><span class="line">Bit depth                                : 10 bits</span><br><span class="line">Bits/(Pixel*Frame)                       : 0.172</span><br><span class="line">Stream size                              : 3.95 GiB (81%)</span><br><span class="line">Writing library                          : x265 2.7+17-2e370d98c806:[Windows][GCC 6.3.0][64 bit] 10bit</span><br><span class="line">Encoding settings                        : cpuid=1173503 / frame-threads=3 / numa-pools=8 / wpp / no-pmode / pme / no-psnr / no-ssim / <span class="built_in">log</span>-level=2 / input-csp=1 / input-res=1440x1080 / interlace=0 / total-frames=0 / level-idc=0 / high-tier=1 / uhd-bd=0 / ref=6 / no-allow-non-conformance / repeat-headers / annexb / no-aud / no-hrd / info / <span class="built_in">hash</span>=0 / no-temporal-layers / no-open-gop / min-keyint=1 / keyint=576 / gop-lookahead=0 / bframes=9 / b-adapt=2 / b-pyramid / bframe-bias=0 / rc-lookahead=70 / lookahead-slices=6 / scenecut=40 / radl=0 / no-intra-refresh / ctu=32 / min-cu-size=16 / rect / amp / max-tu-size=16 / tu-inter-depth=3 / tu-intra-depth=3 / <span class="built_in">limit</span>-tu=3 / rdoq-level=1 / dynamic-rd=0.00 / no-ssim-rd / signhide / no-tskip / nr-intra=0 / nr-inter=0 / no-constrained-intra / no-strong-intra-smoothing / max-merge=4 / <span class="built_in">limit</span>-refs=3 / <span class="built_in">limit</span>-modes / me=3 / subme=3 / merange=45 / temporal-mvp / weightp / weightb / no-analyze-src-pics / deblock=-1:-1 / no-sao / no-sao-non-deblock / rd=3 / early-skip / no-rskip / no-fast-intra / no-tskip-fast / no-cu-lossless / b-intra / no-splitrd-skip / rdpenalty=2 / psy-rd=0.95 / psy-rdoq=0.00 / no-rd-refine / no-lossless / cbqpoffs=-2 / crqpoffs=-2 / rc=crf / crf=18.0 / qcomp=0.68 / qpstep=4 / stats-write=0 / stats-read=0 / ipratio=1.40 / pbratio=1.30 / aq-mode=3 / aq-strength=0.90 / cutree / zone-count=0 / no-strict-cbr / qg-size=32 / no-rc-grain / qpmax=69 / qpmin=17 / no-const-vbv / sar=0 / overscan=0 / videoformat=5 / range=0 / colorprim=2 / transfer=2 / colormatrix=2 / chromaloc=0 / display-window=0 / max-cll=0,0 / min-luma=0 / max-luma=1023 / log2-max-poc-lsb=8 / vui-timing-info / vui-hrd-info / slices=1 / no-opt-qp-pps / no-opt-ref-list-length-pps / no-multi-pass-opt-rps / scenecut-bias=0.05 / no-opt-cu-delta-qp / aq-motion / no-hdr / no-hdr-opt / no-dhdr10-opt / no-idr-recovery-sei / analysis-reuse-level=5 / scale-factor=0 / refine-intra=0 / refine-inter=0 / refine-mv=0 / no-limit-sao / ctu-info=0 / no-lowpass-dct / refine-mv-type=0 / copy-pic=1 / max-ausize-factor=1.0 / no-dynamic-refine</span><br><span class="line">Default                                  : Yes</span><br><span class="line">Forced                                   : No</span><br><span class="line"></span><br><span class="line">Audio</span><br><span class="line">ID                                       : 2</span><br><span class="line">Format                                   : DTS</span><br><span class="line">Format/Info                              : Digital Theater Systems</span><br><span class="line">Mode                                     : 16</span><br><span class="line">Format settings, Endianness              : Big</span><br><span class="line">Codec ID                                 : A_DTS</span><br><span class="line">Duration                                 : 1h 28mn</span><br><span class="line">Bit rate mode                            : Constant</span><br><span class="line">Bit rate                                 : 1 509 Kbps</span><br><span class="line">Channel(s)                               : 6 channels</span><br><span class="line">Channel positions                        : Front: L C R, Side: L R, LFE</span><br><span class="line">Sampling rate                            : 48.0 KHz</span><br><span class="line">Frame rate                               : 93.750 fps (512 spf)</span><br><span class="line">Bit depth                                : 24 bits</span><br><span class="line">Compression mode                         : Lossy</span><br><span class="line">Stream size                              : 950 MiB (19%)</span><br><span class="line">Title                                    : Polish</span><br><span class="line">Language                                 : Polish</span><br><span class="line">Default                                  : Yes</span><br><span class="line">Forced                                   : No</span><br><span class="line"></span><br><span class="line">Text <span class="comment">#1</span></span><br><span class="line">ID                                       : 3</span><br><span class="line">Format                                   : PGS</span><br><span class="line">Muxing mode                              : zlib</span><br><span class="line">Codec ID                                 : S_HDMV/PGS</span><br><span class="line">Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs</span><br><span class="line">Duration                                 : 1h 19mn</span><br><span class="line">Bit rate                                 : 11.8 Kbps</span><br><span class="line">Count of elements                        : 1095</span><br><span class="line">Stream size                              : 6.75 MiB (0%)</span><br><span class="line">Title                                    : Chs</span><br><span class="line">Language                                 : Chinese</span><br><span class="line">Default                                  : Yes</span><br><span class="line">Forced                                   : No</span><br><span class="line"></span><br><span class="line">Text <span class="comment">#2</span></span><br><span class="line">ID                                       : 4</span><br><span class="line">Format                                   : PGS</span><br><span class="line">Muxing mode                              : zlib</span><br><span class="line">Codec ID                                 : S_HDMV/PGS</span><br><span class="line">Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs</span><br><span class="line">Duration                                 : 1h 19mn</span><br><span class="line">Bit rate                                 : 12.8 Kbps</span><br><span class="line">Count of elements                        : 1095</span><br><span class="line">Stream size                              : 7.31 MiB (0%)</span><br><span class="line">Title                                    : Cht</span><br><span class="line">Language                                 : Chinese</span><br><span class="line">Default                                  : No</span><br><span class="line">Forced                                   : No</span><br><span class="line"></span><br><span class="line">Text <span class="comment">#3</span></span><br><span class="line">ID                                       : 5</span><br><span class="line">Format                                   : PGS</span><br><span class="line">Muxing mode                              : zlib</span><br><span class="line">Codec ID                                 : S_HDMV/PGS</span><br><span class="line">Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs</span><br><span class="line">Duration                                 : 1h 25mn</span><br><span class="line">Bit rate                                 : 25.4 Kbps</span><br><span class="line">Count of elements                        : 1382</span><br><span class="line">Stream size                              : 15.5 MiB (0%)</span><br><span class="line">Title                                    : Pol</span><br><span class="line">Language                                 : Polish</span><br><span class="line">Default                                  : No</span><br><span class="line">Forced                                   : No</span><br><span class="line"></span><br><span class="line">Menu</span><br><span class="line">00:00:00.000                             : :第 01 章</span><br><span class="line">00:07:29.708                             : :第 02 章</span><br><span class="line">00:14:03.000                             : :第 03 章</span><br><span class="line">00:22:11.666                             : :第 04 章</span><br><span class="line">00:30:20.958                             : :第 05 章</span><br><span class="line">00:40:40.416                             : :第 06 章</span><br><span class="line">00:47:59.666                             : :第 07 章</span><br><span class="line">00:52:42.958                             : :第 08 章</span><br><span class="line">00:58:52.500                             : :第 09 章</span><br><span class="line">01:07:26.541                             : :第 10 章</span><br><span class="line">01:13:57.416                             : :第 11 章</span><br><span class="line">01:21:08.500                             : :第 12 章</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>media</category>
      </categories>
      <tags>
        <tag>pt</tag>
      </tags>
  </entry>
  <entry>
    <title>clixon_backend_restconf</title>
    <url>/2019/09/19/clixon-backend-restconf/</url>
    <content><![CDATA[<div class="note default">
            <p>实习期间主要做的就是RESTCONF，Clixon这个项目是我接触的第一个restconf（也是唯一一个）实现，虽然到后来看这个项目只是给我提供了基本框架的思路，但是当时一开始看这个还是挺费劲的。</p><p>记录很详尽但是没什么用，后半段有一些RESTCONF实现的调研，可能后续整理资料的时候会再提取出来，这篇记录应该不会再有改动了。</p>
          </div>

<a id="more"></a>

<p><a href="https://github.com/clicon/clixon" target="_blank" rel="noopener">clixon</a>的安装等去看项目README以及doc目录下。</p>
<h3 id="clixon启动命令"><a href="#clixon启动命令" class="headerlink" title="clixon启动命令"></a>clixon启动命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backend</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/sbin/clixon_backend -F -s init -f /usr/<span class="built_in">local</span>/etc/example.xml</span><br><span class="line"><span class="comment"># restconf</span></span><br><span class="line">sudo su -c <span class="string">"/www-data/clixon_restconf -f /usr/local/etc/example.xml "</span> -s /bin/sh www-data</span><br><span class="line"><span class="comment"># unset http_proxy (will get redirected error it not do so)</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="comment"># send http GET</span></span><br><span class="line">curl -G http://127.0.0.1/restconf/data</span><br></pre></td></tr></table></figure>

<h4 id="debug-mode"><a href="#debug-mode" class="headerlink" title="debug mode"></a>debug mode</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run restconf in debug mode</span></span><br><span class="line">sudo su -c <span class="string">"/www-data/clixon_restconf -D 1 -f /usr/local/etc/example.xml"</span> -s /bin/sh www-data</span><br><span class="line"><span class="comment"># use authorization</span></span><br><span class="line">sudo su -c <span class="string">"/www-data/clixon_restconf -D 1 -f /usr/local/etc/example.xml -- -a"</span> -s /bin/sh www-data</span><br><span class="line"><span class="comment"># look at syslog</span></span><br><span class="line">tail -f /var/<span class="built_in">log</span>/syslog | grep clixon_restconf</span><br></pre></td></tr></table></figure>

<h4 id="test-curl"><a href="#test-curl" class="headerlink" title="test curl"></a>test curl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">new <span class="string">"restconf root discovery. RFC 8040 3.1 (xml+xrd)"</span></span><br><span class="line">expecteq <span class="string">"<span class="variable">$(curl -s -X GET http://localhost/.well-known/host-meta)</span>"</span> 0 <span class="string">"&lt;XRD xmlns='http://docs.oasis-open.org/ns/xri/xrd-1.0'&gt;</span></span><br><span class="line"><span class="string">   &lt;Link rel='restconf' href='/restconf'/&gt;</span></span><br><span class="line"><span class="string">&lt;/XRD&gt;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">new <span class="string">"restconf get restconf resource. RFC 8040 3.3 (json)"</span></span><br><span class="line">expecteq <span class="string">"<span class="variable">$(curl -sG http://localhost/restconf)</span>"</span> 0 <span class="string">'&#123;"restconf": &#123;"data": null,"operations": null,"yang-library-version": "2016-06-21"&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span></span><br><span class="line">new <span class="string">"restconf get restconf resource. RFC 8040 3.3 (xml)"</span></span><br><span class="line"><span class="comment"># Get XML instead of JSON?</span></span><br><span class="line">expecteq <span class="string">"<span class="variable">$(curl -s -H 'Accept: application/yang-data+xml' -G http://localhost/restconf)</span>"</span> 0 <span class="string">'&lt;restconf&gt;&lt;data/&gt;&lt;operations/&gt;&lt;yang-library-version&gt;2016-06-21&lt;/yang-library-version&gt;&lt;/restconf&gt;'</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Should be alphabetically ordered</span></span><br><span class="line"><span class="string">new "restconf get restconf/operations. RFC8040 3.3.2 (json)"</span></span><br><span class="line"><span class="string">expecteq "$(curl -sG http://localhost/restconf/operations)" 0 '</span>&#123;<span class="string">"operations"</span>: &#123;<span class="string">"clixon-example:client-rpc"</span>: null,<span class="string">"clixon-example:empty"</span>: null,<span class="string">"clixon-example:optional"</span>: null,<span class="string">"clixon-example:example"</span>: null,<span class="string">"clixon-lib:debug"</span>: null,<span class="string">"clixon-lib:ping"</span>: null,<span class="string">"ietf-netconf:get-config"</span>: null,<span class="string">"ietf-netconf:edit-config"</span>: null,<span class="string">"ietf-netconf:copy-config"</span>: null,<span class="string">"ietf-netconf:delete-config"</span>: null,<span class="string">"ietf-netconf:lock"</span>: null,<span class="string">"ietf-netconf:unlock"</span>: null,<span class="string">"ietf-netconf:get"</span>: null,<span class="string">"ietf-netconf:close-session"</span>: null,<span class="string">"ietf-netconf:kill-session"</span>: null,<span class="string">"ietf-netconf:commit"</span>: null,<span class="string">"ietf-netconf:discard-changes"</span>: null,<span class="string">"ietf-netconf:validate"</span>: null,<span class="string">"clixon-rfc5277:create-subscription"</span>: null&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># "restconf Add interfaces subtree eth/0/0 using POST"</span></span><br><span class="line">curl -s -X POST -d &#123;<span class="string">"ietf-interfaces:interface"</span>:&#123;<span class="string">"name"</span>:<span class="string">"eth/0/0"</span>,<span class="string">"type"</span>:<span class="string">"ex:eth"</span>,<span class="string">"enabled"</span>:<span class="literal">true</span>&#125;&#125; http://localhost/restconf/data/ietf-interfaces:interfaces</span><br></pre></td></tr></table></figure>

<h3 id="使用Postman"><a href="#使用Postman" class="headerlink" title="使用Postman"></a>使用Postman</h3><ul>
<li>终端<code>unset http_proxy</code></li>
<li>Postman 关闭<strong>File &gt; Settings &gt; Proxy &gt; Use system proxy</strong></li>
<li>Postman 关闭**File &gt; Settings &gt; General &gt; SSL Certificate Verification</li>
</ul>
<hr>
<h3 id="socket-相关"><a href="#socket-相关" class="headerlink" title="socket 相关"></a>socket 相关</h3><ul>
<li>看这一段的目的是为了搞清楚下面两次注册的*<u>ss</u><em>和</em><u>s</u>*的区别.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ss是&lt;CLICON_SOCK&gt;的fd</span></span><br><span class="line"><span class="comment">// 如果ss(server socket)有变动，那么backend_accept_client会被调用？？？</span></span><br><span class="line"><span class="comment">// ss是socket返回的套接字，只用于监听listen，不直接用于发送接受数据，也就是说，这一层的event_reg_fd的目的是监听server端口，发现client用，如果有client试图连接ss这个套接字，那么backend_accept_client函数被调用，client和server的连接会建立（因为可能会有多个client来连接server）</span></span><br><span class="line">event_reg_fd(ss, backend_accept_client, h, <span class="string">"server socket"</span>)</span><br><span class="line"><span class="comment">// s是accept返回的套接字，用于client实际的通信，也就是说在event_loop机制下，如果套接字s有变动，就会触发from_client回调函数</span></span><br><span class="line">event_reg_fd(s, from_client, (<span class="keyword">void</span>*)ce, <span class="string">"local netconf client socket"</span>)</span><br></pre></td></tr></table></figure>

<p>服务端：创建socket—绑定文件（端口）—监听—接受客户端连接—接收/发送数据—…—关闭</p>
<pre><code>socket()--bind()--listen()--accept()--read()/write()-------close()</code></pre><p>客户端：创建socket—绑定文件（端口）—连接—发送/接收数据—…—关闭</p>
<pre><code>socket()--bind()--connect()--read()/write()-------close()</code></pre><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ss = backend_socket_init(clicon_handle h)	<span class="comment">// 连接&lt;CLICON_SOCK&gt; ss = socket</span></span><br><span class="line">    config_socket_init_unix(h, sock);		<span class="comment">// sock = &lt;CLICON_SOCK&gt; 配置文件定义的</span></span><br><span class="line">		<span class="comment">/* 创建socket*/</span></span><br><span class="line">		s = socket(AF_UNIX, SOCK_STREAM, <span class="number">0</span>))</span><br><span class="line">        <span class="comment">/* 设定family与path*/</span></span><br><span class="line">    	<span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">		addr.sun_family = AF_UNIX;</span><br><span class="line">		<span class="built_in">strncpy</span>(addr.sun_path, sock, <span class="keyword">sizeof</span>(addr.sun_path)<span class="number">-1</span>);<span class="comment">// sock = &lt;CLICON_SOCK&gt;</span></span><br><span class="line">		<span class="comment">/* 绑定 */</span></span><br><span class="line">		bind(s, (struct sockaddr *)&amp;addr, SUN_LEN(&amp;addr))</span><br><span class="line">        <span class="built_in">listen</span>(s, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> s	<span class="comment">// return s 回去是一开始的ss</span></span><br><span class="line">event_reg_fd(ss, backend_accept_client, h, <span class="string">"server socket"</span>)</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">int</span> backend_accept_client(<span class="keyword">int</span>   fd, <span class="keyword">void</span> *arg)</span><br><span class="line">    len = <span class="keyword">sizeof</span>(from);</span><br><span class="line">    s = accept(fd, (struct sockaddr*)&amp;from, &amp;len)) <span class="comment">// accept, 把addr写到from里面（from空的）</span></span><br><span class="line">    <span class="comment">/* Add new client, typically frontend such as cli, netconf, restconf*/</span></span><br><span class="line">    ce = backend_client_add(h, (struct sockaddr*)&amp;from)</span><br><span class="line">event_reg_fd(s, from_client, (<span class="keyword">void</span>*)ce, <span class="string">"local netconf client socket"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="从restconf连接backend看"><a href="#从restconf连接backend看" class="headerlink" title="从restconf连接backend看"></a>从restconf连接backend看</h4><p>调用的机制：没有长连接，每次都是短的连接。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// restconf_main.c 不细讲前面的初始化过程，从main()中最后的死循环开始讲</span></span><br><span class="line"><span class="comment">// 每次fastcgi接收到nginx转发的http消息，解析URL，根据类型交给api_restconf / api_stream</span></span><br><span class="line"><span class="comment">// simplified version (remove debug part)</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    finish = <span class="number">1</span>; <span class="comment">/* If zero, dont finish request, initiate new */</span></span><br><span class="line">	<span class="comment">/* fastcgi receive http message forwarded by nginx */</span></span><br><span class="line">    FCGX_Accept_r(r);</span><br><span class="line">    <span class="keyword">if</span> ((path = FCGX_GetParam(<span class="string">"REQUEST_URI"</span>, r-&gt;envp)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">/* match request URL*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(path, <span class="string">"/"</span> RESTCONF_API, <span class="built_in">strlen</span>(<span class="string">"/"</span> RESTCONF_API)) == <span class="number">0</span>)</span><br><span class="line">        	api_restconf(h, r); <span class="comment">/* This is the function */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(path+<span class="number">1</span>, stream_path, <span class="built_in">strlen</span>(stream_path)) == <span class="number">0</span>) &#123;</span><br><span class="line">        	api_stream(h, r, stream_path, &amp;finish);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (finish)</span><br><span class="line">        FCGX_Finish_r(r);</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">/* A handler is forked so we initiate a new request after instead</span></span><br><span class="line"><span class="comment">         of finnishing the old */</span></span><br><span class="line">		FCGX_InitRequest(r, sock, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// restconf_main.c 不细讲前面的初始化过程，从main()中最后的死循环开始讲</span></span><br><span class="line"><span class="comment">// 每次fastcgi接收到nginx转发的http消息，解析URL，根据类型交给api_restconf / api_stream</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    finish = <span class="number">1</span>; <span class="comment">/* If zero, dont finish request, initiate new */</span></span><br><span class="line">	<span class="comment">/* fastcgi接收到nginx转发的http消息*/</span></span><br><span class="line">    <span class="keyword">if</span> (FCGX_Accept_r(r) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        clicon_err(OE_CFG, errno, <span class="string">"FCGX_Accept_r"</span>);</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">    clicon_debug(<span class="number">1</span>, <span class="string">"------------"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((path = FCGX_GetParam(<span class="string">"REQUEST_URI"</span>, r-&gt;envp)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        clicon_debug(<span class="number">1</span>, <span class="string">"path: %s"</span>, path);</span><br><span class="line">        <span class="comment">/* 匹配了请求的URL*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(path, <span class="string">"/"</span> RESTCONF_API, <span class="built_in">strlen</span>(<span class="string">"/"</span> RESTCONF_API)) == <span class="number">0</span>)</span><br><span class="line">        	api_restconf(h, r); <span class="comment">/* This is the function 关键部分*/</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(path+<span class="number">1</span>, stream_path, <span class="built_in">strlen</span>(stream_path)) == <span class="number">0</span>) &#123;</span><br><span class="line">        	api_stream(h, r, stream_path, &amp;finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(path, RESTCONF_WELL_KNOWN, <span class="built_in">strlen</span>(RESTCONF_WELL_KNOWN)) == <span class="number">0</span>) &#123;</span><br><span class="line">        api_well_known(h, r); <span class="comment">/*  */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        clicon_debug(<span class="number">1</span>, <span class="string">"top-level %s not found"</span>, path);</span><br><span class="line">        notfound(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        clicon_debug(<span class="number">1</span>, <span class="string">"NULL URI"</span>);</span><br><span class="line">    <span class="keyword">if</span> (finish)</span><br><span class="line">        FCGX_Finish_r(r);</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">/* A handler is forked so we initiate a new request after instead</span></span><br><span class="line"><span class="comment">         of finnishing the old */</span></span><br><span class="line">        <span class="keyword">if</span> (FCGX_InitRequest(r, sock, <span class="number">0</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">        clicon_err(OE_CFG, errno, <span class="string">"FCGX_InitRequest"</span>);</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">api_restconf(h, r)</span><br><span class="line">    <span class="comment">/* prase url， forward to api_data */</span></span><br><span class="line">    api_data(h, r, path, pcvec, <span class="number">2</span>, qvec, data, pretty, use_xml, parse_xml);</span><br><span class="line">		<span class="comment">/* dispatch to different function according to http operations, GET for example*/</span></span><br><span class="line">		api_data_get(h, r, pcvec, pi, qvec, pretty, use_xml);</span><br><span class="line">		<span class="comment">/* implement by this function*/</span></span><br><span class="line">		api_data_get2(h, r, pcvec, pi, qvec, pretty, use_xml, <span class="number">0</span>);</span><br><span class="line">			clicon_rpc_get(h, path, &amp;xret);</span><br><span class="line">                clicon_rpc_msg(h, msg, &amp;xret, <span class="literal">NULL</span>);</span><br><span class="line">					sock = clicon_sock(h); <span class="comment">// sock = &lt;CLICON_SOCK&gt; in congfig file</span></span><br><span class="line">					<span class="comment">/* Connect to server, send a clicon_msg message</span></span><br><span class="line"><span class="comment">					and wait for result using unix socket*/</span></span><br><span class="line">					clicon_rpc_connect_unix(msg, sock, &amp;retdata, sock0);</span><br><span class="line">						s = clicon_connect_unix(sockpath) <span class="comment">// sockpath = prev sock</span></span><br><span class="line">                            <span class="built_in">connect</span>(s, (struct sockaddr *)&amp;addr, SUN_LEN(&amp;addr))</span><br><span class="line">                        <span class="comment">/* Send a clicon_msg message and wait for result.*/</span></span><br><span class="line">                        clicon_rpc(s, msg, retdata)</span><br><span class="line">                            clicon_msg_send(s, msg)</span><br><span class="line">                            	<span class="comment">/*Ensure all of data on socket comes through.</span></span><br><span class="line"><span class="comment">                            	fn is either read or write*/</span></span><br><span class="line">                            	atomicio((<span class="keyword">ssize_t</span> (*)(<span class="keyword">int</span>, <span class="keyword">void</span> *, <span class="keyword">size_t</span>))<span class="built_in">write</span>,</span><br><span class="line">                                         s, msg, ntohl(msg-&gt;op_len))</span><br><span class="line">                            clicon_msg_rcv(s, &amp;reply, &amp;eof)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这两步从api_path转到xpath</span></span><br><span class="line">api_path2xpath(yspec, pcvec, pi, cbpath)</span><br><span class="line">path = cbuf_get(cbpath);</span><br><span class="line"><span class="comment">// get方法，输入xpath，构建rpc msg， 发送并接受（backend）</span></span><br><span class="line">clicon_rpc_get(h, path, &amp;xret);</span><br><span class="line">	<span class="keyword">if</span> ((cb = cbuf_new()) == <span class="literal">NULL</span>)</span><br><span class="line">	<span class="keyword">goto</span> done;</span><br><span class="line">    cprintf(cb, <span class="string">"&lt;rpc"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((username = clicon_username_get(h)) != <span class="literal">NULL</span>)</span><br><span class="line">	cprintf(cb, <span class="string">" username=\"%s\""</span>, username);</span><br><span class="line">    cprintf(cb, <span class="string">"&gt;&lt;get&gt;"</span>);</span><br><span class="line">    <span class="keyword">if</span> (xpath &amp;&amp; <span class="built_in">strlen</span>(xpath))</span><br><span class="line">	cprintf(cb, <span class="string">"&lt;filter type=\"xpath\" select=\"%s\"/&gt;"</span>, xpath);</span><br><span class="line">    cprintf(cb, <span class="string">"&lt;/get&gt;&lt;/rpc&gt;"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((msg = clicon_msg_encode(<span class="string">"%s"</span>, cbuf_get(cb))) == <span class="literal">NULL</span>)</span><br><span class="line">	<span class="keyword">goto</span> done;</span><br><span class="line">    <span class="keyword">if</span> (clicon_rpc_msg(h, msg, &amp;xret, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">goto</span> done;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 看一下post，post要上传数据好像还不太一样</span></span><br><span class="line">api_data_post(h, r, api_path, pcvec, pi, qvec, data, pretty, use_xml, parse_xml);</span><br><span class="line">    <span class="comment">/* Create config top-of-tree */</span></span><br><span class="line">    xtop = xml_new(<span class="string">"config"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br><span class="line">    <span class="comment">/* Translate api_path to xtop/xbot */</span></span><br><span class="line">    api_path2xml(api_path, yspec, xtop, YC_DATANODE, <span class="number">1</span>, &amp;xbot, &amp;ybot)</span><br><span class="line">    <span class="comment">/* Parse input data as json or xml into xml */</span></span><br><span class="line">    ...</span><br><span class="line">    ... <span class="comment">// 可能忽略了部分内容，暂时不看（包括上面一些也是随便贴的，可以不看）</span></span><br><span class="line">    cbx = cbuf_new()</span><br><span class="line">    <span class="comment">/* For internal XML protocol: add username attribute for access control</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    username = clicon_username_get(h);</span><br><span class="line">    cprintf(cbx, <span class="string">"&lt;rpc username=\"%s\"&gt;"</span>, username?username:<span class="string">""</span>);</span><br><span class="line">    cprintf(cbx, <span class="string">"&lt;edit-config&gt;&lt;target&gt;&lt;candidate /&gt;&lt;/target&gt;"</span>);</span><br><span class="line">    cprintf(cbx, <span class="string">"&lt;default-operation&gt;none&lt;/default-operation&gt;"</span>);</span><br><span class="line">    <span class="keyword">if</span> (clicon_xml2cbuf(cbx, xtop, <span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>)	<span class="comment">// xtop</span></span><br><span class="line">    cprintf(cbx, <span class="string">"&lt;/edit-config&gt;&lt;/rpc&gt;"</span>);</span><br><span class="line">	<span class="comment">/* 关键语句，与get里面的clicon_rpc_get差不多的感觉*/</span></span><br><span class="line">    clicon_rpc_netconf(h, cbuf_get(cbx), &amp;xret, <span class="literal">NULL</span>)</span><br><span class="line">        clicon_rpc_msg(h, msg, xret, sp)</span><br><span class="line">        <span class="comment">// 见上</span></span><br></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个其实没什么用</span></span><br><span class="line"><span class="comment">// clixon/yang/clixon/clixon-cnfig@2019-06-05.yang</span></span><br><span class="line"><span class="comment">// 是fastcgi的socket</span></span><br><span class="line">leaf CLICON_RESTCONF_PATH &#123;</span><br><span class="line">	    type string;</span><br><span class="line">	    default "/www-data/fastcgi_restconf.sock";</span><br><span class="line">	    description</span><br><span class="line">		<span class="string">"FastCGI unix socket. Should be specified in webserver</span></span><br><span class="line">         	 Eg in nginx: fastcgi_pass unix:/www-data/clicon_restconf.sock";</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rpc-角度"><a href="#rpc-角度" class="headerlink" title="rpc 角度"></a>rpc 角度</h3><ul>
<li><p>注册<code>rpc_callback</code></p>
</li>
<li><p>callback调用（在<code>event_loop</code></p>
</li>
</ul>
<p><img src="1562831058358.png" alt="1562831058358"></p>
<p><img src="1562830981427.png" alt="1562830981427"></p>
<p><img src="1562810441329.png" alt="1562810441329"></p>
<h3 id="backend-event-reg-amp-loop"><a href="#backend-event-reg-amp-loop" class="headerlink" title="backend event reg &amp; loop"></a>backend event reg &amp; loop</h3><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><ul>
<li><p>猜想是<code>event_data</code>的<code>EVENT_FD</code>的条目是检测到相关的fd变化后会去执行该条目的回调函数，但是我还没有看懂<code>event_loop</code>过程.</p>
</li>
<li><p><code>event_loop</code>是main函数最后进去的，里面包含一个<code>while(1)</code></p>
</li>
</ul>
<h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><ul>
<li><code>event_reg</code>分为<code>event_reg_fd</code>&amp;<code>event_reg_timeout</code>相应的，<code>event_loop</code>里面存在分开处理这两种机制的两部分。<ul>
<li>下面提到的都是<code>event_reg_fd</code>的方式</li>
<li><code>event_reg_timeout</code>用于stream里面，暂时不考虑</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct event_data : data structure</span></span><br><span class="line"><span class="comment">event_reg_fd : Register a callback function to be called on input on a file descriptor.</span></span><br><span class="line"><span class="comment">event_loop: event main loop</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">select</span> <span class="params">(<span class="keyword">int</span> __nfds, fd_set *__restrict __readfds,</span></span></span><br><span class="line"><span class="function"><span class="params">		   fd_set *__restrict __writefds,</span></span></span><br><span class="line"><span class="function"><span class="params">		   fd_set *__restrict __exceptfds,</span></span></span><br><span class="line"><span class="function"><span class="params">		   struct timeval *__restrict __timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p><img src="1562813831598.png" alt="1562813831598"></p>
<p><img src="1562812050268.png" alt="1562812050268"></p>
<p><img src="1562813232585.png" alt="1562813232585"></p>
<p><img src="1562813408598.png" alt="1562813408598"></p>
<h3 id="callback-注册流程"><a href="#callback-注册流程" class="headerlink" title="callback 注册流程"></a>callback 注册流程</h3><ul>
<li>问题是，<code>from_client</code>是怎么被触发的，或者说，<code>event_reg_fd</code>+<code>event_loop</code>是怎么处理事件并且调用注册的cb的<ul>
<li><code>event_loop</code>写的注释是<em>Dispatch file descriptor events (and timeouts) by invoking callbacks.</em>，我觉得我们用到的不是timeout，那么就应该是fd。</li>
<li>sock连接是怎么被读取的，找sock的read？</li>
</ul>
</li>
<li>answer：<a href="https://blog.csdn.net/wendellluntan/article/details/72841924" target="_blank" rel="noopener">Linux: fd_set用法</a><ul>
<li>当调用select()时，由内核根据IO状态修改fd_set的内容，由此来通知执行了select()的进程哪一socket或文件可读。</li>
<li>select()函数常常用在用一个进程监听多个服务器端socket。</li>
<li>后来看到，这种方式实现io监听是比较古老的做法，现在用poll以及epoll性能更好</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先main中调用</span></span><br><span class="line">ss = backend_server_socket(h)				<span class="comment">// 包含两个操作</span></span><br><span class="line">    <span class="comment">/* ss is a server socket that the clients connect to. The callback</span></span><br><span class="line"><span class="comment">       therefore accepts clients on ss */</span></span><br><span class="line">    ss = backend_socket_init(clicon_handle h)	<span class="comment">// 连接&lt;CLICON_SOCK&gt;</span></span><br><span class="line">    	config_socket_init_unix(h, sock);		<span class="comment">//sock = &lt;CLICON_SOCK&gt; 配置文件定义的</span></span><br><span class="line">    event_reg_fd(ss, backend_accept_client, h, <span class="string">"server socket"</span>)<span class="comment">//注册backend_accept_client</span></span><br><span class="line">    	backend_accept_client(<span class="keyword">int</span> fd,<span class="keyword">void</span> *arg)	<span class="comment">// 注意在这个函数里面又注册一次的理解</span></span><br><span class="line">    		event_reg_fd(s, from_client, (<span class="keyword">void</span>*)ce, <span class="string">"local netconf client socket"</span>)</span><br><span class="line">    			<span class="comment">/* An internal clicon message has arrived from a client. Receive and 						dispatch.*/</span></span><br><span class="line">                <span class="comment">// 实际调用的时候应该主要是from_client 这个callback</span></span><br><span class="line">    			from_client(<span class="keyword">int</span> s, <span class="keyword">void</span>* arg)</span><br><span class="line">    				clicon_msg_rcv(ce-&gt;ce_s, &amp;msg, &amp;eof)</span><br><span class="line">                    from_client_msg(h, ce, msg)</span><br><span class="line">    					<span class="comment">/* Search RPC callbacks and invoke if XML match with tag*/</span></span><br><span class="line">    					ret = rpc_callback_call(h, xe, cbret, ce))</span><br><span class="line">                        <span class="comment">/* send cbret back*/</span></span><br><span class="line">						send_msg_reply(ce-&gt;ce_s, cbuf_get(cbret), cbuf_len(cbret)+<span class="number">1</span>)</span><br><span class="line">        					clicon_msg_send(s, reply)</span><br><span class="line">        						atomicio((<span class="keyword">ssize_t</span> (*)(<span class="keyword">int</span>, <span class="keyword">void</span> *, <span class="keyword">size_t</span>))<span class="built_in">write</span>,</span><br><span class="line">                                         s, msg, ntohl(msg-&gt;op_len)) &lt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<p><img src="1562811464793.png" alt="1562811464793"></p>
<p><img src="1562811349774.png" alt="1562811349774"></p>
<p><img src="1562823944280.png" alt="1562823944280"></p>
<p><img src="1562811383999.png" alt="1562811383999"></p>
<p><img src="1562810539358.png" alt="1562810539358"></p>
<p><img src="1562810474656.png" alt="1562810474656"></p>
<p><img src="1562810441329.png" alt="1562810441329"></p>
<p><img src="1562897454820.png" alt="1562897454820"></p>
<h3 id="TODO：细看xmldb中的操作"><a href="#TODO：细看xmldb中的操作" class="headerlink" title="TODO：细看xmldb中的操作"></a>TODO：细看xmldb中的操作</h3><ul>
<li>对xmldb的操作全部来自<code>backend_rpc_init</code>中注册的操作。</li>
</ul>
<h4 id="xml-数据结构"><a href="#xml-数据结构" class="headerlink" title="xml 数据结构"></a>xml 数据结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xml</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>             *x_name;       <span class="comment">/* name of node */</span></span><br><span class="line">    <span class="keyword">char</span>             *x_prefix;     <span class="comment">/* namespace localname N, called prefix */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">xml</span>       *<span class="title">x_up</span>;</span>         <span class="comment">/* parent node in hierarchy if any */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">xml</span>      **<span class="title">x_childvec</span>;</span>   <span class="comment">/* vector of children nodes */</span></span><br><span class="line">    <span class="keyword">int</span>               x_childvec_len;<span class="comment">/* Number of children */</span></span><br><span class="line">    <span class="keyword">int</span>               x_childvec_max;<span class="comment">/* Length of allocated vector */</span></span><br><span class="line">    <span class="keyword">enum</span> cxobj_type   x_type;       <span class="comment">/* type of node: element, attribute, body */</span></span><br><span class="line">    <span class="keyword">char</span>             *x_value;      <span class="comment">/* attribute and body nodes have values */</span></span><br><span class="line">    <span class="keyword">int</span>               x_flags;      <span class="comment">/* Flags according to XML_FLAG_* */</span></span><br><span class="line">    yang_stmt        *x_spec;       <span class="comment">/* Pointer to specification, eg yang, by</span></span><br><span class="line"><span class="comment">				       reference, dont free */</span></span><br><span class="line">    cg_var           *x_cv;         <span class="comment">/* Cached value as cligen variable</span></span><br><span class="line"><span class="comment">                                       (eg xml_cmp) */</span></span><br><span class="line">    <span class="keyword">char</span>             *x_ns_cache;   <span class="comment">/* Cached namespace */</span></span><br><span class="line">    <span class="keyword">int</span>              _x_vector_i;   <span class="comment">/* internal use: xml_child_each */</span></span><br><span class="line">    <span class="keyword">int</span>              _x_i;          <span class="comment">/* internal use for sorting:</span></span><br><span class="line"><span class="comment">				       see xml_enumerate and xml_cmp */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xml</span> <span class="title">cxobj</span>;</span> <span class="comment">/* struct defined in clicon_xml.c */</span></span><br></pre></td></tr></table></figure>

<h4 id="xmldb相关操作"><a href="#xmldb相关操作" class="headerlink" title="xmldb相关操作"></a>xmldb相关操作</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//xmldb操作通过rpc_callback来完成，相关的函数在clixon_datastore*中，以下是一个例子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backend_rpc_init</span><span class="params">(clicon_handle h)</span></span></span><br><span class="line"><span class="function">    <span class="title">rpc_callback_register</span><span class="params">(h, from_client_get_config, <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">		      <span class="string">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>, <span class="string">"get-config"</span>)</span></span></span><br><span class="line"><span class="function">    	<span class="title">from_client_get_config</span><span class="params">(clicon_handle h, cxobj *xe,</span></span></span><br><span class="line"><span class="function"><span class="params">                               cbuf *cbret, <span class="keyword">void</span> *arg, <span class="keyword">void</span> *regarg)</span></span></span><br><span class="line"><span class="function">    		<span class="title">xmldb_get</span><span class="params">(h, db, xpath, &amp;xret)</span></span></span><br><span class="line"><span class="function">                <span class="title">xmldb_get0</span><span class="params">(h, db, xpath, <span class="number">1</span>, xret, <span class="literal">NULL</span>)</span></span>;</span><br><span class="line">                    <span class="comment">/* Get content of database using xpath. return a</span></span><br><span class="line"><span class="comment">                    set of matching sub-trees</span></span><br><span class="line"><span class="comment">                     * The function returns a minimal tree that</span></span><br><span class="line"><span class="comment">                     includes all sub-trees that match</span></span><br><span class="line"><span class="comment">                     * xpath.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">					d(h, db, xpath, xret, msd);</span><br><span class="line">                        xmldb_readfile(h, db, yspec, &amp;xt, msd) <span class="comment">// 看下面详细的</span></span><br><span class="line">                        <span class="comment">/* Here xt looks like: &lt;config&gt;...&lt;/config&gt; */</span></span><br><span class="line">                        <span class="comment">/* Given the xpath, return a vector of matches in xvec */</span></span><br><span class="line">                        xpath_vec(xt, <span class="string">"%s"</span>, &amp;xvec, &amp;xlen, xpath?xpath:<span class="string">"/"</span>) <span class="comment">// TODO</span></span><br><span class="line">                        <span class="comment">/* If vectors are specified then mark the nodes found</span></span><br><span class="line"><span class="comment">                        	with all ancestors</span></span><br><span class="line"><span class="comment">                         * and filter out everything else,</span></span><br><span class="line"><span class="comment">                         * otherwise return complete tree.</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        xml_apply(xt, CX_ELMNT, (<span class="keyword">xml_applyfn_t</span>*)xml_flag_reset,</span><br><span class="line">                          (<span class="keyword">void</span>*)XML_FLAG_MARK)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Here xt looks like: &lt;config&gt;...&lt;/config&gt; */</span></span><br><span class="line">xmldb_readfile(h, db, yspec, &amp;xt, msd)</span><br><span class="line">    xmldb_db2file(h, db, &amp;dbfile) <span class="comment">// 从db name转化到dbfile的完整路径</span></span><br><span class="line">    format = clicon_option_str(h, <span class="string">"CLICON_XMLDB_FORMAT"</span>)<span class="comment">// 从配置文件(clixon.config)看是xml</span></span><br><span class="line">    <span class="comment">/* Read an XML definition from file and parse it into a parse-tree. */</span></span><br><span class="line">    xml_parse_file(fd, <span class="string">"&lt;/config&gt;"</span>, yspec, &amp;x0) <span class="comment">//TODO 细看 while循环里面还没看明白</span></span><br><span class="line">   	<span class="comment">/* Always assert a top-level called "config".  Two cases, omit now*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// edit 部分会不太一样，涉及lock之类的 TODO</span></span><br><span class="line">from_client_edit_config()</span><br><span class="line">    xmldb_put(h, target, operation, xc, username, cbret)</span><br></pre></td></tr></table></figure>

<p>curl -G <a href="http://127.0.0.1/restconf/data" target="_blank" rel="noopener">http://127.0.0.1/restconf/data</a></p>
<h4 id="xmldb-调用流程"><a href="#xmldb-调用流程" class="headerlink" title="xmldb 调用流程"></a>xmldb 调用流程</h4><ul>
<li>这次我们关注传入参数，涉及yang的部分</li>
<li>xt means xtop means <em>Top of XML parse tree</em></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回顾上面的调用的流程</span></span><br><span class="line"><span class="comment">// 实际调用的时候应该主要是from_client 这个callback</span></span><br><span class="line">from_client(<span class="keyword">int</span> s, <span class="keyword">void</span>* arg) <span class="comment">// 这个callback因为sock通信被触发</span></span><br><span class="line">    <span class="comment">/* 从sock接收到信息在 &amp;msg ce是一个handle一样的保存了连接的客户端信息：</span></span><br><span class="line"><span class="comment">    	Client entry. Keep state about every connected client.*/</span></span><br><span class="line">    clicon_msg_rcv(ce-&gt;ce_s, &amp;msg, &amp;eof)</span><br><span class="line">    	<span class="comment">/* 传入msg，TODO */</span></span><br><span class="line">        from_client_msg(h, ce, msg)</span><br><span class="line">    		yspec = clicon_dbspec_yang(h); <span class="comment">//Get YANG specification for application</span></span><br><span class="line">			clicon_msg_decode(msg, yspec, &amp;xt); <span class="comment">// 从msg解析到[out] **xml &amp;xt</span></span><br><span class="line">				xml_parse_string(xmlstr, yspec, xml) <span class="comment">// 从xmlstr解析到[out] xml</span></span><br><span class="line">                    *xtop = xml_new(XML_TOP_SYMBOL, <span class="literal">NULL</span>, <span class="literal">NULL</span>) <span class="comment">// 产生一个xtop</span></span><br><span class="line">                    <span class="comment">/* 从xmlstr 解析到 xml（上一条生成了xtop，实际作用语句是这条 */</span></span><br><span class="line">                    _xml_parse(str, yspec, *xtop) <span class="comment">// TODO 想知道yspec作用的话需要看这个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Search RPC callbacks and invoke if XML match with tag*/</span></span><br><span class="line">        ret = rpc_callback_call(h, xe, cbret, ce))</span><br><span class="line">        <span class="comment">/* send cbret back*/</span></span><br><span class="line">        send_msg_reply(ce-&gt;ce_s, cbuf_get(cbret), cbuf_len(cbret)+<span class="number">1</span>)</span><br><span class="line">        clicon_msg_send(s, reply)</span><br><span class="line">        atomicio((<span class="keyword">ssize_t</span> (*)(<span class="keyword">int</span>, <span class="keyword">void</span> *, <span class="keyword">size_t</span>))<span class="built_in">write</span>,</span><br><span class="line">                 s, msg, ntohl(msg-&gt;op_len)) &lt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sparta@vostrozhc:~$ tail -f /var/<span class="built_in">log</span>/syslog | grep clixon_restconf</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: clixon_restconf: 30315 Started</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CONFIGFILE=/usr/<span class="built_in">local</span>/etc/example.xml</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/clixon-config@2019-06-05.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: clixon_plugins_load</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: DEBUG: Loading plugin <span class="string">'/usr/local/lib/example/restconf/example_restconf.so'</span> ...</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: plugin_load_one file:/usr/<span class="built_in">local</span>/lib/example/restconf/example_restconf.so <span class="keyword">function</span>:clixon_plugin_init</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: clixon_plugin_init restconf</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: plugin_load_one</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/clixon-example@2019-01-13.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/ietf-interfaces@2018-02-20.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/ietf-yang-types@2013-07-15.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/ietf-ip@2014-06-16.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/ietf-inet-types@2013-07-15.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/iana-if-type@2014-05-08.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/clixon-lib@2019-06-05.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/ietf-yang-library@2016-06-21.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/ietf-netconf@2011-06-01.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: yang_parse_filename /usr/<span class="built_in">local</span>/share/clixon/clixon-rfc5277@2008-07-01.yang</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_DIR =<span class="comment">#011 "/usr/local/lib/example/cli"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_MODULE_LIBRARY_RFC7895 =<span class="comment">#011 "true"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_MODE =<span class="comment">#011 "example"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_UTF8 =<span class="comment">#011 "0"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_NACM_MODE =<span class="comment">#011 "disabled"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_XMLDB_DIR =<span class="comment">#011 "/usr/local/var/example"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_SOCK_PORT =<span class="comment">#011 "4535"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_GENMODEL_COMPLETION =<span class="comment">#011 "1"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CONFIGFILE =<span class="comment">#011 "/usr/local/etc/example.xml"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_STREAM_DISCOVERY_RFC8040 =<span class="comment">#011 "false"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_STREAM_DISCOVERY_RFC5277 =<span class="comment">#011 "false"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_AUTOCOMMIT =<span class="comment">#011 "0"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_SOCK_GROUP =<span class="comment">#011 "clicon"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_STREAM_URL =<span class="comment">#011 "https://localhost"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_BACKEND_DIR =<span class="comment">#011 "/usr/local/lib/example/backend"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLISPEC_DIR =<span class="comment">#011 "/usr/local/lib/example/clispec"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_NETCONF_DIR =<span class="comment">#011 "/usr/local/lib/example/netconf"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_SOCK_FAMILY =<span class="comment">#011 "UNIX"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_STREAM_PATH =<span class="comment">#011 "streams"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_YANG_REGEXP =<span class="comment">#011 "posix"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_VARONLY =<span class="comment">#011 "1"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_GENMODEL =<span class="comment">#011 "1"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_TAB_MODE =<span class="comment">#011 "0"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_XMLDB_FORMAT =<span class="comment">#011 "xml"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_RESTCONF_DIR =<span class="comment">#011 "/usr/local/lib/example/restconf"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_STARTUP_MODE =<span class="comment">#011 "init"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_XMLDB_PRETTY =<span class="comment">#011 "true"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_XML_CHANGELOG =<span class="comment">#011 "false"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_HIST_FILE =<span class="comment">#011 "~/.clixon_cli_history"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_RESTCONF_PATH =<span class="comment">#011 "/www-data/fastcgi_restconf.sock"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_MODULE_SET_ID =<span class="comment">#011 "0"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_HIST_SIZE =<span class="comment">#011 "300"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_BACKEND_REGEXP =<span class="comment">#011 "(.so)$"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_XMLDB_MODSTATE =<span class="comment">#011 "false"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_BACKEND_PIDFILE =<span class="comment">#011 "/usr/local/var/example/example.pidfile"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_DATASTORE_CACHE =<span class="comment">#011 "cache"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_TRANSACTION_MOD =<span class="comment">#011 "false"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_RESTCONF_PRETTY =<span class="comment">#011 "true"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_YANG_MODULE_MAIN =<span class="comment">#011 "clixon-example"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_STREAM_RETENTION =<span class="comment">#011 "3600"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_LINESCROLLING =<span class="comment">#011 "0"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_GENMODEL_TYPE =<span class="comment">#011 "VARS"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_SOCK =<span class="comment">#011 "/usr/local/var/example/example.sock"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_CLI_MODEL_TREENAME =<span class="comment">#011 "datamodel"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_YANG_DIR =<span class="comment">#011 "/usr/local/share/clixon"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_FEATURE =<span class="comment">#011 "ietf-netconf:candidate"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_FEATURE =<span class="comment">#011 "ietf-netconf:startup"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_FEATURE =<span class="comment">#011 "ietf-netconf:validate"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: CLICON_FEATURE =<span class="comment">#011 "ietf-netconf:xpath"</span></span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: example_restconf_start</span><br><span class="line">Jul 17 14:36:29 vostrozhc clixon_restconf[30315]: restconf_main: Opening FCGX socket: /www-data/fastcgi_restconf.sock</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: ------------</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: path: /restconf/data</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_restconf</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: QUERY_STRING = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: REQUEST_METHOD = <span class="string">'GET'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: CONTENT_TYPE = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: CONTENT_LENGTH = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SCRIPT_FILENAME = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SCRIPT_NAME = <span class="string">'/restconf/data'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: REQUEST_URI = <span class="string">'/restconf/data'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: DOCUMENT_URI = <span class="string">'/restconf/data'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: DOCUMENT_ROOT = <span class="string">'/var/www/html'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SERVER_PROTOCOL = <span class="string">'HTTP/1.1'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: GATEWAY_INTERFACE = <span class="string">'CGI/1.1'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SERVER_SOFTWARE = <span class="string">'nginx/1.10.3'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: REMOTE_ADDR = <span class="string">'127.0.0.1'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: REMOTE_PORT = <span class="string">'37466'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SERVER_ADDR = <span class="string">'127.0.0.1'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SERVER_PORT = <span class="string">'80'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: SERVER_NAME = <span class="string">'_'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: HTTP_COOKIE = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: HTTPS = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: HTTP_ACCEPT = <span class="string">'*/*'</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: HTTP_CONTENT_TYPE = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: HTTP_AUTHORIZATION = <span class="string">''</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_restconf: method=data</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_restconf DATA=</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: example_restconf_credentials retval:1</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_restconf auth:1 (null)</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_restconf auth2:1 none</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data method:GET</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data_get2</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data_get2 path:/</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: clicon_rpc_msg request:&lt;rpc username=<span class="string">"none"</span>&gt;&lt;get&gt;&lt;filter <span class="built_in">type</span>=<span class="string">"xpath"</span> select=<span class="string">"/"</span>/&gt;&lt;/get&gt;&lt;/rpc&gt;</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: Send msg on /usr/<span class="built_in">local</span>/var/example/example.sock</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: clicon_rpc_msg retdata:&lt;rpc-reply&gt;&lt;data&gt;&lt;modules-state xmlns=<span class="string">"urn:ietf:params:xml:ns:yang:ietf-yang-library"</span>&gt;&lt;module-set-id&gt;0&lt;/module-set-id&gt;&lt;module&gt;&lt;name&gt;clixon-example&lt;/name&gt;&lt;revision&gt;2019-01-13&lt;/revision&gt;&lt;namespace&gt;urn:example:clixon&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;ietf-interfaces&lt;/name&gt;&lt;revision&gt;2018-02-20&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:yang:ietf-interfaces&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;ietf-yang-types&lt;/name&gt;&lt;revision&gt;2013-07-15&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:yang:ietf-yang-types&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;ietf-ip&lt;/name&gt;&lt;revision&gt;2014-06-16&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:yang:ietf-ip&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;ietf-inet-types&lt;/name&gt;&lt;revision&gt;2013-07-15&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:yang:ietf-inet-types&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;iana-if-type&lt;/name&gt;&lt;revision&gt;2014-05-08&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:yang:iana-if-type&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;clixon-lib&lt;/name&gt;&lt;revision&gt;2019-06-05&lt;/revision&gt;&lt;namespace&gt;http://clicon.org/lib&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;ietf-yang-library&lt;/name&gt;&lt;revision&gt;2016-06-21&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:yang:ietf-yang-library&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;ietf-netconf&lt;/name&gt;&lt;revision&gt;2011-06-01&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:netconf:base:1.0&lt;/namespace&gt;&lt;feature&gt;candidate&lt;/feature&gt;&lt;feature&gt;validate&lt;/feature&gt;&lt;feature&gt;startup&lt;/feature&gt;&lt;feature&gt;xpath&lt;/feature&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;module&gt;&lt;name&gt;clixon-rfc5277&lt;/name&gt;&lt;revision&gt;2008-07-01&lt;/revision&gt;&lt;namespace&gt;urn:ietf:params:xml:ns:netmod:notification&lt;/namespace&gt;&lt;conformance-type&gt;implement&lt;/conformance-type&gt;&lt;/module&gt;&lt;/modules-state&gt;&lt;/data&gt;&lt;/rpc-reply&gt;</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data_get2 cbuf:&#123;<span class="comment">#012  "data": &#123;#012    "ietf-yang-library:modules-state": &#123;#012      "module-set-id": "0",#012      "module": [#012        &#123;#012          "name": "clixon-example",#012          "revision": "2019-01-13",#012          "namespace": "urn:example:clixon",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "ietf-interfaces",#012          "revision": "2018-02-20",#012          "namespace": "urn:ietf:params:xml:ns:yang:ietf-interfaces",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "ietf-yang-types",#012          "revision": "2013-07-15",#012          "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "ietf-ip",#012          "revision": "2014-06-16",#012          "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "ietf-inet-types",#012          "revision": "2013-07-15",#012          "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "iana-if-type",#012          "revision": "2014-05-08",#012          "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "clixon-lib",#012          "revision": "2019-06-05",#012          "namespace": "http://clicon.org/lib",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "ietf-yang-library",#012          "revision": "2016-06-21",#012          "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "ietf-netconf",#012          "revision": "2011-06-01",#012          "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",#012          "feature": [#012            "candidate",#012            "validate",#012            "startup",#012            "xpath"#012            ],#012          "conformance-type": "implement"#012        &#125;,#012        &#123; #012          "name": "clixon-rfc5277",#012          "revision": "2008-07-01",#012          "namespace": "urn:ietf:params:xml:ns:netmod:notification",#012          "conformance-type": "implement"#012        &#125;#012      ]#012    &#125;#012  &#125;#012&#125;</span></span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data_get2 retval:0</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_data retval:0</span><br><span class="line">Jul 17 14:37:31 vostrozhc clixon_restconf[30315]: api_restconf retval:0</span><br></pre></td></tr></table></figure>

<h4 id="长url"><a href="#长url" class="headerlink" title="长url"></a>长url</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: ------------</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: path: /restconf/data/ietf-yang-library:modules-state/module=ietf-netconf,2011-06-21</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_restconf</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: QUERY_STRING = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: REQUEST_METHOD = <span class="string">'GET'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: CONTENT_TYPE = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: CONTENT_LENGTH = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SCRIPT_FILENAME = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SCRIPT_NAME = <span class="string">'/restconf/data/ietf-yang-library:modules-state/module=ietf-netconf,2011-06-21'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: REQUEST_URI = <span class="string">'/restconf/data/ietf-yang-library:modules-state/module=ietf-netconf,2011-06-21'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: DOCUMENT_URI = <span class="string">'/restconf/data/ietf-yang-library:modules-state/module=ietf-netconf,2011-06-21'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: DOCUMENT_ROOT = <span class="string">'/var/www/html'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SERVER_PROTOCOL = <span class="string">'HTTP/1.1'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: GATEWAY_INTERFACE = <span class="string">'CGI/1.1'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SERVER_SOFTWARE = <span class="string">'nginx/1.10.3'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: REMOTE_ADDR = <span class="string">'127.0.0.1'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: REMOTE_PORT = <span class="string">'56262'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SERVER_ADDR = <span class="string">'127.0.0.1'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SERVER_PORT = <span class="string">'80'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: SERVER_NAME = <span class="string">'_'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: HTTP_COOKIE = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: HTTPS = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: HTTP_ACCEPT = <span class="string">'*/*'</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: HTTP_CONTENT_TYPE = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: HTTP_AUTHORIZATION = <span class="string">''</span></span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_restconf: method=data</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_restconf DATA=</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: example_restconf_credentials retval:1</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_restconf auth:1 none</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_restconf auth2:1 none</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_data</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_data method:GET</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_data_get2</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_path2xpath [2] cvname:modules-state</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_path2xpath [3] cvname:module</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: api_data_get2 path:/modules-state/module[name=<span class="string">'ietf-netconf'</span>][revision=<span class="string">'2011-06-21'</span>]</span><br><span class="line">Aug  9 14:44:07 vostrozhc clixon_restconf[21683]: clicon_rpc_msg request:&lt;rpc username=<span class="string">"none"</span>&gt;&lt;get&gt;&lt;filter <span class="built_in">type</span>=<span class="string">"xpath"</span> select=<span class="string">"/modules-state/module[name='ietf-netconf'][revision='2011-06-21']"</span>/&gt;&lt;/get&gt;&lt;/rpc&gt;</span><br></pre></td></tr></table></figure>

<h3 id="authentication"><a href="#authentication" class="headerlink" title="authentication"></a>authentication</h3><p><a href="https://security.stackexchange.com/questions/988/is-basic-auth-secure-if-done-over-https" target="_blank" rel="noopener">Is BASIC-Auth secure if done over HTTPS?</a></p>
<ul>
<li>at least we should basic -auth over https</li>
</ul>
<p><img src="HTTPAuth.png" alt="A sequence diagram illustrating HTTP messages between a client and a server lifeline."></p>
<ul>
<li>work as a plugin</li>
<li><code>clixon/examplemain/example_restconf.c</code>是plugin定义的文件</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// restconf_main.c/main plugin加载过程</span></span><br><span class="line"><span class="keyword">if</span> (clixon_plugins_load(h, CLIXON_PLUGIN_INIT, dir, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (clixon_plugin_start(h) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// api是这句定义的</span></span><br><span class="line"><span class="function">clixon_plugin_api * <span class="title">clixon_plugin_init</span><span class="params">(clicon_handle h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> clixon_plugin_api api = &#123;</span><br><span class="line">    <span class="string">"example"</span>,           <span class="comment">/* name */</span></span><br><span class="line">    clixon_plugin_init,  <span class="comment">/* init */</span></span><br><span class="line">    example_restconf_start,<span class="comment">/* start */</span></span><br><span class="line">    <span class="literal">NULL</span>,                <span class="comment">/* exit */</span></span><br><span class="line">    .ca_auth=example_restconf_credentials   <span class="comment">/* auth */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// restconf_main.c/api_restconf</span></span><br><span class="line"><span class="comment">/* If present, check credentials. See "plugin_credentials" in plugin</span></span><br><span class="line"><span class="comment">     * See RFC 8040 section 2.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 在这个函数里面调用cp_api.ca_auth, 相当于每次处理请求都会检查一次认证</span></span><br><span class="line">    <span class="keyword">if</span> ((authenticated = clixon_plugin_auth(h, r)) &lt; <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">goto</span> done;</span><br><span class="line">    clicon_debug(<span class="number">1</span>, <span class="string">"%s auth:%d %s"</span>, __FUNCTION__, authenticated, clicon_username_get(h));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If set but no user, we set a dummy user */</span></span><br><span class="line">    <span class="keyword">if</span> (authenticated)&#123;</span><br><span class="line">	<span class="keyword">if</span> (clicon_username_get(h) == <span class="literal">NULL</span>)</span><br><span class="line">	    clicon_username_set(h, <span class="string">"none"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (netconf_access_denied_xml(&amp;xret, <span class="string">"protocol"</span>, <span class="string">"The requested URL was unauthorized"</span>) &lt; <span class="number">0</span>)</span><br><span class="line">	    <span class="keyword">goto</span> done;</span><br><span class="line">	<span class="keyword">if</span> ((xerr = xpath_first(xret, <span class="string">"//rpc-error"</span>)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">	    <span class="keyword">if</span> (api_return_err(h, r, xerr, pretty, use_xml, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> done;</span><br><span class="line">	    <span class="keyword">goto</span> ok;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">goto</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">    clicon_debug(<span class="number">1</span>, <span class="string">"%s auth2:%d %s"</span>, __FUNCTION__, authenticated, clicon_username_get(h));</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">authenticated = clixon_plugin_auth(h, r))</span><br><span class="line">    cp = &amp;_clixon_plugins[i];</span><br><span class="line">    authfn = cp-&gt;cp_api.ca_auth;</span><br><span class="line">    <span class="comment">/* authfn 是 example_restconf.c中的example_restconf_credentials</span></span><br><span class="line"><span class="comment">    	这个函数里面默认的basic_auth=0, 要修改再编译 或者--*/</span></span><br><span class="line">    retval = authfn(h, arg);</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开了auth机制 basic_auth = 1 后</span></span><br><span class="line"><span class="comment">// 通过启动命令加参数打开sudo su -c "/www-data/clixon_restconf -D 1 -f /usr/local/etc/example.xml -- -a" -s /bin/sh www-data</span></span><br><span class="line">sparta@vostrozhc:~$ curl -G http://127.0.0.1/restconf/data</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"ietf-restconf:errors"</span> : &#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"error-type"</span>: <span class="string">"protocol"</span>,</span><br><span class="line">    <span class="attr">"error-tag"</span>: <span class="string">"access-denied"</span>,</span><br><span class="line">    <span class="attr">"error-severity"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"error-message"</span>: <span class="string">"The requested URL was unauthorized"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>现在还剩下的问题是，我如何写http header 去通过认证</strong></p>
<ul>
<li><p><em>three hardwired users andy, wilma and guest from RFC8341 A.1 *密码是 *</em>bar**</p>
</li>
<li><p>这个认证机制似乎是http的一个定义好的，可以在postman选这个认证方法</p>
</li>
<li><p><img src="1563412333055.png" alt="1563412333055"></p>
</li>
</ul>
<h3 id="clixon-sysrepo"><a href="#clixon-sysrepo" class="headerlink" title="clixon-sysrepo"></a>clixon-sysrepo</h3><ul>
<li>尝试加入sysrepo，失败，问题应该是编译的时候没有加上sysrepo的动态连接库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc  backend_main.o backend_socket.o backend_client.o backend_commit.o backend_plugin.o backend_startup.o -L. libclixon_backend.so.3.10 -L../../lib/src -ldl -lnsl -lcrypt -lfcgi -lcligen -lm  ../../lib/src/libclixon.so.3.10 -lpthread -o clixon_backend</span><br><span class="line">backend_main.o：在函数‘main’中：</span><br><span class="line">backend_main.c:(.text.startup+0x7ac)：对‘sr_connect’未定义的引用</span><br><span class="line">backend_main.c:(.text.startup+0x7b7)：对‘sr_strerror’未定义的引用</span><br><span class="line">backend_main.c:(.text.startup+0x829)：对‘sr_session_start’未定义的引用</span><br><span class="line">backend_main.c:(.text.startup+0x834)：对‘sr_strerror’未定义的引用</span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure>



<h3 id="stream-notification"><a href="#stream-notification" class="headerlink" title="stream notification"></a>stream notification</h3><ul>
<li><p>需要在<code>/usr/local/etc/example.xml</code>里面打开设置<CLICON_STREAM_DISCOVERY_RFC8040> =#011 “true”</p>
</li>
<li><p>这样才会加载ietf-restconf-monitoring.yang</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询streams信息</span></span><br><span class="line">GET /restconf/data/ietf-restconf-monitoring:restconf-state/\</span><br><span class="line">streams HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Accept: application/yang-data+xml</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ietf-restconf-monitoring:restconf-state"</span>: &#123;</span><br><span class="line">      <span class="string">"streams"</span>: &#123;</span><br><span class="line">          <span class="string">"stream"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"EXAMPLE"</span>,</span><br><span class="line">                  <span class="string">"description"</span>: <span class="string">"Example event stream"</span>,</span><br><span class="line">                  <span class="string">"replay-support"</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="string">"access"</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"encoding"</span>: <span class="string">"xml"</span>,</span><br><span class="line">                          <span class="string">"location"</span>: <span class="string">"https://localhost/streams/EXAMPLE"</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ]</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过查询到的location 订阅 –但是我失败了 404</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Accept: text&#x2F;event-stream&quot; -s -X GET http:&#x2F;&#x2F;localhost&#x2F;streams&#x2F;EXAMPLE</span><br><span class="line"></span><br><span class="line">GET &#x2F;streams&#x2F;NETCONF HTTP&#x2F;1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Accept: text&#x2F;event-stream</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// clixon的这个部分是定义在clixon-example.yang里面 对应RFC8040 6.4</span></span><br><span class="line"><span class="comment">/* Example notification as used in RFC 5277 and RFC 8040 */</span></span><br><span class="line">notification event &#123;</span><br><span class="line">     description "Example notification event.";</span><br><span class="line">     leaf event-class &#123;</span><br><span class="line">       type string;</span><br><span class="line">       description "Event class identifier.";</span><br><span class="line">     &#125;</span><br><span class="line">     container reportingEntity &#123;</span><br><span class="line">       description "Event specific information.";</span><br><span class="line">       leaf card &#123;</span><br><span class="line">         type string;</span><br><span class="line">         description "Line card identifier.";</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     leaf severity &#123;</span><br><span class="line">       type string;</span><br><span class="line">       description "Event severity description.";</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="path2xpath"><a href="#path2xpath" class="headerlink" title="path2xpath"></a>path2xpath</h3><ul>
<li>restconf要求的url path形式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://<span class="tag">&lt;<span class="name">ADDRESS</span>&gt;</span>/<span class="tag">&lt;<span class="name">ROOT</span>&gt;</span>/data/<span class="tag">&lt;<span class="name">[YANG</span> <span class="attr">MODULE:</span>]<span class="attr">CONTAINER</span>&gt;</span>/<span class="tag">&lt;<span class="name">LEAF=KEY</span>&gt;</span>[?<span class="tag">&lt;<span class="name">OPTIONS</span>&gt;</span>]</span><br><span class="line">https://<span class="tag">&lt;<span class="name">ADDRESS</span>&gt;</span>/restconf/data/ietf-interfaces:interfaces/interface=GigabitEthernet1?depth=unbounded</span><br></pre></td></tr></table></figure>

<ul>
<li>netconf使用的xpath</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/MODULE:CONTAINER/LEAF[KEY=key]</span><br><span class="line">get --filter-xpath <span class="string">"/building:rooms/room[room-number=1]		# 如果key是int</span></span><br><span class="line"><span class="string">get --filter-xpath "</span>/building:rooms/room[room-name=<span class="string">'rooma'</span>]		<span class="comment"># 如果key是string</span></span><br><span class="line">curl -G localhost/restconf/data/building:rooms/room=rooma</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个key的写法，这样似乎必须每次都写完整每个key，而且必须保证顺序一样 这个似乎是协议规定的rfc-8040p27</span></span><br><span class="line">curl -sS -X GET http://localhost/restconf/data/ietf-yang-library:modules-state/module=ietf-netconf,2011-06-21</span><br><span class="line">转换成xpath /ietf-yang-library:modules-state/modules-state/module[name=<span class="string">'ietf-netconf'</span>][revision=<span class="string">'2011-06-21'</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>需要一个转换从path到xpath</p>
</li>
<li><p>clixon的案例：</p>
<ul>
<li><code>str2cvec(path, &#39;/&#39;, &#39;=&#39;, &amp;pcvec) &lt; 0</code></li>
<li><code>ret = api_path2xpath(yspec, pcvec, pi, cbpath)</code></li>
<li>clixon第一步先把path用两个标识符打断做成了他的cvec，我也可以用类似的结构体</li>
<li>第二步用得到的cvec加上一个offset，配合yang制作成xpath，其实主要是room[room-number=1]这里，需要leaf节点的key值</li>
<li>问题是，用来确定leaf的key值不是就一个吗，我用序号不行吗，否则还要问sysrepo拿leaf，很麻烦<ul>
<li>不行，只有key为数字的时候可以这么干，如果key是string的话就不可以，所以必须问sysrepo拿</li>
</ul>
</li>
</ul>
</li>
<li><p>所以现在又回到了yang的问题，yang要怎么写，对应怎么样的xpath定位？</p>
<ul>
<li><p>leaf-list的问题？</p>
</li>
<li><p><u>问题：如果没有key呢？</u> –还不知道</p>
</li>
<li><p>一个list有多个leaf作为key呢？</p>
<ul>
<li>好像每次用一个key检索没问题</li>
</ul>
</li>
<li><p><u>问题：restconf不知道它用的是哪一个key，需要找一下匹配？</u></p>
<ul>
<li>A: <strong>如果有多个key，协议规定必须每个key都指定，</strong></li>
</ul>
</li>
<li><p>一些测试与说明：</p>
<ul>
<li>我修改了building.yang，设定了两个key。</li>
<li>然后我edit-config了两个对象，room-number一样，room-name不一样</li>
<li>搜索一样的key会出两个</li>
</ul>
</li>
<li><p>可以通过key的逻辑and or来继续限制 –  不这样做</p>
<ul>
<li><u>问题：rfc7950 yang协议有没有限制对象的key的唯一性？</u> A ：要确定的，所有key一起确定同一个对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; get --filter-xpath <span class="string">"/building:rooms/room[room-number='3']"</span></span><br><span class="line">DATA</span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span>&gt;</span><br><span class="line">  &lt;room&gt;</span><br><span class="line">    &lt;room-number&gt;3&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;roomc&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;200&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">  &lt;room&gt;</span><br><span class="line">    &lt;room-number&gt;3&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;roomd&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;100&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br><span class="line"></span><br><span class="line">&gt; get --filter-xpath <span class="string">"/building:rooms/room[room-number='3' and room-name="</span>roomc<span class="string">"]"</span></span><br><span class="line">DATA</span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span>&gt;</span><br><span class="line">  &lt;room&gt;</span><br><span class="line">    &lt;room-number&gt;3&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;roomc&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;200&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br><span class="line"></span><br><span class="line">&gt; get --filter-xpath <span class="string">"/building:rooms/room[room-number='3' or room-name="</span>roomc<span class="string">"]"</span></span><br><span class="line">DATA</span><br><span class="line">&lt;rooms xmlns=<span class="string">"urn:building:test"</span>&gt;</span><br><span class="line">  &lt;room&gt;</span><br><span class="line">    &lt;room-number&gt;3&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;roomc&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;200&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">  &lt;room&gt;</span><br><span class="line">    &lt;room-number&gt;3&lt;/room-number&gt;</span><br><span class="line">    &lt;room-name&gt;roomd&lt;/room-name&gt;</span><br><span class="line">    &lt;size&gt;100&lt;/size&gt;</span><br><span class="line">  &lt;/room&gt;</span><br><span class="line">&lt;/rooms&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><ul>
<li>etag header 似乎是通过配置nginx来实现的。是http cache机制。</li>
<li>但是我改了配置文件也出不来，有可能是和我用的方式也有关系，cache使用环境好像一般是静态网页的加载。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">configure arguments: --with-cc-opt=<span class="string">'-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class="string">'-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now'</span> --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads</span><br><span class="line"></span><br><span class="line">sparta@vostrozhc:/etc/nginx/sites-available$ sudo apt install nginx-extras</span><br><span class="line"></span><br><span class="line">sparta@vostrozhc:/etc/nginx/sites-available$ sudo nginx -V</span><br><span class="line">nginx version: nginx/1.10.3 (Ubuntu)</span><br><span class="line">built with OpenSSL 1.0.2g  1 Mar 2016</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --with-cc-opt=<span class="string">'-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class="string">'-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now'</span> --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_mp4_module --with-http_perl_module --with-http_random_index_module --with-http_secure_link_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-threads --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/headers-more-nginx-module --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-auth-pam --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-cache-purge --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-development-kit --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-echo --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/ngx-fancyindex --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-http-push --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-lua --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-upload-progress --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/nginx-upstream-fair --add-module=/build/nginx-Bl0K4k/nginx-1.10.3/debian/modules/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>restconf</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>restconf</tag>
      </tags>
  </entry>
</search>
